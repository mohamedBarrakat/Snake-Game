
SnakeGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000424c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000424c  000042e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b9  0080006c  0080006c  000042ec  2**0
                  ALLOC
  3 .stab         0000294c  00000000  00000000  000042ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c1c  00000000  00000000  00006c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000974d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 32       	cpi	r26, 0x25	; 37
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <main>
      8a:	0c 94 24 21 	jmp	0x4248	; 0x4248 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_u8SetPinDir>:
#include "ATMega32_Reg.h"
#include "DIO_int.h"


u8 DIO_u8SetPinDir(u8 PortNo, u8 PinNo, u8 PinDir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
	u8 FuncReturnState = STD_OK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	84 30       	cpi	r24, 0x04	; 4
     b68:	08 f0       	brcs	.+2      	; 0xb6c <DIO_u8SetPinDir+0x26>
     b6a:	05 c1       	rjmp	.+522    	; 0xd76 <DIO_u8SetPinDir+0x230>
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	88 30       	cpi	r24, 0x08	; 8
     b70:	08 f0       	brcs	.+2      	; 0xb74 <DIO_u8SetPinDir+0x2e>
     b72:	01 c1       	rjmp	.+514    	; 0xd76 <DIO_u8SetPinDir+0x230>
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	08 f0       	brcs	.+2      	; 0xb7c <DIO_u8SetPinDir+0x36>
     b7a:	fd c0       	rjmp	.+506    	; 0xd76 <DIO_u8SetPinDir+0x230>
		(PinNo >= DIO_PIN0)   && (PinNo <=DIO_PIN7)    &&
		(PinDir >= DIO_INPUT) && (PinDir <= DIO_OUTPUT) )
	{
		switch(PortNo)
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	3e 87       	std	Y+14, r19	; 0x0e
     b84:	2d 87       	std	Y+13, r18	; 0x0d
     b86:	8d 85       	ldd	r24, Y+13	; 0x0d
     b88:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	91 05       	cpc	r25, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_u8SetPinDir+0x4c>
     b90:	4e c0       	rjmp	.+156    	; 0xc2e <DIO_u8SetPinDir+0xe8>
     b92:	2d 85       	ldd	r18, Y+13	; 0x0d
     b94:	3e 85       	ldd	r19, Y+14	; 0x0e
     b96:	22 30       	cpi	r18, 0x02	; 2
     b98:	31 05       	cpc	r19, r1
     b9a:	2c f4       	brge	.+10     	; 0xba6 <DIO_u8SetPinDir+0x60>
     b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	71 f0       	breq	.+28     	; 0xbc0 <DIO_u8SetPinDir+0x7a>
     ba4:	e9 c0       	rjmp	.+466    	; 0xd78 <DIO_u8SetPinDir+0x232>
     ba6:	2d 85       	ldd	r18, Y+13	; 0x0d
     ba8:	3e 85       	ldd	r19, Y+14	; 0x0e
     baa:	22 30       	cpi	r18, 0x02	; 2
     bac:	31 05       	cpc	r19, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <DIO_u8SetPinDir+0x6c>
     bb0:	75 c0       	rjmp	.+234    	; 0xc9c <DIO_u8SetPinDir+0x156>
     bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	91 05       	cpc	r25, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <DIO_u8SetPinDir+0x78>
     bbc:	a6 c0       	rjmp	.+332    	; 0xd0a <DIO_u8SetPinDir+0x1c4>
     bbe:	dc c0       	rjmp	.+440    	; 0xd78 <DIO_u8SetPinDir+0x232>
		{
			case DIO_PORTA:
				switch(PinDir)
     bc0:	8c 81       	ldd	r24, Y+4	; 0x04
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	3c 87       	std	Y+12, r19	; 0x0c
     bc8:	2b 87       	std	Y+11, r18	; 0x0b
     bca:	8b 85       	ldd	r24, Y+11	; 0x0b
     bcc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	c9 f0       	breq	.+50     	; 0xc04 <DIO_u8SetPinDir+0xbe>
     bd2:	2b 85       	ldd	r18, Y+11	; 0x0b
     bd4:	3c 85       	ldd	r19, Y+12	; 0x0c
     bd6:	21 30       	cpi	r18, 0x01	; 1
     bd8:	31 05       	cpc	r19, r1
     bda:	09 f0       	breq	.+2      	; 0xbde <DIO_u8SetPinDir+0x98>
     bdc:	cd c0       	rjmp	.+410    	; 0xd78 <DIO_u8SetPinDir+0x232>
				{
					case DIO_OUTPUT:
						set_bit(DDRA, PinNo);
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	40 81       	ld	r20, Z
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_u8SetPinDir+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_u8SetPinDir+0xb0>
     bfe:	84 2b       	or	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	ba c0       	rjmp	.+372    	; 0xd78 <DIO_u8SetPinDir+0x232>
					break;

					case DIO_INPUT:
						clr_bit(DDRA, PinNo);
     c04:	aa e3       	ldi	r26, 0x3A	; 58
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e3       	ldi	r30, 0x3A	; 58
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_u8SetPinDir+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_u8SetPinDir+0xd8>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	a5 c0       	rjmp	.+330    	; 0xd78 <DIO_u8SetPinDir+0x232>
					break;
				}
			break;

			case DIO_PORTB:
				switch(PinDir)
     c2e:	8c 81       	ldd	r24, Y+4	; 0x04
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	3a 87       	std	Y+10, r19	; 0x0a
     c36:	29 87       	std	Y+9, r18	; 0x09
     c38:	89 85       	ldd	r24, Y+9	; 0x09
     c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	c9 f0       	breq	.+50     	; 0xc72 <DIO_u8SetPinDir+0x12c>
     c40:	29 85       	ldd	r18, Y+9	; 0x09
     c42:	3a 85       	ldd	r19, Y+10	; 0x0a
     c44:	21 30       	cpi	r18, 0x01	; 1
     c46:	31 05       	cpc	r19, r1
     c48:	09 f0       	breq	.+2      	; 0xc4c <DIO_u8SetPinDir+0x106>
     c4a:	96 c0       	rjmp	.+300    	; 0xd78 <DIO_u8SetPinDir+0x232>
				{
					case DIO_OUTPUT:
						set_bit(DDRB, PinNo);
     c4c:	a7 e3       	ldi	r26, 0x37	; 55
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e7 e3       	ldi	r30, 0x37	; 55
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	40 81       	ld	r20, Z
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <DIO_u8SetPinDir+0x122>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <DIO_u8SetPinDir+0x11e>
     c6c:	84 2b       	or	r24, r20
     c6e:	8c 93       	st	X, r24
     c70:	83 c0       	rjmp	.+262    	; 0xd78 <DIO_u8SetPinDir+0x232>
					break;

					case DIO_INPUT:
						clr_bit(DDRB, PinNo);
     c72:	a7 e3       	ldi	r26, 0x37	; 55
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e7 e3       	ldi	r30, 0x37	; 55
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <DIO_u8SetPinDir+0x14a>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <DIO_u8SetPinDir+0x146>
     c94:	80 95       	com	r24
     c96:	84 23       	and	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	6e c0       	rjmp	.+220    	; 0xd78 <DIO_u8SetPinDir+0x232>
					break;
				}
			break;

			case DIO_PORTC:
				switch(PinDir)
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	38 87       	std	Y+8, r19	; 0x08
     ca4:	2f 83       	std	Y+7, r18	; 0x07
     ca6:	8f 81       	ldd	r24, Y+7	; 0x07
     ca8:	98 85       	ldd	r25, Y+8	; 0x08
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	c9 f0       	breq	.+50     	; 0xce0 <DIO_u8SetPinDir+0x19a>
     cae:	2f 81       	ldd	r18, Y+7	; 0x07
     cb0:	38 85       	ldd	r19, Y+8	; 0x08
     cb2:	21 30       	cpi	r18, 0x01	; 1
     cb4:	31 05       	cpc	r19, r1
     cb6:	09 f0       	breq	.+2      	; 0xcba <DIO_u8SetPinDir+0x174>
     cb8:	5f c0       	rjmp	.+190    	; 0xd78 <DIO_u8SetPinDir+0x232>
				{
					case DIO_OUTPUT:
						set_bit(DDRC, PinNo);
     cba:	a4 e3       	ldi	r26, 0x34	; 52
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e4 e3       	ldi	r30, 0x34	; 52
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	40 81       	ld	r20, Z
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_u8SetPinDir+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_u8SetPinDir+0x18c>
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	4c c0       	rjmp	.+152    	; 0xd78 <DIO_u8SetPinDir+0x232>
					break;

					case DIO_INPUT:
						clr_bit(DDRC, PinNo);
     ce0:	a4 e3       	ldi	r26, 0x34	; 52
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e4 e3       	ldi	r30, 0x34	; 52
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_u8SetPinDir+0x1b8>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_u8SetPinDir+0x1b4>
     d02:	80 95       	com	r24
     d04:	84 23       	and	r24, r20
     d06:	8c 93       	st	X, r24
     d08:	37 c0       	rjmp	.+110    	; 0xd78 <DIO_u8SetPinDir+0x232>
					break;
				}
			break;

			case DIO_PORTD:
				switch(PinDir)
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	3e 83       	std	Y+6, r19	; 0x06
     d12:	2d 83       	std	Y+5, r18	; 0x05
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	c1 f0       	breq	.+48     	; 0xd4c <DIO_u8SetPinDir+0x206>
     d1c:	2d 81       	ldd	r18, Y+5	; 0x05
     d1e:	3e 81       	ldd	r19, Y+6	; 0x06
     d20:	21 30       	cpi	r18, 0x01	; 1
     d22:	31 05       	cpc	r19, r1
     d24:	49 f5       	brne	.+82     	; 0xd78 <DIO_u8SetPinDir+0x232>
				{
					case DIO_OUTPUT:
						set_bit(DDRD, PinNo);
     d26:	a1 e3       	ldi	r26, 0x31	; 49
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e1 e3       	ldi	r30, 0x31	; 49
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	40 81       	ld	r20, Z
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <DIO_u8SetPinDir+0x1fc>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <DIO_u8SetPinDir+0x1f8>
     d46:	84 2b       	or	r24, r20
     d48:	8c 93       	st	X, r24
     d4a:	16 c0       	rjmp	.+44     	; 0xd78 <DIO_u8SetPinDir+0x232>
					break;

					case DIO_INPUT:
						clr_bit(DDRD, PinNo);
     d4c:	a1 e3       	ldi	r26, 0x31	; 49
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e1 e3       	ldi	r30, 0x31	; 49
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	48 2f       	mov	r20, r24
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	02 2e       	mov	r0, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_u8SetPinDir+0x224>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	0a 94       	dec	r0
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_u8SetPinDir+0x220>
     d6e:	80 95       	com	r24
     d70:	84 23       	and	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <DIO_u8SetPinDir+0x232>
			break;
		}
	}
	else
	{
		FuncReturnState = STD_NOK;
     d76:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
     d78:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7a:	2e 96       	adiw	r28, 0x0e	; 14
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <DIO_u8SetPinVal>:

u8 DIO_u8SetPinVal(u8 PortNo, u8 PinNo, u8 PinVal)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	2e 97       	sbiw	r28, 0x0e	; 14
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	8a 83       	std	Y+2, r24	; 0x02
     da2:	6b 83       	std	Y+3, r22	; 0x03
     da4:	4c 83       	std	Y+4, r20	; 0x04
	u8 FuncReturnState = STD_OK;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	89 83       	std	Y+1, r24	; 0x01

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	84 30       	cpi	r24, 0x04	; 4
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <DIO_u8SetPinVal+0x26>
     db0:	05 c1       	rjmp	.+522    	; 0xfbc <DIO_u8SetPinVal+0x230>
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	88 30       	cpi	r24, 0x08	; 8
     db6:	08 f0       	brcs	.+2      	; 0xdba <DIO_u8SetPinVal+0x2e>
     db8:	01 c1       	rjmp	.+514    	; 0xfbc <DIO_u8SetPinVal+0x230>
     dba:	8c 81       	ldd	r24, Y+4	; 0x04
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <DIO_u8SetPinVal+0x36>
     dc0:	fd c0       	rjmp	.+506    	; 0xfbc <DIO_u8SetPinVal+0x230>
		(PinNo >= DIO_PIN0)   && (PinNo <=DIO_PIN7)    &&
		(PinVal >= DIO_LOW) && (PinVal <= DIO_HIGH) )
	{
		switch(PortNo)
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	3e 87       	std	Y+14, r19	; 0x0e
     dca:	2d 87       	std	Y+13, r18	; 0x0d
     dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dce:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	91 05       	cpc	r25, r1
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <DIO_u8SetPinVal+0x4c>
     dd6:	4e c0       	rjmp	.+156    	; 0xe74 <DIO_u8SetPinVal+0xe8>
     dd8:	2d 85       	ldd	r18, Y+13	; 0x0d
     dda:	3e 85       	ldd	r19, Y+14	; 0x0e
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	2c f4       	brge	.+10     	; 0xdec <DIO_u8SetPinVal+0x60>
     de2:	8d 85       	ldd	r24, Y+13	; 0x0d
     de4:	9e 85       	ldd	r25, Y+14	; 0x0e
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	71 f0       	breq	.+28     	; 0xe06 <DIO_u8SetPinVal+0x7a>
     dea:	e9 c0       	rjmp	.+466    	; 0xfbe <DIO_u8SetPinVal+0x232>
     dec:	2d 85       	ldd	r18, Y+13	; 0x0d
     dee:	3e 85       	ldd	r19, Y+14	; 0x0e
     df0:	22 30       	cpi	r18, 0x02	; 2
     df2:	31 05       	cpc	r19, r1
     df4:	09 f4       	brne	.+2      	; 0xdf8 <DIO_u8SetPinVal+0x6c>
     df6:	75 c0       	rjmp	.+234    	; 0xee2 <DIO_u8SetPinVal+0x156>
     df8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <DIO_u8SetPinVal+0x78>
     e02:	a6 c0       	rjmp	.+332    	; 0xf50 <DIO_u8SetPinVal+0x1c4>
     e04:	dc c0       	rjmp	.+440    	; 0xfbe <DIO_u8SetPinVal+0x232>
		{
			case DIO_PORTA:
				switch(PinVal)
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3c 87       	std	Y+12, r19	; 0x0c
     e0e:	2b 87       	std	Y+11, r18	; 0x0b
     e10:	8b 85       	ldd	r24, Y+11	; 0x0b
     e12:	9c 85       	ldd	r25, Y+12	; 0x0c
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	c9 f0       	breq	.+50     	; 0xe4a <DIO_u8SetPinVal+0xbe>
     e18:	2b 85       	ldd	r18, Y+11	; 0x0b
     e1a:	3c 85       	ldd	r19, Y+12	; 0x0c
     e1c:	21 30       	cpi	r18, 0x01	; 1
     e1e:	31 05       	cpc	r19, r1
     e20:	09 f0       	breq	.+2      	; 0xe24 <DIO_u8SetPinVal+0x98>
     e22:	cd c0       	rjmp	.+410    	; 0xfbe <DIO_u8SetPinVal+0x232>
				{
					case DIO_HIGH:
						set_bit(PORTA, PinNo);
     e24:	ab e3       	ldi	r26, 0x3B	; 59
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	eb e3       	ldi	r30, 0x3B	; 59
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	40 81       	ld	r20, Z
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_u8SetPinVal+0xb4>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_u8SetPinVal+0xb0>
     e44:	84 2b       	or	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	ba c0       	rjmp	.+372    	; 0xfbe <DIO_u8SetPinVal+0x232>
					break;

					case DIO_LOW:
						clr_bit(PORTA, PinNo);
     e4a:	ab e3       	ldi	r26, 0x3B	; 59
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	eb e3       	ldi	r30, 0x3B	; 59
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_u8SetPinVal+0xdc>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_u8SetPinVal+0xd8>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	a5 c0       	rjmp	.+330    	; 0xfbe <DIO_u8SetPinVal+0x232>
					break;
				}
			break;

			case DIO_PORTB:
				switch(PinVal)
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	3a 87       	std	Y+10, r19	; 0x0a
     e7c:	29 87       	std	Y+9, r18	; 0x09
     e7e:	89 85       	ldd	r24, Y+9	; 0x09
     e80:	9a 85       	ldd	r25, Y+10	; 0x0a
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	c9 f0       	breq	.+50     	; 0xeb8 <DIO_u8SetPinVal+0x12c>
     e86:	29 85       	ldd	r18, Y+9	; 0x09
     e88:	3a 85       	ldd	r19, Y+10	; 0x0a
     e8a:	21 30       	cpi	r18, 0x01	; 1
     e8c:	31 05       	cpc	r19, r1
     e8e:	09 f0       	breq	.+2      	; 0xe92 <DIO_u8SetPinVal+0x106>
     e90:	96 c0       	rjmp	.+300    	; 0xfbe <DIO_u8SetPinVal+0x232>
				{
					case DIO_HIGH:
						set_bit(PORTB, PinNo);
     e92:	a8 e3       	ldi	r26, 0x38	; 56
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e8 e3       	ldi	r30, 0x38	; 56
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	40 81       	ld	r20, Z
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_u8SetPinVal+0x122>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_u8SetPinVal+0x11e>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	83 c0       	rjmp	.+262    	; 0xfbe <DIO_u8SetPinVal+0x232>
					break;

					case DIO_LOW:
						clr_bit(PORTB, PinNo);
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_u8SetPinVal+0x14a>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_u8SetPinVal+0x146>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	6e c0       	rjmp	.+220    	; 0xfbe <DIO_u8SetPinVal+0x232>
					break;
				}
			break;

			case DIO_PORTC:
				switch(PinVal)
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	38 87       	std	Y+8, r19	; 0x08
     eea:	2f 83       	std	Y+7, r18	; 0x07
     eec:	8f 81       	ldd	r24, Y+7	; 0x07
     eee:	98 85       	ldd	r25, Y+8	; 0x08
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	c9 f0       	breq	.+50     	; 0xf26 <DIO_u8SetPinVal+0x19a>
     ef4:	2f 81       	ldd	r18, Y+7	; 0x07
     ef6:	38 85       	ldd	r19, Y+8	; 0x08
     ef8:	21 30       	cpi	r18, 0x01	; 1
     efa:	31 05       	cpc	r19, r1
     efc:	09 f0       	breq	.+2      	; 0xf00 <DIO_u8SetPinVal+0x174>
     efe:	5f c0       	rjmp	.+190    	; 0xfbe <DIO_u8SetPinVal+0x232>
				{
					case DIO_HIGH:
						set_bit(PORTC, PinNo);
     f00:	a5 e3       	ldi	r26, 0x35	; 53
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e3       	ldi	r30, 0x35	; 53
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	40 81       	ld	r20, Z
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_u8SetPinVal+0x190>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_u8SetPinVal+0x18c>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	4c c0       	rjmp	.+152    	; 0xfbe <DIO_u8SetPinVal+0x232>
					break;

					case DIO_LOW:
						clr_bit(PORTC, PinNo);
     f26:	a5 e3       	ldi	r26, 0x35	; 53
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e5 e3       	ldi	r30, 0x35	; 53
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_u8SetPinVal+0x1b8>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_u8SetPinVal+0x1b4>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	37 c0       	rjmp	.+110    	; 0xfbe <DIO_u8SetPinVal+0x232>
					break;
				}
			break;

			case DIO_PORTD:
				switch(PinVal)
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3e 83       	std	Y+6, r19	; 0x06
     f58:	2d 83       	std	Y+5, r18	; 0x05
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	c1 f0       	breq	.+48     	; 0xf92 <DIO_u8SetPinVal+0x206>
     f62:	2d 81       	ldd	r18, Y+5	; 0x05
     f64:	3e 81       	ldd	r19, Y+6	; 0x06
     f66:	21 30       	cpi	r18, 0x01	; 1
     f68:	31 05       	cpc	r19, r1
     f6a:	49 f5       	brne	.+82     	; 0xfbe <DIO_u8SetPinVal+0x232>
				{
					case DIO_HIGH:
						set_bit(PORTD, PinNo);
     f6c:	a2 e3       	ldi	r26, 0x32	; 50
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e2 e3       	ldi	r30, 0x32	; 50
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	40 81       	ld	r20, Z
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_u8SetPinVal+0x1fc>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_u8SetPinVal+0x1f8>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	16 c0       	rjmp	.+44     	; 0xfbe <DIO_u8SetPinVal+0x232>
					break;

					case DIO_LOW:
						clr_bit(PORTD, PinNo);
     f92:	a2 e3       	ldi	r26, 0x32	; 50
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e2 e3       	ldi	r30, 0x32	; 50
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_u8SetPinVal+0x224>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_u8SetPinVal+0x220>
     fb4:	80 95       	com	r24
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <DIO_u8SetPinVal+0x232>
			break;
		}
	}
	else
	{
		FuncReturnState = STD_NOK;
     fbc:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     fc0:	2e 96       	adiw	r28, 0x0e	; 14
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <DIO_u8GetPinVal>:
													/*u8 PinA3Val; */
u8 DIO_u8GetPinVal(u8 PortNo, u8 PinNo, u8* PinVal)//DIO_u8GetPinVal(DIO_PORTA,DIO_PIN3,&PinA3Val)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	27 97       	sbiw	r28, 0x07	; 7
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	8a 83       	std	Y+2, r24	; 0x02
     fe8:	6b 83       	std	Y+3, r22	; 0x03
     fea:	5d 83       	std	Y+5, r21	; 0x05
     fec:	4c 83       	std	Y+4, r20	; 0x04
	u8 FuncReturnState = STD_OK;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	89 83       	std	Y+1, r24	; 0x01

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	84 30       	cpi	r24, 0x04	; 4
     ff6:	08 f0       	brcs	.+2      	; 0xffa <DIO_u8GetPinVal+0x28>
     ff8:	7a c0       	rjmp	.+244    	; 0x10ee <DIO_u8GetPinVal+0x11c>
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	88 30       	cpi	r24, 0x08	; 8
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <DIO_u8GetPinVal+0x30>
    1000:	76 c0       	rjmp	.+236    	; 0x10ee <DIO_u8GetPinVal+0x11c>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	09 f4       	brne	.+2      	; 0x100c <DIO_u8GetPinVal+0x3a>
    100a:	71 c0       	rjmp	.+226    	; 0x10ee <DIO_u8GetPinVal+0x11c>
		(PinNo >= DIO_PIN0)   && (PinNo <=DIO_PIN7)    &&
		(PinVal != STD_NULL) )
	{
		switch(PortNo)
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	3f 83       	std	Y+7, r19	; 0x07
    1014:	2e 83       	std	Y+6, r18	; 0x06
    1016:	4e 81       	ldd	r20, Y+6	; 0x06
    1018:	5f 81       	ldd	r21, Y+7	; 0x07
    101a:	41 30       	cpi	r20, 0x01	; 1
    101c:	51 05       	cpc	r21, r1
    101e:	59 f1       	breq	.+86     	; 0x1076 <DIO_u8GetPinVal+0xa4>
    1020:	8e 81       	ldd	r24, Y+6	; 0x06
    1022:	9f 81       	ldd	r25, Y+7	; 0x07
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	91 05       	cpc	r25, r1
    1028:	34 f4       	brge	.+12     	; 0x1036 <DIO_u8GetPinVal+0x64>
    102a:	2e 81       	ldd	r18, Y+6	; 0x06
    102c:	3f 81       	ldd	r19, Y+7	; 0x07
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	69 f0       	breq	.+26     	; 0x104e <DIO_u8GetPinVal+0x7c>
    1034:	5d c0       	rjmp	.+186    	; 0x10f0 <DIO_u8GetPinVal+0x11e>
    1036:	4e 81       	ldd	r20, Y+6	; 0x06
    1038:	5f 81       	ldd	r21, Y+7	; 0x07
    103a:	42 30       	cpi	r20, 0x02	; 2
    103c:	51 05       	cpc	r21, r1
    103e:	79 f1       	breq	.+94     	; 0x109e <DIO_u8GetPinVal+0xcc>
    1040:	8e 81       	ldd	r24, Y+6	; 0x06
    1042:	9f 81       	ldd	r25, Y+7	; 0x07
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <DIO_u8GetPinVal+0x7a>
    104a:	3d c0       	rjmp	.+122    	; 0x10c6 <DIO_u8GetPinVal+0xf4>
    104c:	51 c0       	rjmp	.+162    	; 0x10f0 <DIO_u8GetPinVal+0x11e>
		{
			case DIO_PORTA:
				*PinVal = get_bit(PINA, PinNo);
    104e:	e9 e3       	ldi	r30, 0x39	; 57
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a9 01       	movw	r20, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_u8GetPinVal+0x94>
    1062:	55 95       	asr	r21
    1064:	47 95       	ror	r20
    1066:	8a 95       	dec	r24
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_u8GetPinVal+0x90>
    106a:	ca 01       	movw	r24, r20
    106c:	81 70       	andi	r24, 0x01	; 1
    106e:	ec 81       	ldd	r30, Y+4	; 0x04
    1070:	fd 81       	ldd	r31, Y+5	; 0x05
    1072:	80 83       	st	Z, r24
    1074:	3d c0       	rjmp	.+122    	; 0x10f0 <DIO_u8GetPinVal+0x11e>
			break;

			case DIO_PORTB:
				*PinVal = get_bit(PINB, PinNo);
    1076:	e6 e3       	ldi	r30, 0x36	; 54
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_u8GetPinVal+0xbc>
    108a:	55 95       	asr	r21
    108c:	47 95       	ror	r20
    108e:	8a 95       	dec	r24
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_u8GetPinVal+0xb8>
    1092:	ca 01       	movw	r24, r20
    1094:	81 70       	andi	r24, 0x01	; 1
    1096:	ec 81       	ldd	r30, Y+4	; 0x04
    1098:	fd 81       	ldd	r31, Y+5	; 0x05
    109a:	80 83       	st	Z, r24
    109c:	29 c0       	rjmp	.+82     	; 0x10f0 <DIO_u8GetPinVal+0x11e>
				break;


			case DIO_PORTC:
				*PinVal = get_bit(PINC, PinNo);
    109e:	e3 e3       	ldi	r30, 0x33	; 51
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_u8GetPinVal+0xe4>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_u8GetPinVal+0xe0>
    10ba:	ca 01       	movw	r24, r20
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	ec 81       	ldd	r30, Y+4	; 0x04
    10c0:	fd 81       	ldd	r31, Y+5	; 0x05
    10c2:	80 83       	st	Z, r24
    10c4:	15 c0       	rjmp	.+42     	; 0x10f0 <DIO_u8GetPinVal+0x11e>
				break;


			case DIO_PORTD:
				*PinVal = get_bit(PIND, PinNo);
    10c6:	e0 e3       	ldi	r30, 0x30	; 48
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a9 01       	movw	r20, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_u8GetPinVal+0x10c>
    10da:	55 95       	asr	r21
    10dc:	47 95       	ror	r20
    10de:	8a 95       	dec	r24
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_u8GetPinVal+0x108>
    10e2:	ca 01       	movw	r24, r20
    10e4:	81 70       	andi	r24, 0x01	; 1
    10e6:	ec 81       	ldd	r30, Y+4	; 0x04
    10e8:	fd 81       	ldd	r31, Y+5	; 0x05
    10ea:	80 83       	st	Z, r24
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <DIO_u8GetPinVal+0x11e>
			break;
		}
	}
	else
	{
		FuncReturnState = STD_NOK;
    10ee:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f2:	27 96       	adiw	r28, 0x07	; 7
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <DIO_u8SetPortDir>:

u8 DIO_u8SetPortDir(u8 PortNo, u8 PortDir)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <DIO_u8SetPortDir+0x6>
    110a:	00 d0       	rcall	.+0      	; 0x110c <DIO_u8SetPortDir+0x8>
    110c:	0f 92       	push	r0
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	8a 83       	std	Y+2, r24	; 0x02
    1114:	6b 83       	std	Y+3, r22	; 0x03
	u8 FuncReturnState = STD_OK;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	98 f5       	brcc	.+102    	; 0x1186 <DIO_u8SetPortDir+0x82>
		(PortDir>=0b00000000) && (PortDir<=0b11111111)	 )
	{

		switch (PortNo)
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3d 83       	std	Y+5, r19	; 0x05
    1128:	2c 83       	std	Y+4, r18	; 0x04
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	d1 f0       	breq	.+52     	; 0x1168 <DIO_u8SetPortDir+0x64>
    1134:	2c 81       	ldd	r18, Y+4	; 0x04
    1136:	3d 81       	ldd	r19, Y+5	; 0x05
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	2c f4       	brge	.+10     	; 0x1148 <DIO_u8SetPortDir+0x44>
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 f0       	breq	.+24     	; 0x115e <DIO_u8SetPortDir+0x5a>
    1146:	20 c0       	rjmp	.+64     	; 0x1188 <DIO_u8SetPortDir+0x84>
    1148:	2c 81       	ldd	r18, Y+4	; 0x04
    114a:	3d 81       	ldd	r19, Y+5	; 0x05
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	81 f0       	breq	.+32     	; 0x1172 <DIO_u8SetPortDir+0x6e>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	81 f0       	breq	.+32     	; 0x117c <DIO_u8SetPortDir+0x78>
    115c:	15 c0       	rjmp	.+42     	; 0x1188 <DIO_u8SetPortDir+0x84>
		{
			case DIO_PORTA:
				DDRA=PortDir; // el mfrod yb2a DDRA=PortDir portdir deh 7tb2a address like 0b00010011 mslan
    115e:	ea e3       	ldi	r30, 0x3A	; 58
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	80 83       	st	Z, r24
    1166:	10 c0       	rjmp	.+32     	; 0x1188 <DIO_u8SetPortDir+0x84>
				break;

			case DIO_PORTB:
				DDRB=PortDir;
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	80 83       	st	Z, r24
    1170:	0b c0       	rjmp	.+22     	; 0x1188 <DIO_u8SetPortDir+0x84>
				break;

			case DIO_PORTC:
				DDRC=PortDir;
    1172:	e4 e3       	ldi	r30, 0x34	; 52
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	80 83       	st	Z, r24
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <DIO_u8SetPortDir+0x84>
				break;

			case DIO_PORTD:
				DDRD=PortDir;
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	80 83       	st	Z, r24
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <DIO_u8SetPortDir+0x84>
				break;
		}
	}
	else
	{
		FuncReturnState = STD_NOK;
    1186:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
}
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <DIO_u8SetPortVal>:

u8 DIO_u8SetPortVal(u8 PortNo, u8 PortVal)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <DIO_u8SetPortVal+0x6>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <DIO_u8SetPortVal+0x8>
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	8a 83       	std	Y+2, r24	; 0x02
    11aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 FuncReturnState = STD_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	98 f5       	brcc	.+102    	; 0x121c <DIO_u8SetPortVal+0x82>
		(PortVal>=0b00000000)  && (PortVal<=0b11111111)	 )
	{

		switch (PortNo)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3d 83       	std	Y+5, r19	; 0x05
    11be:	2c 83       	std	Y+4, r18	; 0x04
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	d1 f0       	breq	.+52     	; 0x11fe <DIO_u8SetPortVal+0x64>
    11ca:	2c 81       	ldd	r18, Y+4	; 0x04
    11cc:	3d 81       	ldd	r19, Y+5	; 0x05
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	2c f4       	brge	.+10     	; 0x11de <DIO_u8SetPortVal+0x44>
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	9d 81       	ldd	r25, Y+5	; 0x05
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	61 f0       	breq	.+24     	; 0x11f4 <DIO_u8SetPortVal+0x5a>
    11dc:	20 c0       	rjmp	.+64     	; 0x121e <DIO_u8SetPortVal+0x84>
    11de:	2c 81       	ldd	r18, Y+4	; 0x04
    11e0:	3d 81       	ldd	r19, Y+5	; 0x05
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	81 f0       	breq	.+32     	; 0x1208 <DIO_u8SetPortVal+0x6e>
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	91 05       	cpc	r25, r1
    11f0:	81 f0       	breq	.+32     	; 0x1212 <DIO_u8SetPortVal+0x78>
    11f2:	15 c0       	rjmp	.+42     	; 0x121e <DIO_u8SetPortVal+0x84>
		{
			case DIO_PORTA:
				 PORTA=PortVal;
    11f4:	eb e3       	ldi	r30, 0x3B	; 59
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	80 83       	st	Z, r24
    11fc:	10 c0       	rjmp	.+32     	; 0x121e <DIO_u8SetPortVal+0x84>
				 break;

			case DIO_PORTB:
				 PORTB=PortVal;
    11fe:	e8 e3       	ldi	r30, 0x38	; 56
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	80 83       	st	Z, r24
    1206:	0b c0       	rjmp	.+22     	; 0x121e <DIO_u8SetPortVal+0x84>
				 break;

			case DIO_PORTC:
				 PORTC=PortVal;
    1208:	e5 e3       	ldi	r30, 0x35	; 53
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	80 83       	st	Z, r24
    1210:	06 c0       	rjmp	.+12     	; 0x121e <DIO_u8SetPortVal+0x84>
				 break;

			case DIO_PORTD:
				 PORTD=PortVal;
    1212:	e2 e3       	ldi	r30, 0x32	; 50
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	80 83       	st	Z, r24
    121a:	01 c0       	rjmp	.+2      	; 0x121e <DIO_u8SetPortVal+0x84>
				 break;
		}
	}
	else
	{
		FuncReturnState = STD_NOK;
    121c:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
    121e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <DIO_u8GetPortVal>:


u8 DIO_u8GetPortVal(u8 PortNo, u8* PortVal)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	27 97       	sbiw	r28, 0x07	; 7
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	8b 83       	std	Y+3, r24	; 0x03
    1246:	7d 83       	std	Y+5, r23	; 0x05
    1248:	6c 83       	std	Y+4, r22	; 0x04
	u8 FuncReturnState = STD_OK;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	8a 83       	std	Y+2, r24	; 0x02

	if( (PortNo >= DIO_PORTA) && (PortNo <= DIO_PORTD) &&
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	08 f0       	brcs	.+2      	; 0x1256 <DIO_u8GetPortVal+0x26>
    1254:	3f c0       	rjmp	.+126    	; 0x12d4 <DIO_u8GetPortVal+0xa4>
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	9d 81       	ldd	r25, Y+5	; 0x05
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	d9 f1       	breq	.+118    	; 0x12d4 <DIO_u8GetPortVal+0xa4>
		(PortVal != STD_NULL))
	{
		switch (PortNo)
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3f 83       	std	Y+7, r19	; 0x07
    1266:	2e 83       	std	Y+6, r18	; 0x06
    1268:	8e 81       	ldd	r24, Y+6	; 0x06
    126a:	9f 81       	ldd	r25, Y+7	; 0x07
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	e1 f0       	breq	.+56     	; 0x12aa <DIO_u8GetPortVal+0x7a>
    1272:	2e 81       	ldd	r18, Y+6	; 0x06
    1274:	3f 81       	ldd	r19, Y+7	; 0x07
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	2c f4       	brge	.+10     	; 0x1286 <DIO_u8GetPortVal+0x56>
    127c:	8e 81       	ldd	r24, Y+6	; 0x06
    127e:	9f 81       	ldd	r25, Y+7	; 0x07
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	61 f0       	breq	.+24     	; 0x129c <DIO_u8GetPortVal+0x6c>
    1284:	28 c0       	rjmp	.+80     	; 0x12d6 <DIO_u8GetPortVal+0xa6>
    1286:	2e 81       	ldd	r18, Y+6	; 0x06
    1288:	3f 81       	ldd	r19, Y+7	; 0x07
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	a1 f0       	breq	.+40     	; 0x12b8 <DIO_u8GetPortVal+0x88>
    1290:	8e 81       	ldd	r24, Y+6	; 0x06
    1292:	9f 81       	ldd	r25, Y+7	; 0x07
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	91 05       	cpc	r25, r1
    1298:	b1 f0       	breq	.+44     	; 0x12c6 <DIO_u8GetPortVal+0x96>
    129a:	1d c0       	rjmp	.+58     	; 0x12d6 <DIO_u8GetPortVal+0xa6>
		{
			case DIO_PORTA:
				*PortVal = PINA;
    129c:	e9 e3       	ldi	r30, 0x39	; 57
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	ec 81       	ldd	r30, Y+4	; 0x04
    12a4:	fd 81       	ldd	r31, Y+5	; 0x05
    12a6:	80 83       	st	Z, r24
    12a8:	16 c0       	rjmp	.+44     	; 0x12d6 <DIO_u8GetPortVal+0xa6>
				break;
			case DIO_PORTB:
				*PortVal = PINB;
    12aa:	e6 e3       	ldi	r30, 0x36	; 54
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	ec 81       	ldd	r30, Y+4	; 0x04
    12b2:	fd 81       	ldd	r31, Y+5	; 0x05
    12b4:	80 83       	st	Z, r24
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <DIO_u8GetPortVal+0xa6>
				break;
			case DIO_PORTC:
				*PortVal = PINC;
    12b8:	e3 e3       	ldi	r30, 0x33	; 51
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	ec 81       	ldd	r30, Y+4	; 0x04
    12c0:	fd 81       	ldd	r31, Y+5	; 0x05
    12c2:	80 83       	st	Z, r24
    12c4:	08 c0       	rjmp	.+16     	; 0x12d6 <DIO_u8GetPortVal+0xa6>
				break;
			case DIO_PORTD:
				*PortVal = PIND;
    12c6:	e0 e3       	ldi	r30, 0x30	; 48
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	ec 81       	ldd	r30, Y+4	; 0x04
    12ce:	fd 81       	ldd	r31, Y+5	; 0x05
    12d0:	80 83       	st	Z, r24
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <DIO_u8GetPortVal+0xa6>
				break;
		}
	}
	else
	{
		u8 FuncReturnState = STD_NOK;
    12d4:	19 82       	std	Y+1, r1	; 0x01
	}

	return FuncReturnState;
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12d8:	27 96       	adiw	r28, 0x07	; 7
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <KeyPad_Init>:
#include"KeyPad_int.h"
#include"ATMega32_Reg.h"
#include"DIO_int.h"

void KeyPad_Init(void)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDir(KEYPAD_PORT,0b11110000);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	60 ef       	ldi	r22, 0xF0	; 240
    12f6:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_u8SetPortDir>
	DIO_u8SetPortVal(KEYPAD_PORT,0b11111111);
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	6f ef       	ldi	r22, 0xFF	; 255
    12fe:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_u8SetPortVal>
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <KeyPad_ReadSw>:

u8 KeyPad_ReadSw(void)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <KeyPad_ReadSw+0x6>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <KeyPad_ReadSw+0x8>
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	u8 Col,Row,x,SwNo=0;
    1314:	19 82       	std	Y+1, r1	; 0x01

	for(Col=0;Col<=3;Col++)
    1316:	1b 82       	std	Y+3, r1	; 0x03
    1318:	32 c0       	rjmp	.+100    	; 0x137e <KeyPad_ReadSw+0x76>
	{
		DIO_u8SetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	98 2f       	mov	r25, r24
    131e:	9c 5f       	subi	r25, 0xFC	; 252
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	69 2f       	mov	r22, r25
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_u8SetPinVal>
		for(Row=0;Row<=3;Row++)//for calculator make it Row<=2
    132a:	1a 82       	std	Y+2, r1	; 0x02
    132c:	1a c0       	rjmp	.+52     	; 0x1362 <KeyPad_ReadSw+0x5a>
		{
			DIO_u8GetPinVal(KEYPAD_PORT,Row,&x);
    132e:	9e 01       	movw	r18, r28
    1330:	2c 5f       	subi	r18, 0xFC	; 252
    1332:	3f 4f       	sbci	r19, 0xFF	; 255
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	6a 81       	ldd	r22, Y+2	; 0x02
    1338:	a9 01       	movw	r20, r18
    133a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_u8GetPinVal>
			if (x==0)
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	88 23       	and	r24, r24
    1342:	61 f4       	brne	.+24     	; 0x135c <KeyPad_ReadSw+0x54>
			{
				SwNo=Row*4+1+Col;
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	98 2f       	mov	r25, r24
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	89 0f       	add	r24, r25
    1358:	8f 5f       	subi	r24, 0xFF	; 255
    135a:	89 83       	std	Y+1, r24	; 0x01
	u8 Col,Row,x,SwNo=0;

	for(Col=0;Col<=3;Col++)
	{
		DIO_u8SetPinVal(KEYPAD_PORT,Col+4,DIO_LOW);
		for(Row=0;Row<=3;Row++)//for calculator make it Row<=2
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	84 30       	cpi	r24, 0x04	; 4
    1366:	18 f3       	brcs	.-58     	; 0x132e <KeyPad_ReadSw+0x26>
					DIO_u8GetPinVal(KEYPAD_PORT,Row,&x);
				}
				*/
			}
		}
		DIO_u8SetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	98 2f       	mov	r25, r24
    136c:	9c 5f       	subi	r25, 0xFC	; 252
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	69 2f       	mov	r22, r25
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_u8SetPinVal>

u8 KeyPad_ReadSw(void)
{
	u8 Col,Row,x,SwNo=0;

	for(Col=0;Col<=3;Col++)
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	8f 5f       	subi	r24, 0xFF	; 255
    137c:	8b 83       	std	Y+3, r24	; 0x03
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	84 30       	cpi	r24, 0x04	; 4
    1382:	58 f2       	brcs	.-106    	; 0x131a <KeyPad_ReadSw+0x12>
				*/
			}
		}
		DIO_u8SetPinVal(KEYPAD_PORT,Col+4,DIO_HIGH);
	}
	return SwNo;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <LCD_init>:
#include"DIO_int.h"
#include"ATMega32_Reg.h"
#include"LCD_int.h"

void LCD_init(void)// initialization
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	e8 97       	sbiw	r28, 0x38	; 56
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDir(LCD_PORT,0b11111111);//LCD output
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	6f ef       	ldi	r22, 0xFF	; 255
    13ac:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_u8SetPortDir>
	DIO_u8SetPortDir(LCD_CTRL_PORT,LCD_CTRL_PIN);//RS-R/W-EN (Control)
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	67 e0       	ldi	r22, 0x07	; 7
    13b4:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_u8SetPortDir>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a0 ef       	ldi	r26, 0xF0	; 240
    13be:	b1 e4       	ldi	r27, 0x41	; 65
    13c0:	8d ab       	std	Y+53, r24	; 0x35
    13c2:	9e ab       	std	Y+54, r25	; 0x36
    13c4:	af ab       	std	Y+55, r26	; 0x37
    13c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	6d a9       	ldd	r22, Y+53	; 0x35
    13ca:	7e a9       	ldd	r23, Y+54	; 0x36
    13cc:	8f a9       	ldd	r24, Y+55	; 0x37
    13ce:	98 ad       	ldd	r25, Y+56	; 0x38
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a ef       	ldi	r20, 0xFA	; 250
    13d6:	54 e4       	ldi	r21, 0x44	; 68
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	89 ab       	std	Y+49, r24	; 0x31
    13e2:	9a ab       	std	Y+50, r25	; 0x32
    13e4:	ab ab       	std	Y+51, r26	; 0x33
    13e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13e8:	69 a9       	ldd	r22, Y+49	; 0x31
    13ea:	7a a9       	ldd	r23, Y+50	; 0x32
    13ec:	8b a9       	ldd	r24, Y+51	; 0x33
    13ee:	9c a9       	ldd	r25, Y+52	; 0x34
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <LCD_init+0x76>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	98 ab       	std	Y+48, r25	; 0x30
    1406:	8f a7       	std	Y+47, r24	; 0x2f
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <LCD_init+0xf4>
	else if (__tmp > 65535)
    140a:	69 a9       	ldd	r22, Y+49	; 0x31
    140c:	7a a9       	ldd	r23, Y+50	; 0x32
    140e:	8b a9       	ldd	r24, Y+51	; 0x33
    1410:	9c a9       	ldd	r25, Y+52	; 0x34
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <LCD_init+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	6d a9       	ldd	r22, Y+53	; 0x35
    1424:	7e a9       	ldd	r23, Y+54	; 0x36
    1426:	8f a9       	ldd	r24, Y+55	; 0x37
    1428:	98 ad       	ldd	r25, Y+56	; 0x38
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	98 ab       	std	Y+48, r25	; 0x30
    1448:	8f a7       	std	Y+47, r24	; 0x2f
    144a:	0f c0       	rjmp	.+30     	; 0x146a <LCD_init+0xd6>
    144c:	88 ec       	ldi	r24, 0xC8	; 200
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9e a7       	std	Y+46, r25	; 0x2e
    1452:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1454:	8d a5       	ldd	r24, Y+45	; 0x2d
    1456:	9e a5       	ldd	r25, Y+46	; 0x2e
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <LCD_init+0xc4>
    145c:	9e a7       	std	Y+46, r25	; 0x2e
    145e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	8f a5       	ldd	r24, Y+47	; 0x2f
    1462:	98 a9       	ldd	r25, Y+48	; 0x30
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	98 ab       	std	Y+48, r25	; 0x30
    1468:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	8f a5       	ldd	r24, Y+47	; 0x2f
    146c:	98 a9       	ldd	r25, Y+48	; 0x30
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <LCD_init+0xb8>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <LCD_init+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	69 a9       	ldd	r22, Y+49	; 0x31
    1476:	7a a9       	ldd	r23, Y+50	; 0x32
    1478:	8b a9       	ldd	r24, Y+51	; 0x33
    147a:	9c a9       	ldd	r25, Y+52	; 0x34
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	98 ab       	std	Y+48, r25	; 0x30
    1486:	8f a7       	std	Y+47, r24	; 0x2f
    1488:	8f a5       	ldd	r24, Y+47	; 0x2f
    148a:	98 a9       	ldd	r25, Y+48	; 0x30
    148c:	9c a7       	std	Y+44, r25	; 0x2c
    148e:	8b a7       	std	Y+43, r24	; 0x2b
    1490:	8b a5       	ldd	r24, Y+43	; 0x2b
    1492:	9c a5       	ldd	r25, Y+44	; 0x2c
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <LCD_init+0x100>
    1498:	9c a7       	std	Y+44, r25	; 0x2c
    149a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
 	Write_cmd(0b00111100);
    149c:	8c e3       	ldi	r24, 0x3C	; 60
    149e:	0e 94 b6 0b 	call	0x176c	; 0x176c <Write_cmd>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a0 e8       	ldi	r26, 0x80	; 128
    14a8:	bf e3       	ldi	r27, 0x3F	; 63
    14aa:	8f a3       	std	Y+39, r24	; 0x27
    14ac:	98 a7       	std	Y+40, r25	; 0x28
    14ae:	a9 a7       	std	Y+41, r26	; 0x29
    14b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	6f a1       	ldd	r22, Y+39	; 0x27
    14b4:	78 a5       	ldd	r23, Y+40	; 0x28
    14b6:	89 a5       	ldd	r24, Y+41	; 0x29
    14b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a ef       	ldi	r20, 0xFA	; 250
    14c0:	54 e4       	ldi	r21, 0x44	; 68
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	8b a3       	std	Y+35, r24	; 0x23
    14cc:	9c a3       	std	Y+36, r25	; 0x24
    14ce:	ad a3       	std	Y+37, r26	; 0x25
    14d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14d2:	6b a1       	ldd	r22, Y+35	; 0x23
    14d4:	7c a1       	ldd	r23, Y+36	; 0x24
    14d6:	8d a1       	ldd	r24, Y+37	; 0x25
    14d8:	9e a1       	ldd	r25, Y+38	; 0x26
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <LCD_init+0x160>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9a a3       	std	Y+34, r25	; 0x22
    14f0:	89 a3       	std	Y+33, r24	; 0x21
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <LCD_init+0x1de>
	else if (__tmp > 65535)
    14f4:	6b a1       	ldd	r22, Y+35	; 0x23
    14f6:	7c a1       	ldd	r23, Y+36	; 0x24
    14f8:	8d a1       	ldd	r24, Y+37	; 0x25
    14fa:	9e a1       	ldd	r25, Y+38	; 0x26
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <LCD_init+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	6f a1       	ldd	r22, Y+39	; 0x27
    150e:	78 a5       	ldd	r23, Y+40	; 0x28
    1510:	89 a5       	ldd	r24, Y+41	; 0x29
    1512:	9a a5       	ldd	r25, Y+42	; 0x2a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9a a3       	std	Y+34, r25	; 0x22
    1532:	89 a3       	std	Y+33, r24	; 0x21
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <LCD_init+0x1c0>
    1536:	88 ec       	ldi	r24, 0xC8	; 200
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	98 a3       	std	Y+32, r25	; 0x20
    153c:	8f 8f       	std	Y+31, r24	; 0x1f
    153e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1540:	98 a1       	ldd	r25, Y+32	; 0x20
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_init+0x1ae>
    1546:	98 a3       	std	Y+32, r25	; 0x20
    1548:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	89 a1       	ldd	r24, Y+33	; 0x21
    154c:	9a a1       	ldd	r25, Y+34	; 0x22
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9a a3       	std	Y+34, r25	; 0x22
    1552:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	89 a1       	ldd	r24, Y+33	; 0x21
    1556:	9a a1       	ldd	r25, Y+34	; 0x22
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <LCD_init+0x1a2>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <LCD_init+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	6b a1       	ldd	r22, Y+35	; 0x23
    1560:	7c a1       	ldd	r23, Y+36	; 0x24
    1562:	8d a1       	ldd	r24, Y+37	; 0x25
    1564:	9e a1       	ldd	r25, Y+38	; 0x26
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9a a3       	std	Y+34, r25	; 0x22
    1570:	89 a3       	std	Y+33, r24	; 0x21
    1572:	89 a1       	ldd	r24, Y+33	; 0x21
    1574:	9a a1       	ldd	r25, Y+34	; 0x22
    1576:	9e 8f       	std	Y+30, r25	; 0x1e
    1578:	8d 8f       	std	Y+29, r24	; 0x1d
    157a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    157c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <LCD_init+0x1ea>
    1582:	9e 8f       	std	Y+30, r25	; 0x1e
    1584:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Write_cmd(0b0001111);
    1586:	8f e0       	ldi	r24, 0x0F	; 15
    1588:	0e 94 b6 0b 	call	0x176c	; 0x176c <Write_cmd>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a0 e8       	ldi	r26, 0x80	; 128
    1592:	bf e3       	ldi	r27, 0x3F	; 63
    1594:	89 8f       	std	Y+25, r24	; 0x19
    1596:	9a 8f       	std	Y+26, r25	; 0x1a
    1598:	ab 8f       	std	Y+27, r26	; 0x1b
    159a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159c:	69 8d       	ldd	r22, Y+25	; 0x19
    159e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a ef       	ldi	r20, 0xFA	; 250
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	8d 8b       	std	Y+21, r24	; 0x15
    15b6:	9e 8b       	std	Y+22, r25	; 0x16
    15b8:	af 8b       	std	Y+23, r26	; 0x17
    15ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15bc:	6d 89       	ldd	r22, Y+21	; 0x15
    15be:	7e 89       	ldd	r23, Y+22	; 0x16
    15c0:	8f 89       	ldd	r24, Y+23	; 0x17
    15c2:	98 8d       	ldd	r25, Y+24	; 0x18
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f e3       	ldi	r21, 0x3F	; 63
    15cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d0:	88 23       	and	r24, r24
    15d2:	2c f4       	brge	.+10     	; 0x15de <LCD_init+0x24a>
		__ticks = 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9c 8b       	std	Y+20, r25	; 0x14
    15da:	8b 8b       	std	Y+19, r24	; 0x13
    15dc:	3f c0       	rjmp	.+126    	; 0x165c <LCD_init+0x2c8>
	else if (__tmp > 65535)
    15de:	6d 89       	ldd	r22, Y+21	; 0x15
    15e0:	7e 89       	ldd	r23, Y+22	; 0x16
    15e2:	8f 89       	ldd	r24, Y+23	; 0x17
    15e4:	98 8d       	ldd	r25, Y+24	; 0x18
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	3f ef       	ldi	r19, 0xFF	; 255
    15ea:	4f e7       	ldi	r20, 0x7F	; 127
    15ec:	57 e4       	ldi	r21, 0x47	; 71
    15ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	4c f5       	brge	.+82     	; 0x1648 <LCD_init+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f6:	69 8d       	ldd	r22, Y+25	; 0x19
    15f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e2       	ldi	r20, 0x20	; 32
    1604:	51 e4       	ldi	r21, 0x41	; 65
    1606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9c 8b       	std	Y+20, r25	; 0x14
    161c:	8b 8b       	std	Y+19, r24	; 0x13
    161e:	0f c0       	rjmp	.+30     	; 0x163e <LCD_init+0x2aa>
    1620:	88 ec       	ldi	r24, 0xC8	; 200
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9a 8b       	std	Y+18, r25	; 0x12
    1626:	89 8b       	std	Y+17, r24	; 0x11
    1628:	89 89       	ldd	r24, Y+17	; 0x11
    162a:	9a 89       	ldd	r25, Y+18	; 0x12
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <LCD_init+0x298>
    1630:	9a 8b       	std	Y+18, r25	; 0x12
    1632:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1634:	8b 89       	ldd	r24, Y+19	; 0x13
    1636:	9c 89       	ldd	r25, Y+20	; 0x14
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	9c 8b       	std	Y+20, r25	; 0x14
    163c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163e:	8b 89       	ldd	r24, Y+19	; 0x13
    1640:	9c 89       	ldd	r25, Y+20	; 0x14
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	69 f7       	brne	.-38     	; 0x1620 <LCD_init+0x28c>
    1646:	14 c0       	rjmp	.+40     	; 0x1670 <LCD_init+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1648:	6d 89       	ldd	r22, Y+21	; 0x15
    164a:	7e 89       	ldd	r23, Y+22	; 0x16
    164c:	8f 89       	ldd	r24, Y+23	; 0x17
    164e:	98 8d       	ldd	r25, Y+24	; 0x18
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9c 8b       	std	Y+20, r25	; 0x14
    165a:	8b 8b       	std	Y+19, r24	; 0x13
    165c:	8b 89       	ldd	r24, Y+19	; 0x13
    165e:	9c 89       	ldd	r25, Y+20	; 0x14
    1660:	98 8b       	std	Y+16, r25	; 0x10
    1662:	8f 87       	std	Y+15, r24	; 0x0f
    1664:	8f 85       	ldd	r24, Y+15	; 0x0f
    1666:	98 89       	ldd	r25, Y+16	; 0x10
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <LCD_init+0x2d4>
    166c:	98 8b       	std	Y+16, r25	; 0x10
    166e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Write_cmd(0b00000001);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	0e 94 b6 0b 	call	0x176c	; 0x176c <Write_cmd>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e0       	ldi	r26, 0x00	; 0
    167c:	b0 e4       	ldi	r27, 0x40	; 64
    167e:	8b 87       	std	Y+11, r24	; 0x0b
    1680:	9c 87       	std	Y+12, r25	; 0x0c
    1682:	ad 87       	std	Y+13, r26	; 0x0d
    1684:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1686:	6b 85       	ldd	r22, Y+11	; 0x0b
    1688:	7c 85       	ldd	r23, Y+12	; 0x0c
    168a:	8d 85       	ldd	r24, Y+13	; 0x0d
    168c:	9e 85       	ldd	r25, Y+14	; 0x0e
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a ef       	ldi	r20, 0xFA	; 250
    1694:	54 e4       	ldi	r21, 0x44	; 68
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8f 83       	std	Y+7, r24	; 0x07
    16a0:	98 87       	std	Y+8, r25	; 0x08
    16a2:	a9 87       	std	Y+9, r26	; 0x09
    16a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a6:	6f 81       	ldd	r22, Y+7	; 0x07
    16a8:	78 85       	ldd	r23, Y+8	; 0x08
    16aa:	89 85       	ldd	r24, Y+9	; 0x09
    16ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <LCD_init+0x334>
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <LCD_init+0x3b2>
	else if (__tmp > 65535)
    16c8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ca:	78 85       	ldd	r23, Y+8	; 0x08
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	4c f5       	brge	.+82     	; 0x1732 <LCD_init+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <LCD_init+0x394>
    170a:	88 ec       	ldi	r24, 0xC8	; 200
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <LCD_init+0x382>
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <LCD_init+0x376>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <LCD_init+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <LCD_init+0x3be>
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    175a:	e8 96       	adiw	r28, 0x38	; 56
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <Write_cmd>:

void Write_cmd(u8 CMD)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	2f 97       	sbiw	r28, 0x0f	; 15
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinVal(LCD_CTRL_PORT,LCD_RS,DIO_LOW);//RS
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_CTRL_PORT,LCD_RW,DIO_LOW);//R-W
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_PORT,CMD);
    1796:	83 e0       	ldi	r24, 0x03	; 3
    1798:	6f 85       	ldd	r22, Y+15	; 0x0f
    179a:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_CTRL_PORT,LCD_Enable,DIO_HIGH);//enable 1
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	62 e0       	ldi	r22, 0x02	; 2
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_u8SetPinVal>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e4       	ldi	r27, 0x40	; 64
    17b0:	8b 87       	std	Y+11, r24	; 0x0b
    17b2:	9c 87       	std	Y+12, r25	; 0x0c
    17b4:	ad 87       	std	Y+13, r26	; 0x0d
    17b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    17bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17be:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a ef       	ldi	r20, 0xFA	; 250
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	8f 83       	std	Y+7, r24	; 0x07
    17d2:	98 87       	std	Y+8, r25	; 0x08
    17d4:	a9 87       	std	Y+9, r26	; 0x09
    17d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d8:	6f 81       	ldd	r22, Y+7	; 0x07
    17da:	78 85       	ldd	r23, Y+8	; 0x08
    17dc:	89 85       	ldd	r24, Y+9	; 0x09
    17de:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	2c f4       	brge	.+10     	; 0x17fa <Write_cmd+0x8e>
		__ticks = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <Write_cmd+0x10c>
	else if (__tmp > 65535)
    17fa:	6f 81       	ldd	r22, Y+7	; 0x07
    17fc:	78 85       	ldd	r23, Y+8	; 0x08
    17fe:	89 85       	ldd	r24, Y+9	; 0x09
    1800:	9a 85       	ldd	r25, Y+10	; 0x0a
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180e:	18 16       	cp	r1, r24
    1810:	4c f5       	brge	.+82     	; 0x1864 <Write_cmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	6b 85       	ldd	r22, Y+11	; 0x0b
    1814:	7c 85       	ldd	r23, Y+12	; 0x0c
    1816:	8d 85       	ldd	r24, Y+13	; 0x0d
    1818:	9e 85       	ldd	r25, Y+14	; 0x0e
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
    183a:	0f c0       	rjmp	.+30     	; 0x185a <Write_cmd+0xee>
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9c 83       	std	Y+4, r25	; 0x04
    1842:	8b 83       	std	Y+3, r24	; 0x03
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <Write_cmd+0xdc>
    184c:	9c 83       	std	Y+4, r25	; 0x04
    184e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	9e 83       	std	Y+6, r25	; 0x06
    1858:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	69 f7       	brne	.-38     	; 0x183c <Write_cmd+0xd0>
    1862:	14 c0       	rjmp	.+40     	; 0x188c <Write_cmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1864:	6f 81       	ldd	r22, Y+7	; 0x07
    1866:	78 85       	ldd	r23, Y+8	; 0x08
    1868:	89 85       	ldd	r24, Y+9	; 0x09
    186a:	9a 85       	ldd	r25, Y+10	; 0x0a
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9e 83       	std	Y+6, r25	; 0x06
    1876:	8d 83       	std	Y+5, r24	; 0x05
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	9a 81       	ldd	r25, Y+2	; 0x02
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <Write_cmd+0x118>
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_CTRL_PORT,LCD_Enable,DIO_LOW);// enable 0
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	62 e0       	ldi	r22, 0x02	; 2
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_u8SetPinVal>
}
    1896:	2f 96       	adiw	r28, 0x0f	; 15
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <Write_data>:

void Write_data(u8 DATA)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	2f 97       	sbiw	r28, 0x0f	; 15
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinVal(LCD_CTRL_PORT,LCD_RS,DIO_HIGH);//data register 1
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_CTRL_PORT,LCD_RW,DIO_LOW);//Write 0
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_PORT,DATA);
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    18d6:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_CTRL_PORT,LCD_Enable,DIO_HIGH);//enable 1
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	62 e0       	ldi	r22, 0x02	; 2
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_u8SetPinVal>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e0       	ldi	r26, 0x00	; 0
    18ea:	b0 e4       	ldi	r27, 0x40	; 64
    18ec:	8b 87       	std	Y+11, r24	; 0x0b
    18ee:	9c 87       	std	Y+12, r25	; 0x0c
    18f0:	ad 87       	std	Y+13, r26	; 0x0d
    18f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	4a ef       	ldi	r20, 0xFA	; 250
    1902:	54 e4       	ldi	r21, 0x44	; 68
    1904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	8f 83       	std	Y+7, r24	; 0x07
    190e:	98 87       	std	Y+8, r25	; 0x08
    1910:	a9 87       	std	Y+9, r26	; 0x09
    1912:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1914:	6f 81       	ldd	r22, Y+7	; 0x07
    1916:	78 85       	ldd	r23, Y+8	; 0x08
    1918:	89 85       	ldd	r24, Y+9	; 0x09
    191a:	9a 85       	ldd	r25, Y+10	; 0x0a
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <Write_data+0x8e>
		__ticks = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
    1934:	3f c0       	rjmp	.+126    	; 0x19b4 <Write_data+0x10c>
	else if (__tmp > 65535)
    1936:	6f 81       	ldd	r22, Y+7	; 0x07
    1938:	78 85       	ldd	r23, Y+8	; 0x08
    193a:	89 85       	ldd	r24, Y+9	; 0x09
    193c:	9a 85       	ldd	r25, Y+10	; 0x0a
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194a:	18 16       	cp	r1, r24
    194c:	4c f5       	brge	.+82     	; 0x19a0 <Write_data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1950:	7c 85       	ldd	r23, Y+12	; 0x0c
    1952:	8d 85       	ldd	r24, Y+13	; 0x0d
    1954:	9e 85       	ldd	r25, Y+14	; 0x0e
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	0f c0       	rjmp	.+30     	; 0x1996 <Write_data+0xee>
    1978:	88 ec       	ldi	r24, 0xC8	; 200
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 83       	std	Y+4, r25	; 0x04
    197e:	8b 83       	std	Y+3, r24	; 0x03
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <Write_data+0xdc>
    1988:	9c 83       	std	Y+4, r25	; 0x04
    198a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	9e 81       	ldd	r25, Y+6	; 0x06
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	9e 81       	ldd	r25, Y+6	; 0x06
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	69 f7       	brne	.-38     	; 0x1978 <Write_data+0xd0>
    199e:	14 c0       	rjmp	.+40     	; 0x19c8 <Write_data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a0:	6f 81       	ldd	r22, Y+7	; 0x07
    19a2:	78 85       	ldd	r23, Y+8	; 0x08
    19a4:	89 85       	ldd	r24, Y+9	; 0x09
    19a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <Write_data+0x118>
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_CTRL_PORT,LCD_Enable,DIO_LOW);//enable 0
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	62 e0       	ldi	r22, 0x02	; 2
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_u8SetPinVal>

}
    19d2:	2f 96       	adiw	r28, 0x0f	; 15
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <LCD_goto>:

void LCD_goto(u8 x,u8 y)//y 1st line and 2nd line ,x in the space horizontal
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <LCD_goto+0x6>
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	6a 83       	std	Y+2, r22	; 0x02
	if (y==0)
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	88 23       	and	r24, r24
    19f6:	29 f4       	brne	.+10     	; 0x1a02 <LCD_goto+0x1e>
	{
		Write_cmd(0b10000000+x);//right shift
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	80 58       	subi	r24, 0x80	; 128
    19fc:	0e 94 b6 0b 	call	0x176c	; 0x176c <Write_cmd>
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <LCD_goto+0x26>
	}
	else
	{
		Write_cmd(0b11000000+x);
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	80 54       	subi	r24, 0x40	; 64
    1a06:	0e 94 b6 0b 	call	0x176c	; 0x176c <Write_cmd>
	}
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <LCD_CLR>:

void LCD_CLR(void)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
	Write_cmd(0b00000001);
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	0e 94 b6 0b 	call	0x176c	; 0x176c <Write_cmd>
}
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <LCD_CGR>:
 void LCD_CGR(void)
 {
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
	 Write_cmd(0b01000000);//write on CGRAM 0b11100000 awl tlat 111 mesh bytktb fehom 7aga
    1a30:	80 e4       	ldi	r24, 0x40	; 64
    1a32:	0e 94 b6 0b 	call	0x176c	; 0x176c <Write_cmd>
 }
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <LCD_DDR>:

 void LCD_DDR(void)
 {
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
	 Write_cmd(0b10000000);
    1a44:	80 e8       	ldi	r24, 0x80	; 128
    1a46:	0e 94 b6 0b 	call	0x176c	; 0x176c <Write_cmd>
 }
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <LCD_PrintNum>:

 void LCD_PrintNum(u32 Num)
 {
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	28 97       	sbiw	r28, 0x08	; 8
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	98 87       	std	Y+8, r25	; 0x08
    1a66:	8f 83       	std	Y+7, r24	; 0x07
	 u8 x=0,y=0,z=0,h=0,k=0,temp=0;
    1a68:	1e 82       	std	Y+6, r1	; 0x06
    1a6a:	1d 82       	std	Y+5, r1	; 0x05
    1a6c:	1c 82       	std	Y+4, r1	; 0x04
    1a6e:	1b 82       	std	Y+3, r1	; 0x03
    1a70:	1a 82       	std	Y+2, r1	; 0x02
    1a72:	19 82       	std	Y+1, r1	; 0x01

	 if (Num==0)
    1a74:	8f 81       	ldd	r24, Y+7	; 0x07
    1a76:	98 85       	ldd	r25, Y+8	; 0x08
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	21 f4       	brne	.+8      	; 0x1a84 <LCD_PrintNum+0x34>
	 {
		 Write_data('0');
    1a7c:	80 e3       	ldi	r24, 0x30	; 48
    1a7e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
    1a82:	10 c1       	rjmp	.+544    	; 0x1ca4 <LCD_PrintNum+0x254>
	 }else if(Num>0 && Num<10)
    1a84:	8f 81       	ldd	r24, Y+7	; 0x07
    1a86:	98 85       	ldd	r25, Y+8	; 0x08
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	51 f0       	breq	.+20     	; 0x1aa0 <LCD_PrintNum+0x50>
    1a8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8e:	98 85       	ldd	r25, Y+8	; 0x08
    1a90:	8a 30       	cpi	r24, 0x0A	; 10
    1a92:	91 05       	cpc	r25, r1
    1a94:	28 f4       	brcc	.+10     	; 0x1aa0 <LCD_PrintNum+0x50>
	 {
		 Write_data('0'+Num);
    1a96:	8f 81       	ldd	r24, Y+7	; 0x07
    1a98:	80 5d       	subi	r24, 0xD0	; 208
    1a9a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
    1a9e:	02 c1       	rjmp	.+516    	; 0x1ca4 <LCD_PrintNum+0x254>
	 }else if(Num>=10 && Num<=99)
    1aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa2:	98 85       	ldd	r25, Y+8	; 0x08
    1aa4:	8a 30       	cpi	r24, 0x0A	; 10
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	f8 f0       	brcs	.+62     	; 0x1ae8 <LCD_PrintNum+0x98>
    1aaa:	8f 81       	ldd	r24, Y+7	; 0x07
    1aac:	98 85       	ldd	r25, Y+8	; 0x08
    1aae:	84 36       	cpi	r24, 0x64	; 100
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	d0 f4       	brcc	.+52     	; 0x1ae8 <LCD_PrintNum+0x98>
	 {
		 x=Num/10;
    1ab4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab6:	98 85       	ldd	r25, Y+8	; 0x08
    1ab8:	2a e0       	ldi	r18, 0x0A	; 10
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	b9 01       	movw	r22, r18
    1abe:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	8e 83       	std	Y+6, r24	; 0x06
		 y=Num%10;
    1ac6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac8:	98 85       	ldd	r25, Y+8	; 0x08
    1aca:	2a e0       	ldi	r18, 0x0A	; 10
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	b9 01       	movw	r22, r18
    1ad0:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
		 Write_data('0'+x);
    1ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad8:	80 5d       	subi	r24, 0xD0	; 208
    1ada:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+y);
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	80 5d       	subi	r24, 0xD0	; 208
    1ae2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
    1ae6:	de c0       	rjmp	.+444    	; 0x1ca4 <LCD_PrintNum+0x254>
	 }else if(Num>=100 && Num<=999)
    1ae8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aea:	98 85       	ldd	r25, Y+8	; 0x08
    1aec:	84 36       	cpi	r24, 0x64	; 100
    1aee:	91 05       	cpc	r25, r1
    1af0:	88 f1       	brcs	.+98     	; 0x1b54 <LCD_PrintNum+0x104>
    1af2:	8f 81       	ldd	r24, Y+7	; 0x07
    1af4:	98 85       	ldd	r25, Y+8	; 0x08
    1af6:	23 e0       	ldi	r18, 0x03	; 3
    1af8:	88 3e       	cpi	r24, 0xE8	; 232
    1afa:	92 07       	cpc	r25, r18
    1afc:	58 f5       	brcc	.+86     	; 0x1b54 <LCD_PrintNum+0x104>
	 {
		 x=Num/100;//el 101 eg,101 ->1
    1afe:	8f 81       	ldd	r24, Y+7	; 0x07
    1b00:	98 85       	ldd	r25, Y+8	; 0x08
    1b02:	24 e6       	ldi	r18, 0x64	; 100
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	b9 01       	movw	r22, r18
    1b08:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8e 83       	std	Y+6, r24	; 0x06
		 y=Num%100;//1
    1b10:	8f 81       	ldd	r24, Y+7	; 0x07
    1b12:	98 85       	ldd	r25, Y+8	; 0x08
    1b14:	24 e6       	ldi	r18, 0x64	; 100
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	b9 01       	movw	r22, r18
    1b1a:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
		 //e=Num-x*100
		 temp=y/10;//0
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9a e0       	ldi	r25, 0x0A	; 10
    1b24:	69 2f       	mov	r22, r25
    1b26:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1b2a:	89 83       	std	Y+1, r24	; 0x01
		 z=y%10;//0
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	9a e0       	ldi	r25, 0x0A	; 10
    1b30:	69 2f       	mov	r22, r25
    1b32:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1b36:	89 2f       	mov	r24, r25
    1b38:	8c 83       	std	Y+4, r24	; 0x04
		 Write_data('0'+x);
    1b3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b3c:	80 5d       	subi	r24, 0xD0	; 208
    1b3e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+temp);
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	80 5d       	subi	r24, 0xD0	; 208
    1b46:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+z);
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	80 5d       	subi	r24, 0xD0	; 208
    1b4e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
    1b52:	a8 c0       	rjmp	.+336    	; 0x1ca4 <LCD_PrintNum+0x254>
	 }else if(Num>=1000 && Num<=9999)
    1b54:	8f 81       	ldd	r24, Y+7	; 0x07
    1b56:	98 85       	ldd	r25, Y+8	; 0x08
    1b58:	23 e0       	ldi	r18, 0x03	; 3
    1b5a:	88 3e       	cpi	r24, 0xE8	; 232
    1b5c:	92 07       	cpc	r25, r18
    1b5e:	08 f4       	brcc	.+2      	; 0x1b62 <LCD_PrintNum+0x112>
    1b60:	44 c0       	rjmp	.+136    	; 0x1bea <LCD_PrintNum+0x19a>
    1b62:	8f 81       	ldd	r24, Y+7	; 0x07
    1b64:	98 85       	ldd	r25, Y+8	; 0x08
    1b66:	27 e2       	ldi	r18, 0x27	; 39
    1b68:	80 31       	cpi	r24, 0x10	; 16
    1b6a:	92 07       	cpc	r25, r18
    1b6c:	f0 f5       	brcc	.+124    	; 0x1bea <LCD_PrintNum+0x19a>
	 {
		 x=Num/1000;//1244 ->x=1*
    1b6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b70:	98 85       	ldd	r25, Y+8	; 0x08
    1b72:	28 ee       	ldi	r18, 0xE8	; 232
    1b74:	33 e0       	ldi	r19, 0x03	; 3
    1b76:	b9 01       	movw	r22, r18
    1b78:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	8e 83       	std	Y+6, r24	; 0x06
		 temp=Num%1000;//temp=244
    1b80:	8f 81       	ldd	r24, Y+7	; 0x07
    1b82:	98 85       	ldd	r25, Y+8	; 0x08
    1b84:	28 ee       	ldi	r18, 0xE8	; 232
    1b86:	33 e0       	ldi	r19, 0x03	; 3
    1b88:	b9 01       	movw	r22, r18
    1b8a:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1b8e:	89 83       	std	Y+1, r24	; 0x01
		 y=temp/100;//y=2*
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	94 e6       	ldi	r25, 0x64	; 100
    1b94:	69 2f       	mov	r22, r25
    1b96:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
		 z=temp%100;//z=44
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	94 e6       	ldi	r25, 0x64	; 100
    1ba0:	69 2f       	mov	r22, r25
    1ba2:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1ba6:	89 2f       	mov	r24, r25
    1ba8:	8c 83       	std	Y+4, r24	; 0x04
		 temp=z;// temp=44
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	89 83       	std	Y+1, r24	; 0x01
		 z=temp/10;//z=4*
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a e0       	ldi	r25, 0x0A	; 10
    1bb2:	69 2f       	mov	r22, r25
    1bb4:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1bb8:	8c 83       	std	Y+4, r24	; 0x04
		 h=temp%10;//h=4*
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a e0       	ldi	r25, 0x0A	; 10
    1bbe:	69 2f       	mov	r22, r25
    1bc0:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1bc4:	89 2f       	mov	r24, r25
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
		 Write_data('0'+x);//1
    1bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bca:	80 5d       	subi	r24, 0xD0	; 208
    1bcc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+y);//2
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	80 5d       	subi	r24, 0xD0	; 208
    1bd4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+z);//4
    1bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bda:	80 5d       	subi	r24, 0xD0	; 208
    1bdc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+h);//4
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	80 5d       	subi	r24, 0xD0	; 208
    1be4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
    1be8:	5d c0       	rjmp	.+186    	; 0x1ca4 <LCD_PrintNum+0x254>

	 }
	 else if(Num>=10000 && Num<=99999)
    1bea:	8f 81       	ldd	r24, Y+7	; 0x07
    1bec:	98 85       	ldd	r25, Y+8	; 0x08
    1bee:	27 e2       	ldi	r18, 0x27	; 39
    1bf0:	80 31       	cpi	r24, 0x10	; 16
    1bf2:	92 07       	cpc	r25, r18
    1bf4:	08 f4       	brcc	.+2      	; 0x1bf8 <LCD_PrintNum+0x1a8>
    1bf6:	56 c0       	rjmp	.+172    	; 0x1ca4 <LCD_PrintNum+0x254>
	 	 {
	 		 x=Num/1000;//12444 ->x=1*
    1bf8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bfa:	98 85       	ldd	r25, Y+8	; 0x08
    1bfc:	28 ee       	ldi	r18, 0xE8	; 232
    1bfe:	33 e0       	ldi	r19, 0x03	; 3
    1c00:	b9 01       	movw	r22, r18
    1c02:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1c06:	cb 01       	movw	r24, r22
    1c08:	8e 83       	std	Y+6, r24	; 0x06
	 		 temp=Num%10000;//temp=2444
    1c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c0c:	98 85       	ldd	r25, Y+8	; 0x08
    1c0e:	20 e1       	ldi	r18, 0x10	; 16
    1c10:	37 e2       	ldi	r19, 0x27	; 39
    1c12:	b9 01       	movw	r22, r18
    1c14:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1c18:	89 83       	std	Y+1, r24	; 0x01
	 		 y=temp/1000;//y=2*
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	28 ee       	ldi	r18, 0xE8	; 232
    1c22:	33 e0       	ldi	r19, 0x03	; 3
    1c24:	b9 01       	movw	r22, r18
    1c26:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__divmodhi4>
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
	 		 z=temp%1000;//z=444
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	28 ee       	ldi	r18, 0xE8	; 232
    1c36:	33 e0       	ldi	r19, 0x03	; 3
    1c38:	b9 01       	movw	r22, r18
    1c3a:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__divmodhi4>
    1c3e:	8c 83       	std	Y+4, r24	; 0x04
	 		 temp=z;// temp=444
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	89 83       	std	Y+1, r24	; 0x01
	 		 z=temp/100;//z=4*
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	94 e6       	ldi	r25, 0x64	; 100
    1c48:	69 2f       	mov	r22, r25
    1c4a:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1c4e:	8c 83       	std	Y+4, r24	; 0x04
	 		 h=temp%100;//h=44
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	94 e6       	ldi	r25, 0x64	; 100
    1c54:	69 2f       	mov	r22, r25
    1c56:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1c5a:	89 2f       	mov	r24, r25
    1c5c:	8b 83       	std	Y+3, r24	; 0x03
	 		 temp=h;
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	89 83       	std	Y+1, r24	; 0x01
	 		 h=temp/10;//h=4
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a e0       	ldi	r25, 0x0A	; 10
    1c66:	69 2f       	mov	r22, r25
    1c68:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
			 k=temp%10;
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a e0       	ldi	r25, 0x0A	; 10
    1c72:	69 2f       	mov	r22, r25
    1c74:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1c78:	89 2f       	mov	r24, r25
    1c7a:	8a 83       	std	Y+2, r24	; 0x02

	 		 Write_data('0'+x);//1
    1c7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7e:	80 5d       	subi	r24, 0xD0	; 208
    1c80:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
	 		 Write_data('0'+y);//2
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	80 5d       	subi	r24, 0xD0	; 208
    1c88:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
	 		 Write_data('0'+z);//4
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	80 5d       	subi	r24, 0xD0	; 208
    1c90:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
	 		 Write_data('0'+h);//4
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	80 5d       	subi	r24, 0xD0	; 208
    1c98:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
	 		 Write_data('0'+k);//4
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	80 5d       	subi	r24, 0xD0	; 208
    1ca0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>

	 	 }

 }
    1ca4:	28 96       	adiw	r28, 0x08	; 8
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <LCD_PrintNegNum>:

void LCD_PrintNegNum(s32 NegNum)
 {
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	29 97       	sbiw	r28, 0x09	; 9
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	99 87       	std	Y+9, r25	; 0x09
    1ccc:	88 87       	std	Y+8, r24	; 0x08
	 u32 g;
	 u8 x=0,y=0,z=0,h=0,temp=0;
    1cce:	1d 82       	std	Y+5, r1	; 0x05
    1cd0:	1c 82       	std	Y+4, r1	; 0x04
    1cd2:	1b 82       	std	Y+3, r1	; 0x03
    1cd4:	1a 82       	std	Y+2, r1	; 0x02
    1cd6:	19 82       	std	Y+1, r1	; 0x01
	if (NegNum<0)
    1cd8:	88 85       	ldd	r24, Y+8	; 0x08
    1cda:	99 85       	ldd	r25, Y+9	; 0x09
    1cdc:	99 23       	and	r25, r25
    1cde:	5c f4       	brge	.+22     	; 0x1cf6 <LCD_PrintNegNum+0x40>
	{
		Write_data('-');
    1ce0:	8d e2       	ldi	r24, 0x2D	; 45
    1ce2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		g=(NegNum)*(-1);
    1ce6:	88 85       	ldd	r24, Y+8	; 0x08
    1ce8:	99 85       	ldd	r25, Y+9	; 0x09
    1cea:	90 95       	com	r25
    1cec:	81 95       	neg	r24
    1cee:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf0:	9f 83       	std	Y+7, r25	; 0x07
    1cf2:	8e 83       	std	Y+6, r24	; 0x06
    1cf4:	04 c0       	rjmp	.+8      	; 0x1cfe <LCD_PrintNegNum+0x48>
	}
	else
	{
		g=NegNum;
    1cf6:	88 85       	ldd	r24, Y+8	; 0x08
    1cf8:	99 85       	ldd	r25, Y+9	; 0x09
    1cfa:	9f 83       	std	Y+7, r25	; 0x07
    1cfc:	8e 83       	std	Y+6, r24	; 0x06
	}


	 if (g==0)
    1cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1d00:	9f 81       	ldd	r25, Y+7	; 0x07
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	21 f4       	brne	.+8      	; 0x1d0e <LCD_PrintNegNum+0x58>
	 {
		 Write_data('0');
    1d06:	80 e3       	ldi	r24, 0x30	; 48
    1d08:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
    1d0c:	b2 c0       	rjmp	.+356    	; 0x1e72 <LCD_PrintNegNum+0x1bc>
	 }else if(g>0 && g<10)
    1d0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d10:	9f 81       	ldd	r25, Y+7	; 0x07
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	51 f0       	breq	.+20     	; 0x1d2a <LCD_PrintNegNum+0x74>
    1d16:	8e 81       	ldd	r24, Y+6	; 0x06
    1d18:	9f 81       	ldd	r25, Y+7	; 0x07
    1d1a:	8a 30       	cpi	r24, 0x0A	; 10
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	28 f4       	brcc	.+10     	; 0x1d2a <LCD_PrintNegNum+0x74>
	 {
		 Write_data('0'+g);
    1d20:	8e 81       	ldd	r24, Y+6	; 0x06
    1d22:	80 5d       	subi	r24, 0xD0	; 208
    1d24:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
    1d28:	a4 c0       	rjmp	.+328    	; 0x1e72 <LCD_PrintNegNum+0x1bc>
	 }else if(g>=10 && g<=99)
    1d2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d2e:	8a 30       	cpi	r24, 0x0A	; 10
    1d30:	91 05       	cpc	r25, r1
    1d32:	f8 f0       	brcs	.+62     	; 0x1d72 <LCD_PrintNegNum+0xbc>
    1d34:	8e 81       	ldd	r24, Y+6	; 0x06
    1d36:	9f 81       	ldd	r25, Y+7	; 0x07
    1d38:	84 36       	cpi	r24, 0x64	; 100
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	d0 f4       	brcc	.+52     	; 0x1d72 <LCD_PrintNegNum+0xbc>
	 {
		 x=g/10;
    1d3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d40:	9f 81       	ldd	r25, Y+7	; 0x07
    1d42:	2a e0       	ldi	r18, 0x0A	; 10
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	b9 01       	movw	r22, r18
    1d48:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
		 y=g%10;
    1d50:	8e 81       	ldd	r24, Y+6	; 0x06
    1d52:	9f 81       	ldd	r25, Y+7	; 0x07
    1d54:	2a e0       	ldi	r18, 0x0A	; 10
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	b9 01       	movw	r22, r18
    1d5a:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1d5e:	8c 83       	std	Y+4, r24	; 0x04
		 Write_data('0'+x);
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	80 5d       	subi	r24, 0xD0	; 208
    1d64:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+y);
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	80 5d       	subi	r24, 0xD0	; 208
    1d6c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
    1d70:	80 c0       	rjmp	.+256    	; 0x1e72 <LCD_PrintNegNum+0x1bc>
	 }else if(g>=100 && g<=999)
    1d72:	8e 81       	ldd	r24, Y+6	; 0x06
    1d74:	9f 81       	ldd	r25, Y+7	; 0x07
    1d76:	84 36       	cpi	r24, 0x64	; 100
    1d78:	91 05       	cpc	r25, r1
    1d7a:	88 f1       	brcs	.+98     	; 0x1dde <LCD_PrintNegNum+0x128>
    1d7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d80:	23 e0       	ldi	r18, 0x03	; 3
    1d82:	88 3e       	cpi	r24, 0xE8	; 232
    1d84:	92 07       	cpc	r25, r18
    1d86:	58 f5       	brcc	.+86     	; 0x1dde <LCD_PrintNegNum+0x128>
	 {
		 x=g/100;//el 101 eg,101 ->1
    1d88:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d8c:	24 e6       	ldi	r18, 0x64	; 100
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	b9 01       	movw	r22, r18
    1d92:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1d96:	cb 01       	movw	r24, r22
    1d98:	8d 83       	std	Y+5, r24	; 0x05
		 y=g%100;//1
    1d9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9e:	24 e6       	ldi	r18, 0x64	; 100
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	b9 01       	movw	r22, r18
    1da4:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1da8:	8c 83       	std	Y+4, r24	; 0x04
		 //e=Num-x*100
		 temp=y/10;//0
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	9a e0       	ldi	r25, 0x0A	; 10
    1dae:	69 2f       	mov	r22, r25
    1db0:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1db4:	89 83       	std	Y+1, r24	; 0x01
		 z=y%10;//0
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	9a e0       	ldi	r25, 0x0A	; 10
    1dba:	69 2f       	mov	r22, r25
    1dbc:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1dc0:	89 2f       	mov	r24, r25
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
		 Write_data('0'+x);
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	80 5d       	subi	r24, 0xD0	; 208
    1dc8:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+temp);
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	80 5d       	subi	r24, 0xD0	; 208
    1dd0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+z);
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	80 5d       	subi	r24, 0xD0	; 208
    1dd8:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
    1ddc:	4a c0       	rjmp	.+148    	; 0x1e72 <LCD_PrintNegNum+0x1bc>
	 }else if(g>=1000 && g<=9999)
    1dde:	8e 81       	ldd	r24, Y+6	; 0x06
    1de0:	9f 81       	ldd	r25, Y+7	; 0x07
    1de2:	23 e0       	ldi	r18, 0x03	; 3
    1de4:	88 3e       	cpi	r24, 0xE8	; 232
    1de6:	92 07       	cpc	r25, r18
    1de8:	08 f4       	brcc	.+2      	; 0x1dec <LCD_PrintNegNum+0x136>
    1dea:	43 c0       	rjmp	.+134    	; 0x1e72 <LCD_PrintNegNum+0x1bc>
    1dec:	8e 81       	ldd	r24, Y+6	; 0x06
    1dee:	9f 81       	ldd	r25, Y+7	; 0x07
    1df0:	27 e2       	ldi	r18, 0x27	; 39
    1df2:	80 31       	cpi	r24, 0x10	; 16
    1df4:	92 07       	cpc	r25, r18
    1df6:	e8 f5       	brcc	.+122    	; 0x1e72 <LCD_PrintNegNum+0x1bc>
	 {
		 x=g/1000;//1244 ->x=1*
    1df8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1dfc:	28 ee       	ldi	r18, 0xE8	; 232
    1dfe:	33 e0       	ldi	r19, 0x03	; 3
    1e00:	b9 01       	movw	r22, r18
    1e02:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1e06:	cb 01       	movw	r24, r22
    1e08:	8d 83       	std	Y+5, r24	; 0x05
		 temp=g%1000;//temp=244
    1e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0e:	28 ee       	ldi	r18, 0xE8	; 232
    1e10:	33 e0       	ldi	r19, 0x03	; 3
    1e12:	b9 01       	movw	r22, r18
    1e14:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1e18:	89 83       	std	Y+1, r24	; 0x01
		 y=temp/100;//y=2*
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	94 e6       	ldi	r25, 0x64	; 100
    1e1e:	69 2f       	mov	r22, r25
    1e20:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1e24:	8c 83       	std	Y+4, r24	; 0x04
		 z=temp%100;//z=44
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	94 e6       	ldi	r25, 0x64	; 100
    1e2a:	69 2f       	mov	r22, r25
    1e2c:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1e30:	89 2f       	mov	r24, r25
    1e32:	8b 83       	std	Y+3, r24	; 0x03
		 temp=z;// temp=44
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	89 83       	std	Y+1, r24	; 0x01
		 z=temp/10;//z=4*
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a e0       	ldi	r25, 0x0A	; 10
    1e3c:	69 2f       	mov	r22, r25
    1e3e:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1e42:	8b 83       	std	Y+3, r24	; 0x03
		 h=temp%10;//h=4*
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a e0       	ldi	r25, 0x0A	; 10
    1e48:	69 2f       	mov	r22, r25
    1e4a:	0e 94 ba 20 	call	0x4174	; 0x4174 <__udivmodqi4>
    1e4e:	89 2f       	mov	r24, r25
    1e50:	8a 83       	std	Y+2, r24	; 0x02
		 Write_data('0'+x);//1
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	80 5d       	subi	r24, 0xD0	; 208
    1e56:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+y);//2
    1e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5c:	80 5d       	subi	r24, 0xD0	; 208
    1e5e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+z);//4
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	80 5d       	subi	r24, 0xD0	; 208
    1e66:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		 Write_data('0'+h);//4
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	80 5d       	subi	r24, 0xD0	; 208
    1e6e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>

	 }

 }
    1e72:	29 96       	adiw	r28, 0x09	; 9
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <LCD_PrintFloatNum>:

void LCD_PrintFloatNum(u32 group1,u32 group2)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	28 97       	sbiw	r28, 0x08	; 8
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	78 87       	std	Y+8, r23	; 0x08
    1e9e:	6f 83       	std	Y+7, r22	; 0x07
	u32 temp1,temp2;

	if (group1%group2==0)
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ea6:	38 85       	ldd	r19, Y+8	; 0x08
    1ea8:	b9 01       	movw	r22, r18
    1eaa:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	79 f4       	brne	.+30     	; 0x1ed0 <LCD_PrintFloatNum+0x4c>
	{
		temp1=group1/group2;
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb6:	2f 81       	ldd	r18, Y+7	; 0x07
    1eb8:	38 85       	ldd	r19, Y+8	; 0x08
    1eba:	b9 01       	movw	r22, r18
    1ebc:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
		LCD_PrintNum(temp1);
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <LCD_PrintNum>
    1ece:	1e c0       	rjmp	.+60     	; 0x1f0c <LCD_PrintFloatNum+0x88>
	}
	else
	{
		temp1=group1/group2;
    1ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ed6:	38 85       	ldd	r19, Y+8	; 0x08
    1ed8:	b9 01       	movw	r22, r18
    1eda:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
		LCD_PrintNum(temp1);
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <LCD_PrintNum>
		Write_data('.');
    1eec:	8e e2       	ldi	r24, 0x2E	; 46
    1eee:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
		temp2=group1%group2;
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ef8:	38 85       	ldd	r19, Y+8	; 0x08
    1efa:	b9 01       	movw	r22, r18
    1efc:	0e 94 c6 20 	call	0x418c	; 0x418c <__udivmodhi4>
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
		LCD_PrintNum(temp2);
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <LCD_PrintNum>
	}


}
    1f0c:	28 96       	adiw	r28, 0x08	; 8
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <LCD_WriteString>:

void LCD_WriteString(u8 arr[16])
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <LCD_WriteString+0x6>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <LCD_WriteString+0x8>
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
	u8 i,counter=0;
    1f2e:	19 82       	std	Y+1, r1	; 0x01
    1f30:	03 c0       	rjmp	.+6      	; 0x1f38 <LCD_WriteString+0x1a>
	while (arr[counter]!=0)
	{
		counter++;
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	8f 5f       	subi	r24, 0xFF	; 255
    1f36:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_WriteString(u8 arr[16])
{
	u8 i,counter=0;
	while (arr[counter]!=0)
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	fc 01       	movw	r30, r24
    1f44:	e2 0f       	add	r30, r18
    1f46:	f3 1f       	adc	r31, r19
    1f48:	80 81       	ld	r24, Z
    1f4a:	88 23       	and	r24, r24
    1f4c:	91 f7       	brne	.-28     	; 0x1f32 <LCD_WriteString+0x14>
	{
		counter++;
	}
	for(i=0;i<=counter;i++)
    1f4e:	1a 82       	std	Y+2, r1	; 0x02
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <LCD_WriteString+0x52>
		{
			Write_data('0'+arr[i]);
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	e2 0f       	add	r30, r18
    1f60:	f3 1f       	adc	r31, r19
    1f62:	80 81       	ld	r24, Z
    1f64:	80 5d       	subi	r24, 0xD0	; 208
    1f66:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
	u8 i,counter=0;
	while (arr[counter]!=0)
	{
		counter++;
	}
	for(i=0;i<=counter;i++)
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	8a 83       	std	Y+2, r24	; 0x02
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	89 17       	cp	r24, r25
    1f76:	68 f7       	brcc	.-38     	; 0x1f52 <LCD_WriteString+0x34>
		{
			Write_data('0'+arr[i]);
		}
;
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <main>:
void CGR_Editor(void);
void printing(void);
//void TailRemover(void);

void main(void)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    1f8e:	0e 94 ca 09 	call	0x1394	; 0x1394 <LCD_init>
	KeyPad_Init();
    1f92:	0e 94 75 09 	call	0x12ea	; 0x12ea <KeyPad_Init>
	DIO_u8SetPinDir(DIO_PORTA,DIO_PIN0,DIO_INPUT);
	DIO_u8SetPinVal(DIO_PORTA,DIO_PIN0,DIO_HIGH);
	*/
	//u8 var=0b00000000;
	//u8 x=0,y=0,i,j,button,head;
	snake_init();
    1f96:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <snake_init>
	while(1)
	{

		movements(button);
    1f9a:	80 91 13 01 	lds	r24, 0x0113
    1f9e:	0e 94 49 10 	call	0x2092	; 0x2092 <movements>
		CGR_Editor();
    1fa2:	0e 94 d6 12 	call	0x25ac	; 0x25ac <CGR_Editor>
		printing();
    1fa6:	0e 94 13 20 	call	0x4026	; 0x4026 <printing>
    1faa:	f7 cf       	rjmp	.-18     	; 0x1f9a <main+0x14>

00001fac <snake_init>:
	}

}

void snake_init()
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
	Write_data(0b00000000);
	Write_data(0b00000000);
	Write_data(0b00000000);
	Write_data(0b00000000);
	Write_data(0b00000000);*/
	x=2;y=0;
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	80 93 6c 00 	sts	0x006C, r24
    1fba:	10 92 6d 00 	sts	0x006D, r1
	Field[y][x]=tail;
    1fbe:	80 91 6d 00 	lds	r24, 0x006D
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	33 27       	eor	r19, r19
    1fc6:	27 fd       	sbrc	r18, 7
    1fc8:	30 95       	com	r19
    1fca:	80 91 6c 00 	lds	r24, 0x006C
    1fce:	48 2f       	mov	r20, r24
    1fd0:	55 27       	eor	r21, r21
    1fd2:	47 fd       	sbrc	r20, 7
    1fd4:	50 95       	com	r21
    1fd6:	60 91 69 00 	lds	r22, 0x0069
    1fda:	c9 01       	movw	r24, r18
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	9c 01       	movw	r18, r24
    1fe2:	22 0f       	add	r18, r18
    1fe4:	33 1f       	adc	r19, r19
    1fe6:	22 0f       	add	r18, r18
    1fe8:	33 1f       	adc	r19, r19
    1fea:	82 0f       	add	r24, r18
    1fec:	93 1f       	adc	r25, r19
    1fee:	84 0f       	add	r24, r20
    1ff0:	95 1f       	adc	r25, r21
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	ed 53       	subi	r30, 0x3D	; 61
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 83       	st	Z, r22
	x=3;y=0;
    1ffa:	83 e0       	ldi	r24, 0x03	; 3
    1ffc:	80 93 6c 00 	sts	0x006C, r24
    2000:	10 92 6d 00 	sts	0x006D, r1
	Field[y][x]=midbody;
    2004:	80 91 6d 00 	lds	r24, 0x006D
    2008:	28 2f       	mov	r18, r24
    200a:	33 27       	eor	r19, r19
    200c:	27 fd       	sbrc	r18, 7
    200e:	30 95       	com	r19
    2010:	80 91 6c 00 	lds	r24, 0x006C
    2014:	48 2f       	mov	r20, r24
    2016:	55 27       	eor	r21, r21
    2018:	47 fd       	sbrc	r20, 7
    201a:	50 95       	com	r21
    201c:	60 91 6a 00 	lds	r22, 0x006A
    2020:	c9 01       	movw	r24, r18
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	9c 01       	movw	r18, r24
    2028:	22 0f       	add	r18, r18
    202a:	33 1f       	adc	r19, r19
    202c:	22 0f       	add	r18, r18
    202e:	33 1f       	adc	r19, r19
    2030:	82 0f       	add	r24, r18
    2032:	93 1f       	adc	r25, r19
    2034:	84 0f       	add	r24, r20
    2036:	95 1f       	adc	r25, r21
    2038:	fc 01       	movw	r30, r24
    203a:	ed 53       	subi	r30, 0x3D	; 61
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	60 83       	st	Z, r22
	x=4;y=0;
    2040:	84 e0       	ldi	r24, 0x04	; 4
    2042:	80 93 6c 00 	sts	0x006C, r24
    2046:	10 92 6d 00 	sts	0x006D, r1
	Field[y][x]=head;
    204a:	80 91 6d 00 	lds	r24, 0x006D
    204e:	28 2f       	mov	r18, r24
    2050:	33 27       	eor	r19, r19
    2052:	27 fd       	sbrc	r18, 7
    2054:	30 95       	com	r19
    2056:	80 91 6c 00 	lds	r24, 0x006C
    205a:	48 2f       	mov	r20, r24
    205c:	55 27       	eor	r21, r21
    205e:	47 fd       	sbrc	r20, 7
    2060:	50 95       	com	r21
    2062:	60 91 68 00 	lds	r22, 0x0068
    2066:	c9 01       	movw	r24, r18
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	9c 01       	movw	r18, r24
    206e:	22 0f       	add	r18, r18
    2070:	33 1f       	adc	r19, r19
    2072:	22 0f       	add	r18, r18
    2074:	33 1f       	adc	r19, r19
    2076:	82 0f       	add	r24, r18
    2078:	93 1f       	adc	r25, r19
    207a:	84 0f       	add	r24, r20
    207c:	95 1f       	adc	r25, r21
    207e:	fc 01       	movw	r30, r24
    2080:	ed 53       	subi	r30, 0x3D	; 61
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 83       	st	Z, r22
	Field[4][5]=1;//food
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	80 93 f0 00 	sts	0x00F0, r24
	//LCD_DDR();
	//Write_data(0);

}
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <movements>:

void movements(u8 button)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	89 83       	std	Y+1, r24	; 0x01
	button=KeyPad_ReadSw();
    209e:	0e 94 84 09 	call	0x1308	; 0x1308 <KeyPad_ReadSw>
    20a2:	89 83       	std	Y+1, r24	; 0x01
	//DIO_u8GetPinVal(DIO_PORTA,DIO_PIN0,&button);
	if (button==0)
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	88 23       	and	r24, r24
    20a8:	19 f4       	brne	.+6      	; 0x20b0 <movements+0x1e>
	{
		button=ButtonReminder;//for continues movements
    20aa:	80 91 71 00 	lds	r24, 0x0071
    20ae:	89 83       	std	Y+1, r24	; 0x01
	}
	if(button==2)
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	82 30       	cpi	r24, 0x02	; 2
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <movements+0x26>
    20b6:	9a c0       	rjmp	.+308    	; 0x21ec <movements+0x15a>
		{
				y--;
    20b8:	80 91 6d 00 	lds	r24, 0x006D
    20bc:	81 50       	subi	r24, 0x01	; 1
    20be:	80 93 6d 00 	sts	0x006D, r24
				if (Field[y][x]==1)
    20c2:	80 91 6d 00 	lds	r24, 0x006D
    20c6:	28 2f       	mov	r18, r24
    20c8:	33 27       	eor	r19, r19
    20ca:	27 fd       	sbrc	r18, 7
    20cc:	30 95       	com	r19
    20ce:	80 91 6c 00 	lds	r24, 0x006C
    20d2:	48 2f       	mov	r20, r24
    20d4:	55 27       	eor	r21, r21
    20d6:	47 fd       	sbrc	r20, 7
    20d8:	50 95       	com	r21
    20da:	c9 01       	movw	r24, r18
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	9c 01       	movw	r18, r24
    20e2:	22 0f       	add	r18, r18
    20e4:	33 1f       	adc	r19, r19
    20e6:	22 0f       	add	r18, r18
    20e8:	33 1f       	adc	r19, r19
    20ea:	82 0f       	add	r24, r18
    20ec:	93 1f       	adc	r25, r19
    20ee:	84 0f       	add	r24, r20
    20f0:	95 1f       	adc	r25, r21
    20f2:	fc 01       	movw	r30, r24
    20f4:	ed 53       	subi	r30, 0x3D	; 61
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	80 81       	ld	r24, Z
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	21 f4       	brne	.+8      	; 0x2106 <movements+0x74>
				{
					foodflag=1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	80 93 6f 00 	sts	0x006F, r24
    2104:	02 c0       	rjmp	.+4      	; 0x210a <movements+0x78>
				}
				else
				{
					foodflag=0;
    2106:	10 92 6f 00 	sts	0x006F, r1
				}
				if(y>=0)
    210a:	80 91 6d 00 	lds	r24, 0x006D
    210e:	88 23       	and	r24, r24
    2110:	4c f1       	brlt	.+82     	; 0x2164 <movements+0xd2>
				{
					/*lazm el tail++ wel head ++ ykono gowa 3shan my3ml assignation mn bra w tetb3 fel
					 * cgr editor*/
					tail++;
    2112:	80 91 69 00 	lds	r24, 0x0069
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	80 93 69 00 	sts	0x0069, r24
					head++;
    211c:	80 91 68 00 	lds	r24, 0x0068
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	80 93 68 00 	sts	0x0068, r24
					Field[y][x]=head;
    2126:	80 91 6d 00 	lds	r24, 0x006D
    212a:	28 2f       	mov	r18, r24
    212c:	33 27       	eor	r19, r19
    212e:	27 fd       	sbrc	r18, 7
    2130:	30 95       	com	r19
    2132:	80 91 6c 00 	lds	r24, 0x006C
    2136:	48 2f       	mov	r20, r24
    2138:	55 27       	eor	r21, r21
    213a:	47 fd       	sbrc	r20, 7
    213c:	50 95       	com	r21
    213e:	60 91 68 00 	lds	r22, 0x0068
    2142:	c9 01       	movw	r24, r18
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	9c 01       	movw	r18, r24
    214a:	22 0f       	add	r18, r18
    214c:	33 1f       	adc	r19, r19
    214e:	22 0f       	add	r18, r18
    2150:	33 1f       	adc	r19, r19
    2152:	82 0f       	add	r24, r18
    2154:	93 1f       	adc	r25, r19
    2156:	84 0f       	add	r24, r20
    2158:	95 1f       	adc	r25, r21
    215a:	fc 01       	movw	r30, r24
    215c:	ed 53       	subi	r30, 0x3D	; 61
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	60 83       	st	Z, r22
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <movements+0xd6>
				}
				else y=0;
    2164:	10 92 6d 00 	sts	0x006D, r1
				if(ArrayOfFlags[y][x]==1 && Field[y][x]==head)//Crash condition
    2168:	80 91 6d 00 	lds	r24, 0x006D
    216c:	28 2f       	mov	r18, r24
    216e:	33 27       	eor	r19, r19
    2170:	27 fd       	sbrc	r18, 7
    2172:	30 95       	com	r19
    2174:	80 91 6c 00 	lds	r24, 0x006C
    2178:	48 2f       	mov	r20, r24
    217a:	55 27       	eor	r21, r21
    217c:	47 fd       	sbrc	r20, 7
    217e:	50 95       	com	r21
    2180:	c9 01       	movw	r24, r18
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	9c 01       	movw	r18, r24
    2188:	22 0f       	add	r18, r18
    218a:	33 1f       	adc	r19, r19
    218c:	22 0f       	add	r18, r18
    218e:	33 1f       	adc	r19, r19
    2190:	82 0f       	add	r24, r18
    2192:	93 1f       	adc	r25, r19
    2194:	84 0f       	add	r24, r20
    2196:	95 1f       	adc	r25, r21
    2198:	fc 01       	movw	r30, r24
    219a:	ee 58       	subi	r30, 0x8E	; 142
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	09 f5       	brne	.+66     	; 0x21e6 <movements+0x154>
    21a4:	80 91 6d 00 	lds	r24, 0x006D
    21a8:	28 2f       	mov	r18, r24
    21aa:	33 27       	eor	r19, r19
    21ac:	27 fd       	sbrc	r18, 7
    21ae:	30 95       	com	r19
    21b0:	80 91 6c 00 	lds	r24, 0x006C
    21b4:	48 2f       	mov	r20, r24
    21b6:	55 27       	eor	r21, r21
    21b8:	47 fd       	sbrc	r20, 7
    21ba:	50 95       	com	r21
    21bc:	c9 01       	movw	r24, r18
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	9c 01       	movw	r18, r24
    21c4:	22 0f       	add	r18, r18
    21c6:	33 1f       	adc	r19, r19
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	82 0f       	add	r24, r18
    21ce:	93 1f       	adc	r25, r19
    21d0:	84 0f       	add	r24, r20
    21d2:	95 1f       	adc	r25, r21
    21d4:	fc 01       	movw	r30, r24
    21d6:	ed 53       	subi	r30, 0x3D	; 61
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	90 81       	ld	r25, Z
    21dc:	80 91 68 00 	lds	r24, 0x0068
    21e0:	98 17       	cp	r25, r24
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <movements+0x154>
    21e4:	ff cf       	rjmp	.-2      	; 0x21e4 <movements+0x152>
				{
					while(1)
					{
					}
				}
				ButtonReminder=button;//for continues movements
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	80 93 71 00 	sts	0x0071, r24
		}
	if(button==6)
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	86 30       	cpi	r24, 0x06	; 6
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <movements+0x162>
    21f2:	9b c0       	rjmp	.+310    	; 0x232a <movements+0x298>
		{
				y++;
    21f4:	80 91 6d 00 	lds	r24, 0x006D
    21f8:	8f 5f       	subi	r24, 0xFF	; 255
    21fa:	80 93 6d 00 	sts	0x006D, r24
				if (Field[y][x]==1)
    21fe:	80 91 6d 00 	lds	r24, 0x006D
    2202:	28 2f       	mov	r18, r24
    2204:	33 27       	eor	r19, r19
    2206:	27 fd       	sbrc	r18, 7
    2208:	30 95       	com	r19
    220a:	80 91 6c 00 	lds	r24, 0x006C
    220e:	48 2f       	mov	r20, r24
    2210:	55 27       	eor	r21, r21
    2212:	47 fd       	sbrc	r20, 7
    2214:	50 95       	com	r21
    2216:	c9 01       	movw	r24, r18
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	9c 01       	movw	r18, r24
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	22 0f       	add	r18, r18
    2224:	33 1f       	adc	r19, r19
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	84 0f       	add	r24, r20
    222c:	95 1f       	adc	r25, r21
    222e:	fc 01       	movw	r30, r24
    2230:	ed 53       	subi	r30, 0x3D	; 61
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	21 f4       	brne	.+8      	; 0x2242 <movements+0x1b0>
				{
					foodflag=1;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	80 93 6f 00 	sts	0x006F, r24
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <movements+0x1b4>
				}
				else
				{
					foodflag=0;
    2242:	10 92 6f 00 	sts	0x006F, r1
				}
				if(y<8)
    2246:	80 91 6d 00 	lds	r24, 0x006D
    224a:	88 30       	cpi	r24, 0x08	; 8
    224c:	4c f5       	brge	.+82     	; 0x22a0 <movements+0x20e>
				{
					/*lazm el tail++ wel head ++ ykono gowa 3shan my3ml assignation mn bra w tetb3 fel
					 * cgr editor*/
					tail++;
    224e:	80 91 69 00 	lds	r24, 0x0069
    2252:	8f 5f       	subi	r24, 0xFF	; 255
    2254:	80 93 69 00 	sts	0x0069, r24
					head++;
    2258:	80 91 68 00 	lds	r24, 0x0068
    225c:	8f 5f       	subi	r24, 0xFF	; 255
    225e:	80 93 68 00 	sts	0x0068, r24
					Field[y][x]=head;
    2262:	80 91 6d 00 	lds	r24, 0x006D
    2266:	28 2f       	mov	r18, r24
    2268:	33 27       	eor	r19, r19
    226a:	27 fd       	sbrc	r18, 7
    226c:	30 95       	com	r19
    226e:	80 91 6c 00 	lds	r24, 0x006C
    2272:	48 2f       	mov	r20, r24
    2274:	55 27       	eor	r21, r21
    2276:	47 fd       	sbrc	r20, 7
    2278:	50 95       	com	r21
    227a:	60 91 68 00 	lds	r22, 0x0068
    227e:	c9 01       	movw	r24, r18
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	9c 01       	movw	r18, r24
    2286:	22 0f       	add	r18, r18
    2288:	33 1f       	adc	r19, r19
    228a:	22 0f       	add	r18, r18
    228c:	33 1f       	adc	r19, r19
    228e:	82 0f       	add	r24, r18
    2290:	93 1f       	adc	r25, r19
    2292:	84 0f       	add	r24, r20
    2294:	95 1f       	adc	r25, r21
    2296:	fc 01       	movw	r30, r24
    2298:	ed 53       	subi	r30, 0x3D	; 61
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	60 83       	st	Z, r22
    229e:	03 c0       	rjmp	.+6      	; 0x22a6 <movements+0x214>
				}
				else y=7;
    22a0:	87 e0       	ldi	r24, 0x07	; 7
    22a2:	80 93 6d 00 	sts	0x006D, r24
				if(ArrayOfFlags[y][x]==1 && Field[y][x]==head)//Crash condition
    22a6:	80 91 6d 00 	lds	r24, 0x006D
    22aa:	28 2f       	mov	r18, r24
    22ac:	33 27       	eor	r19, r19
    22ae:	27 fd       	sbrc	r18, 7
    22b0:	30 95       	com	r19
    22b2:	80 91 6c 00 	lds	r24, 0x006C
    22b6:	48 2f       	mov	r20, r24
    22b8:	55 27       	eor	r21, r21
    22ba:	47 fd       	sbrc	r20, 7
    22bc:	50 95       	com	r21
    22be:	c9 01       	movw	r24, r18
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	9c 01       	movw	r18, r24
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	22 0f       	add	r18, r18
    22cc:	33 1f       	adc	r19, r19
    22ce:	82 0f       	add	r24, r18
    22d0:	93 1f       	adc	r25, r19
    22d2:	84 0f       	add	r24, r20
    22d4:	95 1f       	adc	r25, r21
    22d6:	fc 01       	movw	r30, r24
    22d8:	ee 58       	subi	r30, 0x8E	; 142
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	81 30       	cpi	r24, 0x01	; 1
    22e0:	09 f5       	brne	.+66     	; 0x2324 <movements+0x292>
    22e2:	80 91 6d 00 	lds	r24, 0x006D
    22e6:	28 2f       	mov	r18, r24
    22e8:	33 27       	eor	r19, r19
    22ea:	27 fd       	sbrc	r18, 7
    22ec:	30 95       	com	r19
    22ee:	80 91 6c 00 	lds	r24, 0x006C
    22f2:	48 2f       	mov	r20, r24
    22f4:	55 27       	eor	r21, r21
    22f6:	47 fd       	sbrc	r20, 7
    22f8:	50 95       	com	r21
    22fa:	c9 01       	movw	r24, r18
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	9c 01       	movw	r18, r24
    2302:	22 0f       	add	r18, r18
    2304:	33 1f       	adc	r19, r19
    2306:	22 0f       	add	r18, r18
    2308:	33 1f       	adc	r19, r19
    230a:	82 0f       	add	r24, r18
    230c:	93 1f       	adc	r25, r19
    230e:	84 0f       	add	r24, r20
    2310:	95 1f       	adc	r25, r21
    2312:	fc 01       	movw	r30, r24
    2314:	ed 53       	subi	r30, 0x3D	; 61
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	90 81       	ld	r25, Z
    231a:	80 91 68 00 	lds	r24, 0x0068
    231e:	98 17       	cp	r25, r24
    2320:	09 f4       	brne	.+2      	; 0x2324 <movements+0x292>
    2322:	ff cf       	rjmp	.-2      	; 0x2322 <movements+0x290>
				{
					while(1)
					{
					}
				}
				ButtonReminder=button;//for continues movements
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	80 93 71 00 	sts	0x0071, r24
		}
	if(button==5)
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	85 30       	cpi	r24, 0x05	; 5
    232e:	09 f0       	breq	.+2      	; 0x2332 <movements+0x2a0>
    2330:	9a c0       	rjmp	.+308    	; 0x2466 <movements+0x3d4>
		{
				x--;
    2332:	80 91 6c 00 	lds	r24, 0x006C
    2336:	81 50       	subi	r24, 0x01	; 1
    2338:	80 93 6c 00 	sts	0x006C, r24
				if (Field[y][x]==1)
    233c:	80 91 6d 00 	lds	r24, 0x006D
    2340:	28 2f       	mov	r18, r24
    2342:	33 27       	eor	r19, r19
    2344:	27 fd       	sbrc	r18, 7
    2346:	30 95       	com	r19
    2348:	80 91 6c 00 	lds	r24, 0x006C
    234c:	48 2f       	mov	r20, r24
    234e:	55 27       	eor	r21, r21
    2350:	47 fd       	sbrc	r20, 7
    2352:	50 95       	com	r21
    2354:	c9 01       	movw	r24, r18
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	9c 01       	movw	r18, r24
    235c:	22 0f       	add	r18, r18
    235e:	33 1f       	adc	r19, r19
    2360:	22 0f       	add	r18, r18
    2362:	33 1f       	adc	r19, r19
    2364:	82 0f       	add	r24, r18
    2366:	93 1f       	adc	r25, r19
    2368:	84 0f       	add	r24, r20
    236a:	95 1f       	adc	r25, r21
    236c:	fc 01       	movw	r30, r24
    236e:	ed 53       	subi	r30, 0x3D	; 61
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	21 f4       	brne	.+8      	; 0x2380 <movements+0x2ee>
				{
					foodflag=1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	80 93 6f 00 	sts	0x006F, r24
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <movements+0x2f2>
				}
				else
				{
					foodflag=0;
    2380:	10 92 6f 00 	sts	0x006F, r1
				}
				if(x>=0)
    2384:	80 91 6c 00 	lds	r24, 0x006C
    2388:	88 23       	and	r24, r24
    238a:	4c f1       	brlt	.+82     	; 0x23de <movements+0x34c>
				{
					/*lazm el tail++ wel head ++ ykono gowa 3shan my3ml assignation mn bra w tetb3 fel
					 * cgr editor*/
					tail++;
    238c:	80 91 69 00 	lds	r24, 0x0069
    2390:	8f 5f       	subi	r24, 0xFF	; 255
    2392:	80 93 69 00 	sts	0x0069, r24
					head++;
    2396:	80 91 68 00 	lds	r24, 0x0068
    239a:	8f 5f       	subi	r24, 0xFF	; 255
    239c:	80 93 68 00 	sts	0x0068, r24
					Field[y][x]=head;
    23a0:	80 91 6d 00 	lds	r24, 0x006D
    23a4:	28 2f       	mov	r18, r24
    23a6:	33 27       	eor	r19, r19
    23a8:	27 fd       	sbrc	r18, 7
    23aa:	30 95       	com	r19
    23ac:	80 91 6c 00 	lds	r24, 0x006C
    23b0:	48 2f       	mov	r20, r24
    23b2:	55 27       	eor	r21, r21
    23b4:	47 fd       	sbrc	r20, 7
    23b6:	50 95       	com	r21
    23b8:	60 91 68 00 	lds	r22, 0x0068
    23bc:	c9 01       	movw	r24, r18
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	9c 01       	movw	r18, r24
    23c4:	22 0f       	add	r18, r18
    23c6:	33 1f       	adc	r19, r19
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	82 0f       	add	r24, r18
    23ce:	93 1f       	adc	r25, r19
    23d0:	84 0f       	add	r24, r20
    23d2:	95 1f       	adc	r25, r21
    23d4:	fc 01       	movw	r30, r24
    23d6:	ed 53       	subi	r30, 0x3D	; 61
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	60 83       	st	Z, r22
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <movements+0x350>
				}
				else x=0;
    23de:	10 92 6c 00 	sts	0x006C, r1
				if(ArrayOfFlags[y][x]==1 && Field[y][x]==head)//Crash condition
    23e2:	80 91 6d 00 	lds	r24, 0x006D
    23e6:	28 2f       	mov	r18, r24
    23e8:	33 27       	eor	r19, r19
    23ea:	27 fd       	sbrc	r18, 7
    23ec:	30 95       	com	r19
    23ee:	80 91 6c 00 	lds	r24, 0x006C
    23f2:	48 2f       	mov	r20, r24
    23f4:	55 27       	eor	r21, r21
    23f6:	47 fd       	sbrc	r20, 7
    23f8:	50 95       	com	r21
    23fa:	c9 01       	movw	r24, r18
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	9c 01       	movw	r18, r24
    2402:	22 0f       	add	r18, r18
    2404:	33 1f       	adc	r19, r19
    2406:	22 0f       	add	r18, r18
    2408:	33 1f       	adc	r19, r19
    240a:	82 0f       	add	r24, r18
    240c:	93 1f       	adc	r25, r19
    240e:	84 0f       	add	r24, r20
    2410:	95 1f       	adc	r25, r21
    2412:	fc 01       	movw	r30, r24
    2414:	ee 58       	subi	r30, 0x8E	; 142
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	80 81       	ld	r24, Z
    241a:	81 30       	cpi	r24, 0x01	; 1
    241c:	09 f5       	brne	.+66     	; 0x2460 <movements+0x3ce>
    241e:	80 91 6d 00 	lds	r24, 0x006D
    2422:	28 2f       	mov	r18, r24
    2424:	33 27       	eor	r19, r19
    2426:	27 fd       	sbrc	r18, 7
    2428:	30 95       	com	r19
    242a:	80 91 6c 00 	lds	r24, 0x006C
    242e:	48 2f       	mov	r20, r24
    2430:	55 27       	eor	r21, r21
    2432:	47 fd       	sbrc	r20, 7
    2434:	50 95       	com	r21
    2436:	c9 01       	movw	r24, r18
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	9c 01       	movw	r18, r24
    243e:	22 0f       	add	r18, r18
    2440:	33 1f       	adc	r19, r19
    2442:	22 0f       	add	r18, r18
    2444:	33 1f       	adc	r19, r19
    2446:	82 0f       	add	r24, r18
    2448:	93 1f       	adc	r25, r19
    244a:	84 0f       	add	r24, r20
    244c:	95 1f       	adc	r25, r21
    244e:	fc 01       	movw	r30, r24
    2450:	ed 53       	subi	r30, 0x3D	; 61
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	90 81       	ld	r25, Z
    2456:	80 91 68 00 	lds	r24, 0x0068
    245a:	98 17       	cp	r25, r24
    245c:	09 f4       	brne	.+2      	; 0x2460 <movements+0x3ce>
    245e:	ff cf       	rjmp	.-2      	; 0x245e <movements+0x3cc>
				{
					while(1)
					{
					}
				}
				ButtonReminder=button;//for continues movements
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	80 93 71 00 	sts	0x0071, r24
		}
	if(button==7)
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	87 30       	cpi	r24, 0x07	; 7
    246a:	09 f0       	breq	.+2      	; 0x246e <movements+0x3dc>
    246c:	9b c0       	rjmp	.+310    	; 0x25a4 <movements+0x512>
		{
				x++;
    246e:	80 91 6c 00 	lds	r24, 0x006C
    2472:	8f 5f       	subi	r24, 0xFF	; 255
    2474:	80 93 6c 00 	sts	0x006C, r24
				if (Field[y][x]==1)
    2478:	80 91 6d 00 	lds	r24, 0x006D
    247c:	28 2f       	mov	r18, r24
    247e:	33 27       	eor	r19, r19
    2480:	27 fd       	sbrc	r18, 7
    2482:	30 95       	com	r19
    2484:	80 91 6c 00 	lds	r24, 0x006C
    2488:	48 2f       	mov	r20, r24
    248a:	55 27       	eor	r21, r21
    248c:	47 fd       	sbrc	r20, 7
    248e:	50 95       	com	r21
    2490:	c9 01       	movw	r24, r18
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	9c 01       	movw	r18, r24
    2498:	22 0f       	add	r18, r18
    249a:	33 1f       	adc	r19, r19
    249c:	22 0f       	add	r18, r18
    249e:	33 1f       	adc	r19, r19
    24a0:	82 0f       	add	r24, r18
    24a2:	93 1f       	adc	r25, r19
    24a4:	84 0f       	add	r24, r20
    24a6:	95 1f       	adc	r25, r21
    24a8:	fc 01       	movw	r30, r24
    24aa:	ed 53       	subi	r30, 0x3D	; 61
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	80 81       	ld	r24, Z
    24b0:	81 30       	cpi	r24, 0x01	; 1
    24b2:	21 f4       	brne	.+8      	; 0x24bc <movements+0x42a>
				{
					foodflag=1;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	80 93 6f 00 	sts	0x006F, r24
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <movements+0x42e>
				}
				else
				{
					foodflag=0;
    24bc:	10 92 6f 00 	sts	0x006F, r1
				}
				if(x<10)
    24c0:	80 91 6c 00 	lds	r24, 0x006C
    24c4:	8a 30       	cpi	r24, 0x0A	; 10
    24c6:	4c f5       	brge	.+82     	; 0x251a <movements+0x488>
				{
					/*lazm el tail++ wel head ++ ykono gowa 3shan my3ml assignation mn bra w tetb3 fel
					 * cgr editor*/
					tail++;
    24c8:	80 91 69 00 	lds	r24, 0x0069
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	80 93 69 00 	sts	0x0069, r24
					head++;
    24d2:	80 91 68 00 	lds	r24, 0x0068
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	80 93 68 00 	sts	0x0068, r24
					Field[y][x]=head;
    24dc:	80 91 6d 00 	lds	r24, 0x006D
    24e0:	28 2f       	mov	r18, r24
    24e2:	33 27       	eor	r19, r19
    24e4:	27 fd       	sbrc	r18, 7
    24e6:	30 95       	com	r19
    24e8:	80 91 6c 00 	lds	r24, 0x006C
    24ec:	48 2f       	mov	r20, r24
    24ee:	55 27       	eor	r21, r21
    24f0:	47 fd       	sbrc	r20, 7
    24f2:	50 95       	com	r21
    24f4:	60 91 68 00 	lds	r22, 0x0068
    24f8:	c9 01       	movw	r24, r18
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	9c 01       	movw	r18, r24
    2500:	22 0f       	add	r18, r18
    2502:	33 1f       	adc	r19, r19
    2504:	22 0f       	add	r18, r18
    2506:	33 1f       	adc	r19, r19
    2508:	82 0f       	add	r24, r18
    250a:	93 1f       	adc	r25, r19
    250c:	84 0f       	add	r24, r20
    250e:	95 1f       	adc	r25, r21
    2510:	fc 01       	movw	r30, r24
    2512:	ed 53       	subi	r30, 0x3D	; 61
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	60 83       	st	Z, r22
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <movements+0x48e>
				}
				else x=9;
    251a:	89 e0       	ldi	r24, 0x09	; 9
    251c:	80 93 6c 00 	sts	0x006C, r24
				if(ArrayOfFlags[y][x]==1 && Field[y][x]==head)//Crash condition
    2520:	80 91 6d 00 	lds	r24, 0x006D
    2524:	28 2f       	mov	r18, r24
    2526:	33 27       	eor	r19, r19
    2528:	27 fd       	sbrc	r18, 7
    252a:	30 95       	com	r19
    252c:	80 91 6c 00 	lds	r24, 0x006C
    2530:	48 2f       	mov	r20, r24
    2532:	55 27       	eor	r21, r21
    2534:	47 fd       	sbrc	r20, 7
    2536:	50 95       	com	r21
    2538:	c9 01       	movw	r24, r18
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	9c 01       	movw	r18, r24
    2540:	22 0f       	add	r18, r18
    2542:	33 1f       	adc	r19, r19
    2544:	22 0f       	add	r18, r18
    2546:	33 1f       	adc	r19, r19
    2548:	82 0f       	add	r24, r18
    254a:	93 1f       	adc	r25, r19
    254c:	84 0f       	add	r24, r20
    254e:	95 1f       	adc	r25, r21
    2550:	fc 01       	movw	r30, r24
    2552:	ee 58       	subi	r30, 0x8E	; 142
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	81 30       	cpi	r24, 0x01	; 1
    255a:	09 f5       	brne	.+66     	; 0x259e <movements+0x50c>
    255c:	80 91 6d 00 	lds	r24, 0x006D
    2560:	28 2f       	mov	r18, r24
    2562:	33 27       	eor	r19, r19
    2564:	27 fd       	sbrc	r18, 7
    2566:	30 95       	com	r19
    2568:	80 91 6c 00 	lds	r24, 0x006C
    256c:	48 2f       	mov	r20, r24
    256e:	55 27       	eor	r21, r21
    2570:	47 fd       	sbrc	r20, 7
    2572:	50 95       	com	r21
    2574:	c9 01       	movw	r24, r18
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	9c 01       	movw	r18, r24
    257c:	22 0f       	add	r18, r18
    257e:	33 1f       	adc	r19, r19
    2580:	22 0f       	add	r18, r18
    2582:	33 1f       	adc	r19, r19
    2584:	82 0f       	add	r24, r18
    2586:	93 1f       	adc	r25, r19
    2588:	84 0f       	add	r24, r20
    258a:	95 1f       	adc	r25, r21
    258c:	fc 01       	movw	r30, r24
    258e:	ed 53       	subi	r30, 0x3D	; 61
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	90 81       	ld	r25, Z
    2594:	80 91 68 00 	lds	r24, 0x0068
    2598:	98 17       	cp	r25, r24
    259a:	09 f4       	brne	.+2      	; 0x259e <movements+0x50c>
    259c:	ff cf       	rjmp	.-2      	; 0x259c <movements+0x50a>
				{
					while(1)
					{
					}
				}
				ButtonReminder=button;//for continues movements
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	80 93 71 00 	sts	0x0071, r24
		}


}
    25a4:	0f 90       	pop	r0
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <CGR_Editor>:

void CGR_Editor()
{
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <CGR_Editor+0x6>
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
	//LCD_CGR();
	for(i=0;i<8;i++) //I is Y and J is X (x from 0->9) (y from 0->7)
    25b6:	10 92 24 01 	sts	0x0124, r1
    25ba:	0c 94 08 20 	jmp	0x4010	; 0x4010 <CGR_Editor+0x1a64>
	{
		for(j=0;j<10;j++)
    25be:	10 92 c2 00 	sts	0x00C2, r1
    25c2:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <CGR_Editor+0x1a4e>
		{
			flag=0;
    25c6:	10 92 6e 00 	sts	0x006E, r1
			switch(j)
    25ca:	80 91 c2 00 	lds	r24, 0x00C2
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	3a 83       	std	Y+2, r19	; 0x02
    25d4:	29 83       	std	Y+1, r18	; 0x01
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	84 30       	cpi	r24, 0x04	; 4
    25dc:	91 05       	cpc	r25, r1
    25de:	09 f4       	brne	.+2      	; 0x25e2 <CGR_Editor+0x36>
    25e0:	56 c5       	rjmp	.+2732   	; 0x308e <CGR_Editor+0xae2>
    25e2:	29 81       	ldd	r18, Y+1	; 0x01
    25e4:	3a 81       	ldd	r19, Y+2	; 0x02
    25e6:	25 30       	cpi	r18, 0x05	; 5
    25e8:	31 05       	cpc	r19, r1
    25ea:	fc f4       	brge	.+62     	; 0x262a <CGR_Editor+0x7e>
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	91 05       	cpc	r25, r1
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <CGR_Editor+0x4c>
    25f6:	85 c1       	rjmp	.+778    	; 0x2902 <CGR_Editor+0x356>
    25f8:	29 81       	ldd	r18, Y+1	; 0x01
    25fa:	3a 81       	ldd	r19, Y+2	; 0x02
    25fc:	22 30       	cpi	r18, 0x02	; 2
    25fe:	31 05       	cpc	r19, r1
    2600:	34 f4       	brge	.+12     	; 0x260e <CGR_Editor+0x62>
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	9a 81       	ldd	r25, Y+2	; 0x02
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	d1 f1       	breq	.+116    	; 0x267e <CGR_Editor+0xd2>
    260a:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
    260e:	29 81       	ldd	r18, Y+1	; 0x01
    2610:	3a 81       	ldd	r19, Y+2	; 0x02
    2612:	22 30       	cpi	r18, 0x02	; 2
    2614:	31 05       	cpc	r19, r1
    2616:	09 f4       	brne	.+2      	; 0x261a <CGR_Editor+0x6e>
    2618:	b6 c2       	rjmp	.+1388   	; 0x2b86 <CGR_Editor+0x5da>
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	9a 81       	ldd	r25, Y+2	; 0x02
    261e:	83 30       	cpi	r24, 0x03	; 3
    2620:	91 05       	cpc	r25, r1
    2622:	09 f4       	brne	.+2      	; 0x2626 <CGR_Editor+0x7a>
    2624:	f2 c3       	rjmp	.+2020   	; 0x2e0a <CGR_Editor+0x85e>
    2626:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
    262a:	29 81       	ldd	r18, Y+1	; 0x01
    262c:	3a 81       	ldd	r19, Y+2	; 0x02
    262e:	27 30       	cpi	r18, 0x07	; 7
    2630:	31 05       	cpc	r19, r1
    2632:	11 f4       	brne	.+4      	; 0x2638 <CGR_Editor+0x8c>
    2634:	0c 94 1f 1c 	jmp	0x383e	; 0x383e <CGR_Editor+0x1292>
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	9a 81       	ldd	r25, Y+2	; 0x02
    263c:	88 30       	cpi	r24, 0x08	; 8
    263e:	91 05       	cpc	r25, r1
    2640:	74 f4       	brge	.+28     	; 0x265e <CGR_Editor+0xb2>
    2642:	29 81       	ldd	r18, Y+1	; 0x01
    2644:	3a 81       	ldd	r19, Y+2	; 0x02
    2646:	25 30       	cpi	r18, 0x05	; 5
    2648:	31 05       	cpc	r19, r1
    264a:	09 f4       	brne	.+2      	; 0x264e <CGR_Editor+0xa2>
    264c:	78 c6       	rjmp	.+3312   	; 0x333e <CGR_Editor+0xd92>
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	86 30       	cpi	r24, 0x06	; 6
    2654:	91 05       	cpc	r25, r1
    2656:	09 f4       	brne	.+2      	; 0x265a <CGR_Editor+0xae>
    2658:	b2 c7       	rjmp	.+3940   	; 0x35be <CGR_Editor+0x1012>
    265a:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
    265e:	29 81       	ldd	r18, Y+1	; 0x01
    2660:	3a 81       	ldd	r19, Y+2	; 0x02
    2662:	28 30       	cpi	r18, 0x08	; 8
    2664:	31 05       	cpc	r19, r1
    2666:	11 f4       	brne	.+4      	; 0x266c <CGR_Editor+0xc0>
    2668:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <CGR_Editor+0x1512>
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	89 30       	cpi	r24, 0x09	; 9
    2672:	91 05       	cpc	r25, r1
    2674:	11 f4       	brne	.+4      	; 0x267a <CGR_Editor+0xce>
    2676:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <CGR_Editor+0x1792>
    267a:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
			{
			case 0: if(Field[i][j]==head)//y3ny x=0 fel coordinate
    267e:	80 91 24 01 	lds	r24, 0x0124
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	80 91 c2 00 	lds	r24, 0x00C2
    268a:	48 2f       	mov	r20, r24
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	c9 01       	movw	r24, r18
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	9c 01       	movw	r18, r24
    2696:	22 0f       	add	r18, r18
    2698:	33 1f       	adc	r19, r19
    269a:	22 0f       	add	r18, r18
    269c:	33 1f       	adc	r19, r19
    269e:	82 0f       	add	r24, r18
    26a0:	93 1f       	adc	r25, r19
    26a2:	84 0f       	add	r24, r20
    26a4:	95 1f       	adc	r25, r21
    26a6:	fc 01       	movw	r30, r24
    26a8:	ed 53       	subi	r30, 0x3D	; 61
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	90 81       	ld	r25, Z
    26ae:	80 91 68 00 	lds	r24, 0x0068
    26b2:	98 17       	cp	r25, r24
    26b4:	41 f4       	brne	.+16     	; 0x26c6 <CGR_Editor+0x11a>
						{
							set_bit(var,4);
    26b6:	80 91 70 00 	lds	r24, 0x0070
    26ba:	80 61       	ori	r24, 0x10	; 16
    26bc:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]==tail)
    26c6:	80 91 24 01 	lds	r24, 0x0124
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	80 91 c2 00 	lds	r24, 0x00C2
    26d2:	48 2f       	mov	r20, r24
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	c9 01       	movw	r24, r18
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	9c 01       	movw	r18, r24
    26de:	22 0f       	add	r18, r18
    26e0:	33 1f       	adc	r19, r19
    26e2:	22 0f       	add	r18, r18
    26e4:	33 1f       	adc	r19, r19
    26e6:	82 0f       	add	r24, r18
    26e8:	93 1f       	adc	r25, r19
    26ea:	84 0f       	add	r24, r20
    26ec:	95 1f       	adc	r25, r21
    26ee:	fc 01       	movw	r30, r24
    26f0:	ed 53       	subi	r30, 0x3D	; 61
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	90 81       	ld	r25, Z
    26f6:	80 91 69 00 	lds	r24, 0x0069
    26fa:	98 17       	cp	r25, r24
    26fc:	09 f5       	brne	.+66     	; 0x2740 <CGR_Editor+0x194>
						{
							ArrayOfFlags[i][j]=1;
    26fe:	80 91 24 01 	lds	r24, 0x0124
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	80 91 c2 00 	lds	r24, 0x00C2
    270a:	48 2f       	mov	r20, r24
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	c9 01       	movw	r24, r18
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	9c 01       	movw	r18, r24
    2716:	22 0f       	add	r18, r18
    2718:	33 1f       	adc	r19, r19
    271a:	22 0f       	add	r18, r18
    271c:	33 1f       	adc	r19, r19
    271e:	82 0f       	add	r24, r18
    2720:	93 1f       	adc	r25, r19
    2722:	84 0f       	add	r24, r20
    2724:	95 1f       	adc	r25, r21
    2726:	fc 01       	movw	r30, r24
    2728:	ee 58       	subi	r30, 0x8E	; 142
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	80 83       	st	Z, r24
							set_bit(var,4);
    2730:	80 91 70 00 	lds	r24, 0x0070
    2734:	80 61       	ori	r24, 0x10	; 16
    2736:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]!=head && Field[i][j]>tail)
    2740:	80 91 24 01 	lds	r24, 0x0124
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	80 91 c2 00 	lds	r24, 0x00C2
    274c:	48 2f       	mov	r20, r24
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	c9 01       	movw	r24, r18
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	9c 01       	movw	r18, r24
    2758:	22 0f       	add	r18, r18
    275a:	33 1f       	adc	r19, r19
    275c:	22 0f       	add	r18, r18
    275e:	33 1f       	adc	r19, r19
    2760:	82 0f       	add	r24, r18
    2762:	93 1f       	adc	r25, r19
    2764:	84 0f       	add	r24, r20
    2766:	95 1f       	adc	r25, r21
    2768:	fc 01       	movw	r30, r24
    276a:	ed 53       	subi	r30, 0x3D	; 61
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	90 81       	ld	r25, Z
    2770:	80 91 68 00 	lds	r24, 0x0068
    2774:	98 17       	cp	r25, r24
    2776:	e9 f1       	breq	.+122    	; 0x27f2 <CGR_Editor+0x246>
    2778:	80 91 24 01 	lds	r24, 0x0124
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	80 91 c2 00 	lds	r24, 0x00C2
    2784:	48 2f       	mov	r20, r24
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	c9 01       	movw	r24, r18
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	9c 01       	movw	r18, r24
    2790:	22 0f       	add	r18, r18
    2792:	33 1f       	adc	r19, r19
    2794:	22 0f       	add	r18, r18
    2796:	33 1f       	adc	r19, r19
    2798:	82 0f       	add	r24, r18
    279a:	93 1f       	adc	r25, r19
    279c:	84 0f       	add	r24, r20
    279e:	95 1f       	adc	r25, r21
    27a0:	fc 01       	movw	r30, r24
    27a2:	ed 53       	subi	r30, 0x3D	; 61
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	90 81       	ld	r25, Z
    27a8:	80 91 69 00 	lds	r24, 0x0069
    27ac:	89 17       	cp	r24, r25
    27ae:	08 f5       	brcc	.+66     	; 0x27f2 <CGR_Editor+0x246>
						{
							ArrayOfFlags[i][j]=1;
    27b0:	80 91 24 01 	lds	r24, 0x0124
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	80 91 c2 00 	lds	r24, 0x00C2
    27bc:	48 2f       	mov	r20, r24
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	c9 01       	movw	r24, r18
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	9c 01       	movw	r18, r24
    27c8:	22 0f       	add	r18, r18
    27ca:	33 1f       	adc	r19, r19
    27cc:	22 0f       	add	r18, r18
    27ce:	33 1f       	adc	r19, r19
    27d0:	82 0f       	add	r24, r18
    27d2:	93 1f       	adc	r25, r19
    27d4:	84 0f       	add	r24, r20
    27d6:	95 1f       	adc	r25, r21
    27d8:	fc 01       	movw	r30, r24
    27da:	ee 58       	subi	r30, 0x8E	; 142
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	80 83       	st	Z, r24
							set_bit(var,4);
    27e2:	80 91 70 00 	lds	r24, 0x0070
    27e6:	80 61       	ori	r24, 0x10	; 16
    27e8:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]>0 && Field[i][j]<2)
    27f2:	80 91 24 01 	lds	r24, 0x0124
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	80 91 c2 00 	lds	r24, 0x00C2
    27fe:	48 2f       	mov	r20, r24
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	c9 01       	movw	r24, r18
    2804:	88 0f       	add	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	9c 01       	movw	r18, r24
    280a:	22 0f       	add	r18, r18
    280c:	33 1f       	adc	r19, r19
    280e:	22 0f       	add	r18, r18
    2810:	33 1f       	adc	r19, r19
    2812:	82 0f       	add	r24, r18
    2814:	93 1f       	adc	r25, r19
    2816:	84 0f       	add	r24, r20
    2818:	95 1f       	adc	r25, r21
    281a:	fc 01       	movw	r30, r24
    281c:	ed 53       	subi	r30, 0x3D	; 61
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	80 81       	ld	r24, Z
    2822:	88 23       	and	r24, r24
    2824:	11 f1       	breq	.+68     	; 0x286a <CGR_Editor+0x2be>
    2826:	80 91 24 01 	lds	r24, 0x0124
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	80 91 c2 00 	lds	r24, 0x00C2
    2832:	48 2f       	mov	r20, r24
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	c9 01       	movw	r24, r18
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	9c 01       	movw	r18, r24
    283e:	22 0f       	add	r18, r18
    2840:	33 1f       	adc	r19, r19
    2842:	22 0f       	add	r18, r18
    2844:	33 1f       	adc	r19, r19
    2846:	82 0f       	add	r24, r18
    2848:	93 1f       	adc	r25, r19
    284a:	84 0f       	add	r24, r20
    284c:	95 1f       	adc	r25, r21
    284e:	fc 01       	movw	r30, r24
    2850:	ed 53       	subi	r30, 0x3D	; 61
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	82 30       	cpi	r24, 0x02	; 2
    2858:	40 f4       	brcc	.+16     	; 0x286a <CGR_Editor+0x2be>
					{
							set_bit(var,4);
    285a:	80 91 70 00 	lds	r24, 0x0070
    285e:	80 61       	ori	r24, 0x10	; 16
    2860:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	80 93 6e 00 	sts	0x006E, r24
					}
					if(Field[i][j]==head && foodflag==1)//length increase
    286a:	80 91 24 01 	lds	r24, 0x0124
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	80 91 c2 00 	lds	r24, 0x00C2
    2876:	48 2f       	mov	r20, r24
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	c9 01       	movw	r24, r18
    287c:	88 0f       	add	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	9c 01       	movw	r18, r24
    2882:	22 0f       	add	r18, r18
    2884:	33 1f       	adc	r19, r19
    2886:	22 0f       	add	r18, r18
    2888:	33 1f       	adc	r19, r19
    288a:	82 0f       	add	r24, r18
    288c:	93 1f       	adc	r25, r19
    288e:	84 0f       	add	r24, r20
    2890:	95 1f       	adc	r25, r21
    2892:	fc 01       	movw	r30, r24
    2894:	ed 53       	subi	r30, 0x3D	; 61
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	90 81       	ld	r25, Z
    289a:	80 91 68 00 	lds	r24, 0x0068
    289e:	98 17       	cp	r25, r24
    28a0:	49 f4       	brne	.+18     	; 0x28b4 <CGR_Editor+0x308>
    28a2:	80 91 6f 00 	lds	r24, 0x006F
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	29 f4       	brne	.+10     	; 0x28b4 <CGR_Editor+0x308>
					{
						tail-=2;
    28aa:	80 91 69 00 	lds	r24, 0x0069
    28ae:	82 50       	subi	r24, 0x02	; 2
    28b0:	80 93 69 00 	sts	0x0069, r24
					}
				//	if(Field[i][j])
					/*else
						clr_bit(var,4);*/
					if(flag==1)
    28b4:	80 91 6e 00 	lds	r24, 0x006E
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	21 f4       	brne	.+8      	; 0x28c4 <CGR_Editor+0x318>
					{
						flag=0;
    28bc:	10 92 6e 00 	sts	0x006E, r1
    28c0:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
					else
					{
						ArrayOfFlags[i][j]=0;
    28c4:	80 91 24 01 	lds	r24, 0x0124
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	80 91 c2 00 	lds	r24, 0x00C2
    28d0:	48 2f       	mov	r20, r24
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	c9 01       	movw	r24, r18
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	9c 01       	movw	r18, r24
    28dc:	22 0f       	add	r18, r18
    28de:	33 1f       	adc	r19, r19
    28e0:	22 0f       	add	r18, r18
    28e2:	33 1f       	adc	r19, r19
    28e4:	82 0f       	add	r24, r18
    28e6:	93 1f       	adc	r25, r19
    28e8:	84 0f       	add	r24, r20
    28ea:	95 1f       	adc	r25, r21
    28ec:	fc 01       	movw	r30, r24
    28ee:	ee 58       	subi	r30, 0x8E	; 142
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	10 82       	st	Z, r1
						clr_bit(var,4);
    28f4:	80 91 70 00 	lds	r24, 0x0070
    28f8:	8f 7e       	andi	r24, 0xEF	; 239
    28fa:	80 93 70 00 	sts	0x0070, r24
    28fe:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
					else
						clr_bit(var,0);
					Array[i+8]=var;
					var=0b00000000;
					break;*/
			case 1: if(Field[i][j]==head)//y3ny x=0 fel coordinate
    2902:	80 91 24 01 	lds	r24, 0x0124
    2906:	28 2f       	mov	r18, r24
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	80 91 c2 00 	lds	r24, 0x00C2
    290e:	48 2f       	mov	r20, r24
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	c9 01       	movw	r24, r18
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	9c 01       	movw	r18, r24
    291a:	22 0f       	add	r18, r18
    291c:	33 1f       	adc	r19, r19
    291e:	22 0f       	add	r18, r18
    2920:	33 1f       	adc	r19, r19
    2922:	82 0f       	add	r24, r18
    2924:	93 1f       	adc	r25, r19
    2926:	84 0f       	add	r24, r20
    2928:	95 1f       	adc	r25, r21
    292a:	fc 01       	movw	r30, r24
    292c:	ed 53       	subi	r30, 0x3D	; 61
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	90 81       	ld	r25, Z
    2932:	80 91 68 00 	lds	r24, 0x0068
    2936:	98 17       	cp	r25, r24
    2938:	41 f4       	brne	.+16     	; 0x294a <CGR_Editor+0x39e>
						{
							set_bit(var,3);
    293a:	80 91 70 00 	lds	r24, 0x0070
    293e:	88 60       	ori	r24, 0x08	; 8
    2940:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]==tail)
    294a:	80 91 24 01 	lds	r24, 0x0124
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	80 91 c2 00 	lds	r24, 0x00C2
    2956:	48 2f       	mov	r20, r24
    2958:	50 e0       	ldi	r21, 0x00	; 0
    295a:	c9 01       	movw	r24, r18
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	9c 01       	movw	r18, r24
    2962:	22 0f       	add	r18, r18
    2964:	33 1f       	adc	r19, r19
    2966:	22 0f       	add	r18, r18
    2968:	33 1f       	adc	r19, r19
    296a:	82 0f       	add	r24, r18
    296c:	93 1f       	adc	r25, r19
    296e:	84 0f       	add	r24, r20
    2970:	95 1f       	adc	r25, r21
    2972:	fc 01       	movw	r30, r24
    2974:	ed 53       	subi	r30, 0x3D	; 61
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	90 81       	ld	r25, Z
    297a:	80 91 69 00 	lds	r24, 0x0069
    297e:	98 17       	cp	r25, r24
    2980:	09 f5       	brne	.+66     	; 0x29c4 <CGR_Editor+0x418>
						{
							ArrayOfFlags[i][j]=1;
    2982:	80 91 24 01 	lds	r24, 0x0124
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	80 91 c2 00 	lds	r24, 0x00C2
    298e:	48 2f       	mov	r20, r24
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	c9 01       	movw	r24, r18
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	9c 01       	movw	r18, r24
    299a:	22 0f       	add	r18, r18
    299c:	33 1f       	adc	r19, r19
    299e:	22 0f       	add	r18, r18
    29a0:	33 1f       	adc	r19, r19
    29a2:	82 0f       	add	r24, r18
    29a4:	93 1f       	adc	r25, r19
    29a6:	84 0f       	add	r24, r20
    29a8:	95 1f       	adc	r25, r21
    29aa:	fc 01       	movw	r30, r24
    29ac:	ee 58       	subi	r30, 0x8E	; 142
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	80 83       	st	Z, r24
							set_bit(var,3);
    29b4:	80 91 70 00 	lds	r24, 0x0070
    29b8:	88 60       	ori	r24, 0x08	; 8
    29ba:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]!=head && Field[i][j]>tail)
    29c4:	80 91 24 01 	lds	r24, 0x0124
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	80 91 c2 00 	lds	r24, 0x00C2
    29d0:	48 2f       	mov	r20, r24
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	c9 01       	movw	r24, r18
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	9c 01       	movw	r18, r24
    29dc:	22 0f       	add	r18, r18
    29de:	33 1f       	adc	r19, r19
    29e0:	22 0f       	add	r18, r18
    29e2:	33 1f       	adc	r19, r19
    29e4:	82 0f       	add	r24, r18
    29e6:	93 1f       	adc	r25, r19
    29e8:	84 0f       	add	r24, r20
    29ea:	95 1f       	adc	r25, r21
    29ec:	fc 01       	movw	r30, r24
    29ee:	ed 53       	subi	r30, 0x3D	; 61
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	90 81       	ld	r25, Z
    29f4:	80 91 68 00 	lds	r24, 0x0068
    29f8:	98 17       	cp	r25, r24
    29fa:	e9 f1       	breq	.+122    	; 0x2a76 <CGR_Editor+0x4ca>
    29fc:	80 91 24 01 	lds	r24, 0x0124
    2a00:	28 2f       	mov	r18, r24
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	80 91 c2 00 	lds	r24, 0x00C2
    2a08:	48 2f       	mov	r20, r24
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	c9 01       	movw	r24, r18
    2a0e:	88 0f       	add	r24, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	9c 01       	movw	r18, r24
    2a14:	22 0f       	add	r18, r18
    2a16:	33 1f       	adc	r19, r19
    2a18:	22 0f       	add	r18, r18
    2a1a:	33 1f       	adc	r19, r19
    2a1c:	82 0f       	add	r24, r18
    2a1e:	93 1f       	adc	r25, r19
    2a20:	84 0f       	add	r24, r20
    2a22:	95 1f       	adc	r25, r21
    2a24:	fc 01       	movw	r30, r24
    2a26:	ed 53       	subi	r30, 0x3D	; 61
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	90 81       	ld	r25, Z
    2a2c:	80 91 69 00 	lds	r24, 0x0069
    2a30:	89 17       	cp	r24, r25
    2a32:	08 f5       	brcc	.+66     	; 0x2a76 <CGR_Editor+0x4ca>
						{
							ArrayOfFlags[i][j]=1;
    2a34:	80 91 24 01 	lds	r24, 0x0124
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	80 91 c2 00 	lds	r24, 0x00C2
    2a40:	48 2f       	mov	r20, r24
    2a42:	50 e0       	ldi	r21, 0x00	; 0
    2a44:	c9 01       	movw	r24, r18
    2a46:	88 0f       	add	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	22 0f       	add	r18, r18
    2a4e:	33 1f       	adc	r19, r19
    2a50:	22 0f       	add	r18, r18
    2a52:	33 1f       	adc	r19, r19
    2a54:	82 0f       	add	r24, r18
    2a56:	93 1f       	adc	r25, r19
    2a58:	84 0f       	add	r24, r20
    2a5a:	95 1f       	adc	r25, r21
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	ee 58       	subi	r30, 0x8E	; 142
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	80 83       	st	Z, r24
							set_bit(var,3);
    2a66:	80 91 70 00 	lds	r24, 0x0070
    2a6a:	88 60       	ori	r24, 0x08	; 8
    2a6c:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]>0 && Field[i][j]<2 )
    2a76:	80 91 24 01 	lds	r24, 0x0124
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	80 91 c2 00 	lds	r24, 0x00C2
    2a82:	48 2f       	mov	r20, r24
    2a84:	50 e0       	ldi	r21, 0x00	; 0
    2a86:	c9 01       	movw	r24, r18
    2a88:	88 0f       	add	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	9c 01       	movw	r18, r24
    2a8e:	22 0f       	add	r18, r18
    2a90:	33 1f       	adc	r19, r19
    2a92:	22 0f       	add	r18, r18
    2a94:	33 1f       	adc	r19, r19
    2a96:	82 0f       	add	r24, r18
    2a98:	93 1f       	adc	r25, r19
    2a9a:	84 0f       	add	r24, r20
    2a9c:	95 1f       	adc	r25, r21
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	ed 53       	subi	r30, 0x3D	; 61
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	88 23       	and	r24, r24
    2aa8:	11 f1       	breq	.+68     	; 0x2aee <CGR_Editor+0x542>
    2aaa:	80 91 24 01 	lds	r24, 0x0124
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	80 91 c2 00 	lds	r24, 0x00C2
    2ab6:	48 2f       	mov	r20, r24
    2ab8:	50 e0       	ldi	r21, 0x00	; 0
    2aba:	c9 01       	movw	r24, r18
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	9c 01       	movw	r18, r24
    2ac2:	22 0f       	add	r18, r18
    2ac4:	33 1f       	adc	r19, r19
    2ac6:	22 0f       	add	r18, r18
    2ac8:	33 1f       	adc	r19, r19
    2aca:	82 0f       	add	r24, r18
    2acc:	93 1f       	adc	r25, r19
    2ace:	84 0f       	add	r24, r20
    2ad0:	95 1f       	adc	r25, r21
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	ed 53       	subi	r30, 0x3D	; 61
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	82 30       	cpi	r24, 0x02	; 2
    2adc:	40 f4       	brcc	.+16     	; 0x2aee <CGR_Editor+0x542>
					{
							set_bit(var,4);
    2ade:	80 91 70 00 	lds	r24, 0x0070
    2ae2:	80 61       	ori	r24, 0x10	; 16
    2ae4:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	80 93 6e 00 	sts	0x006E, r24
					}
					if(Field[i][j]==head && foodflag==1)
    2aee:	80 91 24 01 	lds	r24, 0x0124
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	80 91 c2 00 	lds	r24, 0x00C2
    2afa:	48 2f       	mov	r20, r24
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	c9 01       	movw	r24, r18
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	9c 01       	movw	r18, r24
    2b06:	22 0f       	add	r18, r18
    2b08:	33 1f       	adc	r19, r19
    2b0a:	22 0f       	add	r18, r18
    2b0c:	33 1f       	adc	r19, r19
    2b0e:	82 0f       	add	r24, r18
    2b10:	93 1f       	adc	r25, r19
    2b12:	84 0f       	add	r24, r20
    2b14:	95 1f       	adc	r25, r21
    2b16:	fc 01       	movw	r30, r24
    2b18:	ed 53       	subi	r30, 0x3D	; 61
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	90 81       	ld	r25, Z
    2b1e:	80 91 68 00 	lds	r24, 0x0068
    2b22:	98 17       	cp	r25, r24
    2b24:	49 f4       	brne	.+18     	; 0x2b38 <CGR_Editor+0x58c>
    2b26:	80 91 6f 00 	lds	r24, 0x006F
    2b2a:	81 30       	cpi	r24, 0x01	; 1
    2b2c:	29 f4       	brne	.+10     	; 0x2b38 <CGR_Editor+0x58c>
					{
						tail-=2;
    2b2e:	80 91 69 00 	lds	r24, 0x0069
    2b32:	82 50       	subi	r24, 0x02	; 2
    2b34:	80 93 69 00 	sts	0x0069, r24
					}
					/*else
						clr_bit(var,4);*/
					if(flag==1)
    2b38:	80 91 6e 00 	lds	r24, 0x006E
    2b3c:	81 30       	cpi	r24, 0x01	; 1
    2b3e:	21 f4       	brne	.+8      	; 0x2b48 <CGR_Editor+0x59c>
					{
						flag=0;
    2b40:	10 92 6e 00 	sts	0x006E, r1
    2b44:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
					else
					{
						ArrayOfFlags[i][j]=0;
    2b48:	80 91 24 01 	lds	r24, 0x0124
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	80 91 c2 00 	lds	r24, 0x00C2
    2b54:	48 2f       	mov	r20, r24
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	c9 01       	movw	r24, r18
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	9c 01       	movw	r18, r24
    2b60:	22 0f       	add	r18, r18
    2b62:	33 1f       	adc	r19, r19
    2b64:	22 0f       	add	r18, r18
    2b66:	33 1f       	adc	r19, r19
    2b68:	82 0f       	add	r24, r18
    2b6a:	93 1f       	adc	r25, r19
    2b6c:	84 0f       	add	r24, r20
    2b6e:	95 1f       	adc	r25, r21
    2b70:	fc 01       	movw	r30, r24
    2b72:	ee 58       	subi	r30, 0x8E	; 142
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	10 82       	st	Z, r1
						clr_bit(var,3);
    2b78:	80 91 70 00 	lds	r24, 0x0070
    2b7c:	87 7f       	andi	r24, 0xF7	; 247
    2b7e:	80 93 70 00 	sts	0x0070, r24
    2b82:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
			case 2: if(Field[i][j]==head)//y3ny x=0 fel coordinate
    2b86:	80 91 24 01 	lds	r24, 0x0124
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	80 91 c2 00 	lds	r24, 0x00C2
    2b92:	48 2f       	mov	r20, r24
    2b94:	50 e0       	ldi	r21, 0x00	; 0
    2b96:	c9 01       	movw	r24, r18
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	9c 01       	movw	r18, r24
    2b9e:	22 0f       	add	r18, r18
    2ba0:	33 1f       	adc	r19, r19
    2ba2:	22 0f       	add	r18, r18
    2ba4:	33 1f       	adc	r19, r19
    2ba6:	82 0f       	add	r24, r18
    2ba8:	93 1f       	adc	r25, r19
    2baa:	84 0f       	add	r24, r20
    2bac:	95 1f       	adc	r25, r21
    2bae:	fc 01       	movw	r30, r24
    2bb0:	ed 53       	subi	r30, 0x3D	; 61
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	90 81       	ld	r25, Z
    2bb6:	80 91 68 00 	lds	r24, 0x0068
    2bba:	98 17       	cp	r25, r24
    2bbc:	41 f4       	brne	.+16     	; 0x2bce <CGR_Editor+0x622>
						{
							set_bit(var,2);
    2bbe:	80 91 70 00 	lds	r24, 0x0070
    2bc2:	84 60       	ori	r24, 0x04	; 4
    2bc4:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]==tail)
    2bce:	80 91 24 01 	lds	r24, 0x0124
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	80 91 c2 00 	lds	r24, 0x00C2
    2bda:	48 2f       	mov	r20, r24
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	c9 01       	movw	r24, r18
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	9c 01       	movw	r18, r24
    2be6:	22 0f       	add	r18, r18
    2be8:	33 1f       	adc	r19, r19
    2bea:	22 0f       	add	r18, r18
    2bec:	33 1f       	adc	r19, r19
    2bee:	82 0f       	add	r24, r18
    2bf0:	93 1f       	adc	r25, r19
    2bf2:	84 0f       	add	r24, r20
    2bf4:	95 1f       	adc	r25, r21
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	ed 53       	subi	r30, 0x3D	; 61
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	90 81       	ld	r25, Z
    2bfe:	80 91 69 00 	lds	r24, 0x0069
    2c02:	98 17       	cp	r25, r24
    2c04:	09 f5       	brne	.+66     	; 0x2c48 <CGR_Editor+0x69c>
						{
							ArrayOfFlags[i][j]=1;
    2c06:	80 91 24 01 	lds	r24, 0x0124
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	80 91 c2 00 	lds	r24, 0x00C2
    2c12:	48 2f       	mov	r20, r24
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	c9 01       	movw	r24, r18
    2c18:	88 0f       	add	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	9c 01       	movw	r18, r24
    2c1e:	22 0f       	add	r18, r18
    2c20:	33 1f       	adc	r19, r19
    2c22:	22 0f       	add	r18, r18
    2c24:	33 1f       	adc	r19, r19
    2c26:	82 0f       	add	r24, r18
    2c28:	93 1f       	adc	r25, r19
    2c2a:	84 0f       	add	r24, r20
    2c2c:	95 1f       	adc	r25, r21
    2c2e:	fc 01       	movw	r30, r24
    2c30:	ee 58       	subi	r30, 0x8E	; 142
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	80 83       	st	Z, r24
							set_bit(var,2);
    2c38:	80 91 70 00 	lds	r24, 0x0070
    2c3c:	84 60       	ori	r24, 0x04	; 4
    2c3e:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]!=head && Field[i][j]>tail)
    2c48:	80 91 24 01 	lds	r24, 0x0124
    2c4c:	28 2f       	mov	r18, r24
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	80 91 c2 00 	lds	r24, 0x00C2
    2c54:	48 2f       	mov	r20, r24
    2c56:	50 e0       	ldi	r21, 0x00	; 0
    2c58:	c9 01       	movw	r24, r18
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	9c 01       	movw	r18, r24
    2c60:	22 0f       	add	r18, r18
    2c62:	33 1f       	adc	r19, r19
    2c64:	22 0f       	add	r18, r18
    2c66:	33 1f       	adc	r19, r19
    2c68:	82 0f       	add	r24, r18
    2c6a:	93 1f       	adc	r25, r19
    2c6c:	84 0f       	add	r24, r20
    2c6e:	95 1f       	adc	r25, r21
    2c70:	fc 01       	movw	r30, r24
    2c72:	ed 53       	subi	r30, 0x3D	; 61
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	90 81       	ld	r25, Z
    2c78:	80 91 68 00 	lds	r24, 0x0068
    2c7c:	98 17       	cp	r25, r24
    2c7e:	e9 f1       	breq	.+122    	; 0x2cfa <CGR_Editor+0x74e>
    2c80:	80 91 24 01 	lds	r24, 0x0124
    2c84:	28 2f       	mov	r18, r24
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	80 91 c2 00 	lds	r24, 0x00C2
    2c8c:	48 2f       	mov	r20, r24
    2c8e:	50 e0       	ldi	r21, 0x00	; 0
    2c90:	c9 01       	movw	r24, r18
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	9c 01       	movw	r18, r24
    2c98:	22 0f       	add	r18, r18
    2c9a:	33 1f       	adc	r19, r19
    2c9c:	22 0f       	add	r18, r18
    2c9e:	33 1f       	adc	r19, r19
    2ca0:	82 0f       	add	r24, r18
    2ca2:	93 1f       	adc	r25, r19
    2ca4:	84 0f       	add	r24, r20
    2ca6:	95 1f       	adc	r25, r21
    2ca8:	fc 01       	movw	r30, r24
    2caa:	ed 53       	subi	r30, 0x3D	; 61
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	90 81       	ld	r25, Z
    2cb0:	80 91 69 00 	lds	r24, 0x0069
    2cb4:	89 17       	cp	r24, r25
    2cb6:	08 f5       	brcc	.+66     	; 0x2cfa <CGR_Editor+0x74e>
						{
							ArrayOfFlags[i][j]=1;
    2cb8:	80 91 24 01 	lds	r24, 0x0124
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	80 91 c2 00 	lds	r24, 0x00C2
    2cc4:	48 2f       	mov	r20, r24
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	c9 01       	movw	r24, r18
    2cca:	88 0f       	add	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	9c 01       	movw	r18, r24
    2cd0:	22 0f       	add	r18, r18
    2cd2:	33 1f       	adc	r19, r19
    2cd4:	22 0f       	add	r18, r18
    2cd6:	33 1f       	adc	r19, r19
    2cd8:	82 0f       	add	r24, r18
    2cda:	93 1f       	adc	r25, r19
    2cdc:	84 0f       	add	r24, r20
    2cde:	95 1f       	adc	r25, r21
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	ee 58       	subi	r30, 0x8E	; 142
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	80 83       	st	Z, r24
							set_bit(var,2);
    2cea:	80 91 70 00 	lds	r24, 0x0070
    2cee:	84 60       	ori	r24, 0x04	; 4
    2cf0:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]>0 && Field[i][j]<2 )
    2cfa:	80 91 24 01 	lds	r24, 0x0124
    2cfe:	28 2f       	mov	r18, r24
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	80 91 c2 00 	lds	r24, 0x00C2
    2d06:	48 2f       	mov	r20, r24
    2d08:	50 e0       	ldi	r21, 0x00	; 0
    2d0a:	c9 01       	movw	r24, r18
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	9c 01       	movw	r18, r24
    2d12:	22 0f       	add	r18, r18
    2d14:	33 1f       	adc	r19, r19
    2d16:	22 0f       	add	r18, r18
    2d18:	33 1f       	adc	r19, r19
    2d1a:	82 0f       	add	r24, r18
    2d1c:	93 1f       	adc	r25, r19
    2d1e:	84 0f       	add	r24, r20
    2d20:	95 1f       	adc	r25, r21
    2d22:	fc 01       	movw	r30, r24
    2d24:	ed 53       	subi	r30, 0x3D	; 61
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	88 23       	and	r24, r24
    2d2c:	11 f1       	breq	.+68     	; 0x2d72 <CGR_Editor+0x7c6>
    2d2e:	80 91 24 01 	lds	r24, 0x0124
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	80 91 c2 00 	lds	r24, 0x00C2
    2d3a:	48 2f       	mov	r20, r24
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	c9 01       	movw	r24, r18
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	9c 01       	movw	r18, r24
    2d46:	22 0f       	add	r18, r18
    2d48:	33 1f       	adc	r19, r19
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	82 0f       	add	r24, r18
    2d50:	93 1f       	adc	r25, r19
    2d52:	84 0f       	add	r24, r20
    2d54:	95 1f       	adc	r25, r21
    2d56:	fc 01       	movw	r30, r24
    2d58:	ed 53       	subi	r30, 0x3D	; 61
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	82 30       	cpi	r24, 0x02	; 2
    2d60:	40 f4       	brcc	.+16     	; 0x2d72 <CGR_Editor+0x7c6>
					{
							set_bit(var,4);
    2d62:	80 91 70 00 	lds	r24, 0x0070
    2d66:	80 61       	ori	r24, 0x10	; 16
    2d68:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	80 93 6e 00 	sts	0x006E, r24
					}
					if(Field[i][j]==head && foodflag==1)
    2d72:	80 91 24 01 	lds	r24, 0x0124
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	80 91 c2 00 	lds	r24, 0x00C2
    2d7e:	48 2f       	mov	r20, r24
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	c9 01       	movw	r24, r18
    2d84:	88 0f       	add	r24, r24
    2d86:	99 1f       	adc	r25, r25
    2d88:	9c 01       	movw	r18, r24
    2d8a:	22 0f       	add	r18, r18
    2d8c:	33 1f       	adc	r19, r19
    2d8e:	22 0f       	add	r18, r18
    2d90:	33 1f       	adc	r19, r19
    2d92:	82 0f       	add	r24, r18
    2d94:	93 1f       	adc	r25, r19
    2d96:	84 0f       	add	r24, r20
    2d98:	95 1f       	adc	r25, r21
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	ed 53       	subi	r30, 0x3D	; 61
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	90 81       	ld	r25, Z
    2da2:	80 91 68 00 	lds	r24, 0x0068
    2da6:	98 17       	cp	r25, r24
    2da8:	49 f4       	brne	.+18     	; 0x2dbc <CGR_Editor+0x810>
    2daa:	80 91 6f 00 	lds	r24, 0x006F
    2dae:	81 30       	cpi	r24, 0x01	; 1
    2db0:	29 f4       	brne	.+10     	; 0x2dbc <CGR_Editor+0x810>
					{
						tail-=2;
    2db2:	80 91 69 00 	lds	r24, 0x0069
    2db6:	82 50       	subi	r24, 0x02	; 2
    2db8:	80 93 69 00 	sts	0x0069, r24
					}
					/*else
						clr_bit(var,4);*/
					if(flag==1)
    2dbc:	80 91 6e 00 	lds	r24, 0x006E
    2dc0:	81 30       	cpi	r24, 0x01	; 1
    2dc2:	21 f4       	brne	.+8      	; 0x2dcc <CGR_Editor+0x820>
					{
						flag=0;
    2dc4:	10 92 6e 00 	sts	0x006E, r1
    2dc8:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
					else
					{
						ArrayOfFlags[i][j]=0;
    2dcc:	80 91 24 01 	lds	r24, 0x0124
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	80 91 c2 00 	lds	r24, 0x00C2
    2dd8:	48 2f       	mov	r20, r24
    2dda:	50 e0       	ldi	r21, 0x00	; 0
    2ddc:	c9 01       	movw	r24, r18
    2dde:	88 0f       	add	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	9c 01       	movw	r18, r24
    2de4:	22 0f       	add	r18, r18
    2de6:	33 1f       	adc	r19, r19
    2de8:	22 0f       	add	r18, r18
    2dea:	33 1f       	adc	r19, r19
    2dec:	82 0f       	add	r24, r18
    2dee:	93 1f       	adc	r25, r19
    2df0:	84 0f       	add	r24, r20
    2df2:	95 1f       	adc	r25, r21
    2df4:	fc 01       	movw	r30, r24
    2df6:	ee 58       	subi	r30, 0x8E	; 142
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	10 82       	st	Z, r1
						clr_bit(var,2);
    2dfc:	80 91 70 00 	lds	r24, 0x0070
    2e00:	8b 7f       	andi	r24, 0xFB	; 251
    2e02:	80 93 70 00 	sts	0x0070, r24
    2e06:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
			case 3: if(Field[i][j]==head)//y3ny x=0 fel coordinate
    2e0a:	80 91 24 01 	lds	r24, 0x0124
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	80 91 c2 00 	lds	r24, 0x00C2
    2e16:	48 2f       	mov	r20, r24
    2e18:	50 e0       	ldi	r21, 0x00	; 0
    2e1a:	c9 01       	movw	r24, r18
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	9c 01       	movw	r18, r24
    2e22:	22 0f       	add	r18, r18
    2e24:	33 1f       	adc	r19, r19
    2e26:	22 0f       	add	r18, r18
    2e28:	33 1f       	adc	r19, r19
    2e2a:	82 0f       	add	r24, r18
    2e2c:	93 1f       	adc	r25, r19
    2e2e:	84 0f       	add	r24, r20
    2e30:	95 1f       	adc	r25, r21
    2e32:	fc 01       	movw	r30, r24
    2e34:	ed 53       	subi	r30, 0x3D	; 61
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	90 81       	ld	r25, Z
    2e3a:	80 91 68 00 	lds	r24, 0x0068
    2e3e:	98 17       	cp	r25, r24
    2e40:	41 f4       	brne	.+16     	; 0x2e52 <CGR_Editor+0x8a6>
						{
							set_bit(var,1);
    2e42:	80 91 70 00 	lds	r24, 0x0070
    2e46:	82 60       	ori	r24, 0x02	; 2
    2e48:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]==tail)
    2e52:	80 91 24 01 	lds	r24, 0x0124
    2e56:	28 2f       	mov	r18, r24
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	80 91 c2 00 	lds	r24, 0x00C2
    2e5e:	48 2f       	mov	r20, r24
    2e60:	50 e0       	ldi	r21, 0x00	; 0
    2e62:	c9 01       	movw	r24, r18
    2e64:	88 0f       	add	r24, r24
    2e66:	99 1f       	adc	r25, r25
    2e68:	9c 01       	movw	r18, r24
    2e6a:	22 0f       	add	r18, r18
    2e6c:	33 1f       	adc	r19, r19
    2e6e:	22 0f       	add	r18, r18
    2e70:	33 1f       	adc	r19, r19
    2e72:	82 0f       	add	r24, r18
    2e74:	93 1f       	adc	r25, r19
    2e76:	84 0f       	add	r24, r20
    2e78:	95 1f       	adc	r25, r21
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	ed 53       	subi	r30, 0x3D	; 61
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	90 81       	ld	r25, Z
    2e82:	80 91 69 00 	lds	r24, 0x0069
    2e86:	98 17       	cp	r25, r24
    2e88:	09 f5       	brne	.+66     	; 0x2ecc <CGR_Editor+0x920>
						{
							ArrayOfFlags[i][j]=1;
    2e8a:	80 91 24 01 	lds	r24, 0x0124
    2e8e:	28 2f       	mov	r18, r24
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	80 91 c2 00 	lds	r24, 0x00C2
    2e96:	48 2f       	mov	r20, r24
    2e98:	50 e0       	ldi	r21, 0x00	; 0
    2e9a:	c9 01       	movw	r24, r18
    2e9c:	88 0f       	add	r24, r24
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	9c 01       	movw	r18, r24
    2ea2:	22 0f       	add	r18, r18
    2ea4:	33 1f       	adc	r19, r19
    2ea6:	22 0f       	add	r18, r18
    2ea8:	33 1f       	adc	r19, r19
    2eaa:	82 0f       	add	r24, r18
    2eac:	93 1f       	adc	r25, r19
    2eae:	84 0f       	add	r24, r20
    2eb0:	95 1f       	adc	r25, r21
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	ee 58       	subi	r30, 0x8E	; 142
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	80 83       	st	Z, r24
							set_bit(var,1);
    2ebc:	80 91 70 00 	lds	r24, 0x0070
    2ec0:	82 60       	ori	r24, 0x02	; 2
    2ec2:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]!=head && Field[i][j]>tail)
    2ecc:	80 91 24 01 	lds	r24, 0x0124
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	80 91 c2 00 	lds	r24, 0x00C2
    2ed8:	48 2f       	mov	r20, r24
    2eda:	50 e0       	ldi	r21, 0x00	; 0
    2edc:	c9 01       	movw	r24, r18
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	9c 01       	movw	r18, r24
    2ee4:	22 0f       	add	r18, r18
    2ee6:	33 1f       	adc	r19, r19
    2ee8:	22 0f       	add	r18, r18
    2eea:	33 1f       	adc	r19, r19
    2eec:	82 0f       	add	r24, r18
    2eee:	93 1f       	adc	r25, r19
    2ef0:	84 0f       	add	r24, r20
    2ef2:	95 1f       	adc	r25, r21
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	ed 53       	subi	r30, 0x3D	; 61
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	90 81       	ld	r25, Z
    2efc:	80 91 68 00 	lds	r24, 0x0068
    2f00:	98 17       	cp	r25, r24
    2f02:	e9 f1       	breq	.+122    	; 0x2f7e <CGR_Editor+0x9d2>
    2f04:	80 91 24 01 	lds	r24, 0x0124
    2f08:	28 2f       	mov	r18, r24
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	80 91 c2 00 	lds	r24, 0x00C2
    2f10:	48 2f       	mov	r20, r24
    2f12:	50 e0       	ldi	r21, 0x00	; 0
    2f14:	c9 01       	movw	r24, r18
    2f16:	88 0f       	add	r24, r24
    2f18:	99 1f       	adc	r25, r25
    2f1a:	9c 01       	movw	r18, r24
    2f1c:	22 0f       	add	r18, r18
    2f1e:	33 1f       	adc	r19, r19
    2f20:	22 0f       	add	r18, r18
    2f22:	33 1f       	adc	r19, r19
    2f24:	82 0f       	add	r24, r18
    2f26:	93 1f       	adc	r25, r19
    2f28:	84 0f       	add	r24, r20
    2f2a:	95 1f       	adc	r25, r21
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	ed 53       	subi	r30, 0x3D	; 61
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	90 81       	ld	r25, Z
    2f34:	80 91 69 00 	lds	r24, 0x0069
    2f38:	89 17       	cp	r24, r25
    2f3a:	08 f5       	brcc	.+66     	; 0x2f7e <CGR_Editor+0x9d2>
						{
							ArrayOfFlags[i][j]=1;
    2f3c:	80 91 24 01 	lds	r24, 0x0124
    2f40:	28 2f       	mov	r18, r24
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	80 91 c2 00 	lds	r24, 0x00C2
    2f48:	48 2f       	mov	r20, r24
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
    2f4c:	c9 01       	movw	r24, r18
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	9c 01       	movw	r18, r24
    2f54:	22 0f       	add	r18, r18
    2f56:	33 1f       	adc	r19, r19
    2f58:	22 0f       	add	r18, r18
    2f5a:	33 1f       	adc	r19, r19
    2f5c:	82 0f       	add	r24, r18
    2f5e:	93 1f       	adc	r25, r19
    2f60:	84 0f       	add	r24, r20
    2f62:	95 1f       	adc	r25, r21
    2f64:	fc 01       	movw	r30, r24
    2f66:	ee 58       	subi	r30, 0x8E	; 142
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	80 83       	st	Z, r24
							set_bit(var,1);
    2f6e:	80 91 70 00 	lds	r24, 0x0070
    2f72:	82 60       	ori	r24, 0x02	; 2
    2f74:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]>0 && Field[i][j]<2 )
    2f7e:	80 91 24 01 	lds	r24, 0x0124
    2f82:	28 2f       	mov	r18, r24
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	80 91 c2 00 	lds	r24, 0x00C2
    2f8a:	48 2f       	mov	r20, r24
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	c9 01       	movw	r24, r18
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	9c 01       	movw	r18, r24
    2f96:	22 0f       	add	r18, r18
    2f98:	33 1f       	adc	r19, r19
    2f9a:	22 0f       	add	r18, r18
    2f9c:	33 1f       	adc	r19, r19
    2f9e:	82 0f       	add	r24, r18
    2fa0:	93 1f       	adc	r25, r19
    2fa2:	84 0f       	add	r24, r20
    2fa4:	95 1f       	adc	r25, r21
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	ed 53       	subi	r30, 0x3D	; 61
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 81       	ld	r24, Z
    2fae:	88 23       	and	r24, r24
    2fb0:	11 f1       	breq	.+68     	; 0x2ff6 <CGR_Editor+0xa4a>
    2fb2:	80 91 24 01 	lds	r24, 0x0124
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	80 91 c2 00 	lds	r24, 0x00C2
    2fbe:	48 2f       	mov	r20, r24
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	c9 01       	movw	r24, r18
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	9c 01       	movw	r18, r24
    2fca:	22 0f       	add	r18, r18
    2fcc:	33 1f       	adc	r19, r19
    2fce:	22 0f       	add	r18, r18
    2fd0:	33 1f       	adc	r19, r19
    2fd2:	82 0f       	add	r24, r18
    2fd4:	93 1f       	adc	r25, r19
    2fd6:	84 0f       	add	r24, r20
    2fd8:	95 1f       	adc	r25, r21
    2fda:	fc 01       	movw	r30, r24
    2fdc:	ed 53       	subi	r30, 0x3D	; 61
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	82 30       	cpi	r24, 0x02	; 2
    2fe4:	40 f4       	brcc	.+16     	; 0x2ff6 <CGR_Editor+0xa4a>
					{
							set_bit(var,4);
    2fe6:	80 91 70 00 	lds	r24, 0x0070
    2fea:	80 61       	ori	r24, 0x10	; 16
    2fec:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	80 93 6e 00 	sts	0x006E, r24
					}
					if(Field[i][j]==head && foodflag==1)
    2ff6:	80 91 24 01 	lds	r24, 0x0124
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	80 91 c2 00 	lds	r24, 0x00C2
    3002:	48 2f       	mov	r20, r24
    3004:	50 e0       	ldi	r21, 0x00	; 0
    3006:	c9 01       	movw	r24, r18
    3008:	88 0f       	add	r24, r24
    300a:	99 1f       	adc	r25, r25
    300c:	9c 01       	movw	r18, r24
    300e:	22 0f       	add	r18, r18
    3010:	33 1f       	adc	r19, r19
    3012:	22 0f       	add	r18, r18
    3014:	33 1f       	adc	r19, r19
    3016:	82 0f       	add	r24, r18
    3018:	93 1f       	adc	r25, r19
    301a:	84 0f       	add	r24, r20
    301c:	95 1f       	adc	r25, r21
    301e:	fc 01       	movw	r30, r24
    3020:	ed 53       	subi	r30, 0x3D	; 61
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	90 81       	ld	r25, Z
    3026:	80 91 68 00 	lds	r24, 0x0068
    302a:	98 17       	cp	r25, r24
    302c:	49 f4       	brne	.+18     	; 0x3040 <CGR_Editor+0xa94>
    302e:	80 91 6f 00 	lds	r24, 0x006F
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	29 f4       	brne	.+10     	; 0x3040 <CGR_Editor+0xa94>
					{
						tail-=2;
    3036:	80 91 69 00 	lds	r24, 0x0069
    303a:	82 50       	subi	r24, 0x02	; 2
    303c:	80 93 69 00 	sts	0x0069, r24
					}
					/*else
						clr_bit(var,4);*/
					if(flag==1)
    3040:	80 91 6e 00 	lds	r24, 0x006E
    3044:	81 30       	cpi	r24, 0x01	; 1
    3046:	21 f4       	brne	.+8      	; 0x3050 <CGR_Editor+0xaa4>
					{
						flag=0;
    3048:	10 92 6e 00 	sts	0x006E, r1
    304c:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
					else
					{
						ArrayOfFlags[i][j]=0;
    3050:	80 91 24 01 	lds	r24, 0x0124
    3054:	28 2f       	mov	r18, r24
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	80 91 c2 00 	lds	r24, 0x00C2
    305c:	48 2f       	mov	r20, r24
    305e:	50 e0       	ldi	r21, 0x00	; 0
    3060:	c9 01       	movw	r24, r18
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	9c 01       	movw	r18, r24
    3068:	22 0f       	add	r18, r18
    306a:	33 1f       	adc	r19, r19
    306c:	22 0f       	add	r18, r18
    306e:	33 1f       	adc	r19, r19
    3070:	82 0f       	add	r24, r18
    3072:	93 1f       	adc	r25, r19
    3074:	84 0f       	add	r24, r20
    3076:	95 1f       	adc	r25, r21
    3078:	fc 01       	movw	r30, r24
    307a:	ee 58       	subi	r30, 0x8E	; 142
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	10 82       	st	Z, r1
						clr_bit(var,1);
    3080:	80 91 70 00 	lds	r24, 0x0070
    3084:	8d 7f       	andi	r24, 0xFD	; 253
    3086:	80 93 70 00 	sts	0x0070, r24
    308a:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
			case 4: if(Field[i][j]==head)//y3ny x=0 fel coordinate
    308e:	80 91 24 01 	lds	r24, 0x0124
    3092:	28 2f       	mov	r18, r24
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	80 91 c2 00 	lds	r24, 0x00C2
    309a:	48 2f       	mov	r20, r24
    309c:	50 e0       	ldi	r21, 0x00	; 0
    309e:	c9 01       	movw	r24, r18
    30a0:	88 0f       	add	r24, r24
    30a2:	99 1f       	adc	r25, r25
    30a4:	9c 01       	movw	r18, r24
    30a6:	22 0f       	add	r18, r18
    30a8:	33 1f       	adc	r19, r19
    30aa:	22 0f       	add	r18, r18
    30ac:	33 1f       	adc	r19, r19
    30ae:	82 0f       	add	r24, r18
    30b0:	93 1f       	adc	r25, r19
    30b2:	84 0f       	add	r24, r20
    30b4:	95 1f       	adc	r25, r21
    30b6:	fc 01       	movw	r30, r24
    30b8:	ed 53       	subi	r30, 0x3D	; 61
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	90 81       	ld	r25, Z
    30be:	80 91 68 00 	lds	r24, 0x0068
    30c2:	98 17       	cp	r25, r24
    30c4:	41 f4       	brne	.+16     	; 0x30d6 <CGR_Editor+0xb2a>
						{
							set_bit(var,0);
    30c6:	80 91 70 00 	lds	r24, 0x0070
    30ca:	81 60       	ori	r24, 0x01	; 1
    30cc:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]==tail)
    30d6:	80 91 24 01 	lds	r24, 0x0124
    30da:	28 2f       	mov	r18, r24
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	80 91 c2 00 	lds	r24, 0x00C2
    30e2:	48 2f       	mov	r20, r24
    30e4:	50 e0       	ldi	r21, 0x00	; 0
    30e6:	c9 01       	movw	r24, r18
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	9c 01       	movw	r18, r24
    30ee:	22 0f       	add	r18, r18
    30f0:	33 1f       	adc	r19, r19
    30f2:	22 0f       	add	r18, r18
    30f4:	33 1f       	adc	r19, r19
    30f6:	82 0f       	add	r24, r18
    30f8:	93 1f       	adc	r25, r19
    30fa:	84 0f       	add	r24, r20
    30fc:	95 1f       	adc	r25, r21
    30fe:	fc 01       	movw	r30, r24
    3100:	ed 53       	subi	r30, 0x3D	; 61
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	90 81       	ld	r25, Z
    3106:	80 91 69 00 	lds	r24, 0x0069
    310a:	98 17       	cp	r25, r24
    310c:	09 f5       	brne	.+66     	; 0x3150 <CGR_Editor+0xba4>
						{
							ArrayOfFlags[i][j]=1;
    310e:	80 91 24 01 	lds	r24, 0x0124
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	80 91 c2 00 	lds	r24, 0x00C2
    311a:	48 2f       	mov	r20, r24
    311c:	50 e0       	ldi	r21, 0x00	; 0
    311e:	c9 01       	movw	r24, r18
    3120:	88 0f       	add	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	9c 01       	movw	r18, r24
    3126:	22 0f       	add	r18, r18
    3128:	33 1f       	adc	r19, r19
    312a:	22 0f       	add	r18, r18
    312c:	33 1f       	adc	r19, r19
    312e:	82 0f       	add	r24, r18
    3130:	93 1f       	adc	r25, r19
    3132:	84 0f       	add	r24, r20
    3134:	95 1f       	adc	r25, r21
    3136:	fc 01       	movw	r30, r24
    3138:	ee 58       	subi	r30, 0x8E	; 142
    313a:	ff 4f       	sbci	r31, 0xFF	; 255
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	80 83       	st	Z, r24
							set_bit(var,0);
    3140:	80 91 70 00 	lds	r24, 0x0070
    3144:	81 60       	ori	r24, 0x01	; 1
    3146:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]!=head && Field[i][j]>tail)
    3150:	80 91 24 01 	lds	r24, 0x0124
    3154:	28 2f       	mov	r18, r24
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	80 91 c2 00 	lds	r24, 0x00C2
    315c:	48 2f       	mov	r20, r24
    315e:	50 e0       	ldi	r21, 0x00	; 0
    3160:	c9 01       	movw	r24, r18
    3162:	88 0f       	add	r24, r24
    3164:	99 1f       	adc	r25, r25
    3166:	9c 01       	movw	r18, r24
    3168:	22 0f       	add	r18, r18
    316a:	33 1f       	adc	r19, r19
    316c:	22 0f       	add	r18, r18
    316e:	33 1f       	adc	r19, r19
    3170:	82 0f       	add	r24, r18
    3172:	93 1f       	adc	r25, r19
    3174:	84 0f       	add	r24, r20
    3176:	95 1f       	adc	r25, r21
    3178:	fc 01       	movw	r30, r24
    317a:	ed 53       	subi	r30, 0x3D	; 61
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	90 81       	ld	r25, Z
    3180:	80 91 68 00 	lds	r24, 0x0068
    3184:	98 17       	cp	r25, r24
    3186:	e9 f1       	breq	.+122    	; 0x3202 <CGR_Editor+0xc56>
    3188:	80 91 24 01 	lds	r24, 0x0124
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	80 91 c2 00 	lds	r24, 0x00C2
    3194:	48 2f       	mov	r20, r24
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	c9 01       	movw	r24, r18
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	9c 01       	movw	r18, r24
    31a0:	22 0f       	add	r18, r18
    31a2:	33 1f       	adc	r19, r19
    31a4:	22 0f       	add	r18, r18
    31a6:	33 1f       	adc	r19, r19
    31a8:	82 0f       	add	r24, r18
    31aa:	93 1f       	adc	r25, r19
    31ac:	84 0f       	add	r24, r20
    31ae:	95 1f       	adc	r25, r21
    31b0:	fc 01       	movw	r30, r24
    31b2:	ed 53       	subi	r30, 0x3D	; 61
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	90 81       	ld	r25, Z
    31b8:	80 91 69 00 	lds	r24, 0x0069
    31bc:	89 17       	cp	r24, r25
    31be:	08 f5       	brcc	.+66     	; 0x3202 <CGR_Editor+0xc56>
						{
							ArrayOfFlags[i][j]=1;
    31c0:	80 91 24 01 	lds	r24, 0x0124
    31c4:	28 2f       	mov	r18, r24
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	80 91 c2 00 	lds	r24, 0x00C2
    31cc:	48 2f       	mov	r20, r24
    31ce:	50 e0       	ldi	r21, 0x00	; 0
    31d0:	c9 01       	movw	r24, r18
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	9c 01       	movw	r18, r24
    31d8:	22 0f       	add	r18, r18
    31da:	33 1f       	adc	r19, r19
    31dc:	22 0f       	add	r18, r18
    31de:	33 1f       	adc	r19, r19
    31e0:	82 0f       	add	r24, r18
    31e2:	93 1f       	adc	r25, r19
    31e4:	84 0f       	add	r24, r20
    31e6:	95 1f       	adc	r25, r21
    31e8:	fc 01       	movw	r30, r24
    31ea:	ee 58       	subi	r30, 0x8E	; 142
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	80 83       	st	Z, r24
							set_bit(var,0);
    31f2:	80 91 70 00 	lds	r24, 0x0070
    31f6:	81 60       	ori	r24, 0x01	; 1
    31f8:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]>0 && Field[i][j]<2 )
    3202:	80 91 24 01 	lds	r24, 0x0124
    3206:	28 2f       	mov	r18, r24
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	80 91 c2 00 	lds	r24, 0x00C2
    320e:	48 2f       	mov	r20, r24
    3210:	50 e0       	ldi	r21, 0x00	; 0
    3212:	c9 01       	movw	r24, r18
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	9c 01       	movw	r18, r24
    321a:	22 0f       	add	r18, r18
    321c:	33 1f       	adc	r19, r19
    321e:	22 0f       	add	r18, r18
    3220:	33 1f       	adc	r19, r19
    3222:	82 0f       	add	r24, r18
    3224:	93 1f       	adc	r25, r19
    3226:	84 0f       	add	r24, r20
    3228:	95 1f       	adc	r25, r21
    322a:	fc 01       	movw	r30, r24
    322c:	ed 53       	subi	r30, 0x3D	; 61
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	80 81       	ld	r24, Z
    3232:	88 23       	and	r24, r24
    3234:	11 f1       	breq	.+68     	; 0x327a <CGR_Editor+0xcce>
    3236:	80 91 24 01 	lds	r24, 0x0124
    323a:	28 2f       	mov	r18, r24
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	80 91 c2 00 	lds	r24, 0x00C2
    3242:	48 2f       	mov	r20, r24
    3244:	50 e0       	ldi	r21, 0x00	; 0
    3246:	c9 01       	movw	r24, r18
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	9c 01       	movw	r18, r24
    324e:	22 0f       	add	r18, r18
    3250:	33 1f       	adc	r19, r19
    3252:	22 0f       	add	r18, r18
    3254:	33 1f       	adc	r19, r19
    3256:	82 0f       	add	r24, r18
    3258:	93 1f       	adc	r25, r19
    325a:	84 0f       	add	r24, r20
    325c:	95 1f       	adc	r25, r21
    325e:	fc 01       	movw	r30, r24
    3260:	ed 53       	subi	r30, 0x3D	; 61
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 81       	ld	r24, Z
    3266:	82 30       	cpi	r24, 0x02	; 2
    3268:	40 f4       	brcc	.+16     	; 0x327a <CGR_Editor+0xcce>
					{
							set_bit(var,4);
    326a:	80 91 70 00 	lds	r24, 0x0070
    326e:	80 61       	ori	r24, 0x10	; 16
    3270:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 6e 00 	sts	0x006E, r24
					}
					if(Field[i][j]==head && foodflag==1)
    327a:	80 91 24 01 	lds	r24, 0x0124
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	80 91 c2 00 	lds	r24, 0x00C2
    3286:	48 2f       	mov	r20, r24
    3288:	50 e0       	ldi	r21, 0x00	; 0
    328a:	c9 01       	movw	r24, r18
    328c:	88 0f       	add	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	9c 01       	movw	r18, r24
    3292:	22 0f       	add	r18, r18
    3294:	33 1f       	adc	r19, r19
    3296:	22 0f       	add	r18, r18
    3298:	33 1f       	adc	r19, r19
    329a:	82 0f       	add	r24, r18
    329c:	93 1f       	adc	r25, r19
    329e:	84 0f       	add	r24, r20
    32a0:	95 1f       	adc	r25, r21
    32a2:	fc 01       	movw	r30, r24
    32a4:	ed 53       	subi	r30, 0x3D	; 61
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	90 81       	ld	r25, Z
    32aa:	80 91 68 00 	lds	r24, 0x0068
    32ae:	98 17       	cp	r25, r24
    32b0:	49 f4       	brne	.+18     	; 0x32c4 <CGR_Editor+0xd18>
    32b2:	80 91 6f 00 	lds	r24, 0x006F
    32b6:	81 30       	cpi	r24, 0x01	; 1
    32b8:	29 f4       	brne	.+10     	; 0x32c4 <CGR_Editor+0xd18>
					{
						tail-=2;
    32ba:	80 91 69 00 	lds	r24, 0x0069
    32be:	82 50       	subi	r24, 0x02	; 2
    32c0:	80 93 69 00 	sts	0x0069, r24
					}
					/*else
						clr_bit(var,4);*/
					if(flag==1)
    32c4:	80 91 6e 00 	lds	r24, 0x006E
    32c8:	81 30       	cpi	r24, 0x01	; 1
    32ca:	79 f4       	brne	.+30     	; 0x32ea <CGR_Editor+0xd3e>
					{
						Array[i]=var;
    32cc:	80 91 24 01 	lds	r24, 0x0124
    32d0:	88 2f       	mov	r24, r24
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	20 91 70 00 	lds	r18, 0x0070
    32d8:	fc 01       	movw	r30, r24
    32da:	ec 5e       	subi	r30, 0xEC	; 236
    32dc:	fe 4f       	sbci	r31, 0xFE	; 254
    32de:	20 83       	st	Z, r18
						var=0b00000000;
    32e0:	10 92 70 00 	sts	0x0070, r1
						flag=0;
    32e4:	10 92 6e 00 	sts	0x006E, r1
    32e8:	83 c6       	rjmp	.+3334   	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
					else
					{
						ArrayOfFlags[i][j]=0;
    32ea:	80 91 24 01 	lds	r24, 0x0124
    32ee:	28 2f       	mov	r18, r24
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	80 91 c2 00 	lds	r24, 0x00C2
    32f6:	48 2f       	mov	r20, r24
    32f8:	50 e0       	ldi	r21, 0x00	; 0
    32fa:	c9 01       	movw	r24, r18
    32fc:	88 0f       	add	r24, r24
    32fe:	99 1f       	adc	r25, r25
    3300:	9c 01       	movw	r18, r24
    3302:	22 0f       	add	r18, r18
    3304:	33 1f       	adc	r19, r19
    3306:	22 0f       	add	r18, r18
    3308:	33 1f       	adc	r19, r19
    330a:	82 0f       	add	r24, r18
    330c:	93 1f       	adc	r25, r19
    330e:	84 0f       	add	r24, r20
    3310:	95 1f       	adc	r25, r21
    3312:	fc 01       	movw	r30, r24
    3314:	ee 58       	subi	r30, 0x8E	; 142
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	10 82       	st	Z, r1
						clr_bit(var,0);
    331a:	80 91 70 00 	lds	r24, 0x0070
    331e:	8e 7f       	andi	r24, 0xFE	; 254
    3320:	80 93 70 00 	sts	0x0070, r24
						Array[i]=var;
    3324:	80 91 24 01 	lds	r24, 0x0124
    3328:	88 2f       	mov	r24, r24
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	20 91 70 00 	lds	r18, 0x0070
    3330:	fc 01       	movw	r30, r24
    3332:	ec 5e       	subi	r30, 0xEC	; 236
    3334:	fe 4f       	sbci	r31, 0xFE	; 254
    3336:	20 83       	st	Z, r18
						var=0b00000000;
    3338:	10 92 70 00 	sts	0x0070, r1
    333c:	59 c6       	rjmp	.+3250   	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
			case 5: if(Field[i][j]==head)//y3ny x=0 fel coordinate
    333e:	80 91 24 01 	lds	r24, 0x0124
    3342:	28 2f       	mov	r18, r24
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	80 91 c2 00 	lds	r24, 0x00C2
    334a:	48 2f       	mov	r20, r24
    334c:	50 e0       	ldi	r21, 0x00	; 0
    334e:	c9 01       	movw	r24, r18
    3350:	88 0f       	add	r24, r24
    3352:	99 1f       	adc	r25, r25
    3354:	9c 01       	movw	r18, r24
    3356:	22 0f       	add	r18, r18
    3358:	33 1f       	adc	r19, r19
    335a:	22 0f       	add	r18, r18
    335c:	33 1f       	adc	r19, r19
    335e:	82 0f       	add	r24, r18
    3360:	93 1f       	adc	r25, r19
    3362:	84 0f       	add	r24, r20
    3364:	95 1f       	adc	r25, r21
    3366:	fc 01       	movw	r30, r24
    3368:	ed 53       	subi	r30, 0x3D	; 61
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	90 81       	ld	r25, Z
    336e:	80 91 68 00 	lds	r24, 0x0068
    3372:	98 17       	cp	r25, r24
    3374:	41 f4       	brne	.+16     	; 0x3386 <CGR_Editor+0xdda>
						{
							set_bit(var,4);
    3376:	80 91 70 00 	lds	r24, 0x0070
    337a:	80 61       	ori	r24, 0x10	; 16
    337c:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]==tail)
    3386:	80 91 24 01 	lds	r24, 0x0124
    338a:	28 2f       	mov	r18, r24
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	80 91 c2 00 	lds	r24, 0x00C2
    3392:	48 2f       	mov	r20, r24
    3394:	50 e0       	ldi	r21, 0x00	; 0
    3396:	c9 01       	movw	r24, r18
    3398:	88 0f       	add	r24, r24
    339a:	99 1f       	adc	r25, r25
    339c:	9c 01       	movw	r18, r24
    339e:	22 0f       	add	r18, r18
    33a0:	33 1f       	adc	r19, r19
    33a2:	22 0f       	add	r18, r18
    33a4:	33 1f       	adc	r19, r19
    33a6:	82 0f       	add	r24, r18
    33a8:	93 1f       	adc	r25, r19
    33aa:	84 0f       	add	r24, r20
    33ac:	95 1f       	adc	r25, r21
    33ae:	fc 01       	movw	r30, r24
    33b0:	ed 53       	subi	r30, 0x3D	; 61
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	90 81       	ld	r25, Z
    33b6:	80 91 69 00 	lds	r24, 0x0069
    33ba:	98 17       	cp	r25, r24
    33bc:	09 f5       	brne	.+66     	; 0x3400 <CGR_Editor+0xe54>
						{
							ArrayOfFlags[i][j]=1;
    33be:	80 91 24 01 	lds	r24, 0x0124
    33c2:	28 2f       	mov	r18, r24
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	80 91 c2 00 	lds	r24, 0x00C2
    33ca:	48 2f       	mov	r20, r24
    33cc:	50 e0       	ldi	r21, 0x00	; 0
    33ce:	c9 01       	movw	r24, r18
    33d0:	88 0f       	add	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	9c 01       	movw	r18, r24
    33d6:	22 0f       	add	r18, r18
    33d8:	33 1f       	adc	r19, r19
    33da:	22 0f       	add	r18, r18
    33dc:	33 1f       	adc	r19, r19
    33de:	82 0f       	add	r24, r18
    33e0:	93 1f       	adc	r25, r19
    33e2:	84 0f       	add	r24, r20
    33e4:	95 1f       	adc	r25, r21
    33e6:	fc 01       	movw	r30, r24
    33e8:	ee 58       	subi	r30, 0x8E	; 142
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	80 83       	st	Z, r24
							set_bit(var,4);
    33f0:	80 91 70 00 	lds	r24, 0x0070
    33f4:	80 61       	ori	r24, 0x10	; 16
    33f6:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]!=head && Field[i][j]>tail)
    3400:	80 91 24 01 	lds	r24, 0x0124
    3404:	28 2f       	mov	r18, r24
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	80 91 c2 00 	lds	r24, 0x00C2
    340c:	48 2f       	mov	r20, r24
    340e:	50 e0       	ldi	r21, 0x00	; 0
    3410:	c9 01       	movw	r24, r18
    3412:	88 0f       	add	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	9c 01       	movw	r18, r24
    3418:	22 0f       	add	r18, r18
    341a:	33 1f       	adc	r19, r19
    341c:	22 0f       	add	r18, r18
    341e:	33 1f       	adc	r19, r19
    3420:	82 0f       	add	r24, r18
    3422:	93 1f       	adc	r25, r19
    3424:	84 0f       	add	r24, r20
    3426:	95 1f       	adc	r25, r21
    3428:	fc 01       	movw	r30, r24
    342a:	ed 53       	subi	r30, 0x3D	; 61
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	90 81       	ld	r25, Z
    3430:	80 91 68 00 	lds	r24, 0x0068
    3434:	98 17       	cp	r25, r24
    3436:	e9 f1       	breq	.+122    	; 0x34b2 <CGR_Editor+0xf06>
    3438:	80 91 24 01 	lds	r24, 0x0124
    343c:	28 2f       	mov	r18, r24
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	80 91 c2 00 	lds	r24, 0x00C2
    3444:	48 2f       	mov	r20, r24
    3446:	50 e0       	ldi	r21, 0x00	; 0
    3448:	c9 01       	movw	r24, r18
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	9c 01       	movw	r18, r24
    3450:	22 0f       	add	r18, r18
    3452:	33 1f       	adc	r19, r19
    3454:	22 0f       	add	r18, r18
    3456:	33 1f       	adc	r19, r19
    3458:	82 0f       	add	r24, r18
    345a:	93 1f       	adc	r25, r19
    345c:	84 0f       	add	r24, r20
    345e:	95 1f       	adc	r25, r21
    3460:	fc 01       	movw	r30, r24
    3462:	ed 53       	subi	r30, 0x3D	; 61
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	90 81       	ld	r25, Z
    3468:	80 91 69 00 	lds	r24, 0x0069
    346c:	89 17       	cp	r24, r25
    346e:	08 f5       	brcc	.+66     	; 0x34b2 <CGR_Editor+0xf06>
						{
							ArrayOfFlags[i][j]=1;
    3470:	80 91 24 01 	lds	r24, 0x0124
    3474:	28 2f       	mov	r18, r24
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	80 91 c2 00 	lds	r24, 0x00C2
    347c:	48 2f       	mov	r20, r24
    347e:	50 e0       	ldi	r21, 0x00	; 0
    3480:	c9 01       	movw	r24, r18
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	9c 01       	movw	r18, r24
    3488:	22 0f       	add	r18, r18
    348a:	33 1f       	adc	r19, r19
    348c:	22 0f       	add	r18, r18
    348e:	33 1f       	adc	r19, r19
    3490:	82 0f       	add	r24, r18
    3492:	93 1f       	adc	r25, r19
    3494:	84 0f       	add	r24, r20
    3496:	95 1f       	adc	r25, r21
    3498:	fc 01       	movw	r30, r24
    349a:	ee 58       	subi	r30, 0x8E	; 142
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	80 83       	st	Z, r24
							set_bit(var,4);
    34a2:	80 91 70 00 	lds	r24, 0x0070
    34a6:	80 61       	ori	r24, 0x10	; 16
    34a8:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]>0 && Field[i][j]<2 )
    34b2:	80 91 24 01 	lds	r24, 0x0124
    34b6:	28 2f       	mov	r18, r24
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	80 91 c2 00 	lds	r24, 0x00C2
    34be:	48 2f       	mov	r20, r24
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	c9 01       	movw	r24, r18
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	9c 01       	movw	r18, r24
    34ca:	22 0f       	add	r18, r18
    34cc:	33 1f       	adc	r19, r19
    34ce:	22 0f       	add	r18, r18
    34d0:	33 1f       	adc	r19, r19
    34d2:	82 0f       	add	r24, r18
    34d4:	93 1f       	adc	r25, r19
    34d6:	84 0f       	add	r24, r20
    34d8:	95 1f       	adc	r25, r21
    34da:	fc 01       	movw	r30, r24
    34dc:	ed 53       	subi	r30, 0x3D	; 61
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	88 23       	and	r24, r24
    34e4:	11 f1       	breq	.+68     	; 0x352a <CGR_Editor+0xf7e>
    34e6:	80 91 24 01 	lds	r24, 0x0124
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	80 91 c2 00 	lds	r24, 0x00C2
    34f2:	48 2f       	mov	r20, r24
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	c9 01       	movw	r24, r18
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	9c 01       	movw	r18, r24
    34fe:	22 0f       	add	r18, r18
    3500:	33 1f       	adc	r19, r19
    3502:	22 0f       	add	r18, r18
    3504:	33 1f       	adc	r19, r19
    3506:	82 0f       	add	r24, r18
    3508:	93 1f       	adc	r25, r19
    350a:	84 0f       	add	r24, r20
    350c:	95 1f       	adc	r25, r21
    350e:	fc 01       	movw	r30, r24
    3510:	ed 53       	subi	r30, 0x3D	; 61
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	80 81       	ld	r24, Z
    3516:	82 30       	cpi	r24, 0x02	; 2
    3518:	40 f4       	brcc	.+16     	; 0x352a <CGR_Editor+0xf7e>
					{
							set_bit(var,4);
    351a:	80 91 70 00 	lds	r24, 0x0070
    351e:	80 61       	ori	r24, 0x10	; 16
    3520:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	80 93 6e 00 	sts	0x006E, r24
					}
					if(Field[i][j]==head && foodflag==1)
    352a:	80 91 24 01 	lds	r24, 0x0124
    352e:	28 2f       	mov	r18, r24
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	80 91 c2 00 	lds	r24, 0x00C2
    3536:	48 2f       	mov	r20, r24
    3538:	50 e0       	ldi	r21, 0x00	; 0
    353a:	c9 01       	movw	r24, r18
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	9c 01       	movw	r18, r24
    3542:	22 0f       	add	r18, r18
    3544:	33 1f       	adc	r19, r19
    3546:	22 0f       	add	r18, r18
    3548:	33 1f       	adc	r19, r19
    354a:	82 0f       	add	r24, r18
    354c:	93 1f       	adc	r25, r19
    354e:	84 0f       	add	r24, r20
    3550:	95 1f       	adc	r25, r21
    3552:	fc 01       	movw	r30, r24
    3554:	ed 53       	subi	r30, 0x3D	; 61
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	90 81       	ld	r25, Z
    355a:	80 91 68 00 	lds	r24, 0x0068
    355e:	98 17       	cp	r25, r24
    3560:	49 f4       	brne	.+18     	; 0x3574 <CGR_Editor+0xfc8>
    3562:	80 91 6f 00 	lds	r24, 0x006F
    3566:	81 30       	cpi	r24, 0x01	; 1
    3568:	29 f4       	brne	.+10     	; 0x3574 <CGR_Editor+0xfc8>
					{
						tail-=2;
    356a:	80 91 69 00 	lds	r24, 0x0069
    356e:	82 50       	subi	r24, 0x02	; 2
    3570:	80 93 69 00 	sts	0x0069, r24
					}
					/*else
						clr_bit(var,4);*/
					if(flag==1)
    3574:	80 91 6e 00 	lds	r24, 0x006E
    3578:	81 30       	cpi	r24, 0x01	; 1
    357a:	19 f4       	brne	.+6      	; 0x3582 <CGR_Editor+0xfd6>
					{
						flag=0;
    357c:	10 92 6e 00 	sts	0x006E, r1
    3580:	37 c5       	rjmp	.+2670   	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
					else
					{
						ArrayOfFlags[i][j]=0;
    3582:	80 91 24 01 	lds	r24, 0x0124
    3586:	28 2f       	mov	r18, r24
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	80 91 c2 00 	lds	r24, 0x00C2
    358e:	48 2f       	mov	r20, r24
    3590:	50 e0       	ldi	r21, 0x00	; 0
    3592:	c9 01       	movw	r24, r18
    3594:	88 0f       	add	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	9c 01       	movw	r18, r24
    359a:	22 0f       	add	r18, r18
    359c:	33 1f       	adc	r19, r19
    359e:	22 0f       	add	r18, r18
    35a0:	33 1f       	adc	r19, r19
    35a2:	82 0f       	add	r24, r18
    35a4:	93 1f       	adc	r25, r19
    35a6:	84 0f       	add	r24, r20
    35a8:	95 1f       	adc	r25, r21
    35aa:	fc 01       	movw	r30, r24
    35ac:	ee 58       	subi	r30, 0x8E	; 142
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	10 82       	st	Z, r1
						clr_bit(var,4);
    35b2:	80 91 70 00 	lds	r24, 0x0070
    35b6:	8f 7e       	andi	r24, 0xEF	; 239
    35b8:	80 93 70 00 	sts	0x0070, r24
    35bc:	19 c5       	rjmp	.+2610   	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
			case 6: if(Field[i][j]==head)//y3ny x=0 fel coordinate
    35be:	80 91 24 01 	lds	r24, 0x0124
    35c2:	28 2f       	mov	r18, r24
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	80 91 c2 00 	lds	r24, 0x00C2
    35ca:	48 2f       	mov	r20, r24
    35cc:	50 e0       	ldi	r21, 0x00	; 0
    35ce:	c9 01       	movw	r24, r18
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	9c 01       	movw	r18, r24
    35d6:	22 0f       	add	r18, r18
    35d8:	33 1f       	adc	r19, r19
    35da:	22 0f       	add	r18, r18
    35dc:	33 1f       	adc	r19, r19
    35de:	82 0f       	add	r24, r18
    35e0:	93 1f       	adc	r25, r19
    35e2:	84 0f       	add	r24, r20
    35e4:	95 1f       	adc	r25, r21
    35e6:	fc 01       	movw	r30, r24
    35e8:	ed 53       	subi	r30, 0x3D	; 61
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	90 81       	ld	r25, Z
    35ee:	80 91 68 00 	lds	r24, 0x0068
    35f2:	98 17       	cp	r25, r24
    35f4:	41 f4       	brne	.+16     	; 0x3606 <CGR_Editor+0x105a>
						{
							set_bit(var,3);
    35f6:	80 91 70 00 	lds	r24, 0x0070
    35fa:	88 60       	ori	r24, 0x08	; 8
    35fc:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]==tail)
    3606:	80 91 24 01 	lds	r24, 0x0124
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	80 91 c2 00 	lds	r24, 0x00C2
    3612:	48 2f       	mov	r20, r24
    3614:	50 e0       	ldi	r21, 0x00	; 0
    3616:	c9 01       	movw	r24, r18
    3618:	88 0f       	add	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	9c 01       	movw	r18, r24
    361e:	22 0f       	add	r18, r18
    3620:	33 1f       	adc	r19, r19
    3622:	22 0f       	add	r18, r18
    3624:	33 1f       	adc	r19, r19
    3626:	82 0f       	add	r24, r18
    3628:	93 1f       	adc	r25, r19
    362a:	84 0f       	add	r24, r20
    362c:	95 1f       	adc	r25, r21
    362e:	fc 01       	movw	r30, r24
    3630:	ed 53       	subi	r30, 0x3D	; 61
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	90 81       	ld	r25, Z
    3636:	80 91 69 00 	lds	r24, 0x0069
    363a:	98 17       	cp	r25, r24
    363c:	09 f5       	brne	.+66     	; 0x3680 <CGR_Editor+0x10d4>
						{
							ArrayOfFlags[i][j]=1;
    363e:	80 91 24 01 	lds	r24, 0x0124
    3642:	28 2f       	mov	r18, r24
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	80 91 c2 00 	lds	r24, 0x00C2
    364a:	48 2f       	mov	r20, r24
    364c:	50 e0       	ldi	r21, 0x00	; 0
    364e:	c9 01       	movw	r24, r18
    3650:	88 0f       	add	r24, r24
    3652:	99 1f       	adc	r25, r25
    3654:	9c 01       	movw	r18, r24
    3656:	22 0f       	add	r18, r18
    3658:	33 1f       	adc	r19, r19
    365a:	22 0f       	add	r18, r18
    365c:	33 1f       	adc	r19, r19
    365e:	82 0f       	add	r24, r18
    3660:	93 1f       	adc	r25, r19
    3662:	84 0f       	add	r24, r20
    3664:	95 1f       	adc	r25, r21
    3666:	fc 01       	movw	r30, r24
    3668:	ee 58       	subi	r30, 0x8E	; 142
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	80 83       	st	Z, r24
							set_bit(var,3);
    3670:	80 91 70 00 	lds	r24, 0x0070
    3674:	88 60       	ori	r24, 0x08	; 8
    3676:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]!=head && Field[i][j]>tail)
    3680:	80 91 24 01 	lds	r24, 0x0124
    3684:	28 2f       	mov	r18, r24
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	80 91 c2 00 	lds	r24, 0x00C2
    368c:	48 2f       	mov	r20, r24
    368e:	50 e0       	ldi	r21, 0x00	; 0
    3690:	c9 01       	movw	r24, r18
    3692:	88 0f       	add	r24, r24
    3694:	99 1f       	adc	r25, r25
    3696:	9c 01       	movw	r18, r24
    3698:	22 0f       	add	r18, r18
    369a:	33 1f       	adc	r19, r19
    369c:	22 0f       	add	r18, r18
    369e:	33 1f       	adc	r19, r19
    36a0:	82 0f       	add	r24, r18
    36a2:	93 1f       	adc	r25, r19
    36a4:	84 0f       	add	r24, r20
    36a6:	95 1f       	adc	r25, r21
    36a8:	fc 01       	movw	r30, r24
    36aa:	ed 53       	subi	r30, 0x3D	; 61
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	90 81       	ld	r25, Z
    36b0:	80 91 68 00 	lds	r24, 0x0068
    36b4:	98 17       	cp	r25, r24
    36b6:	e9 f1       	breq	.+122    	; 0x3732 <CGR_Editor+0x1186>
    36b8:	80 91 24 01 	lds	r24, 0x0124
    36bc:	28 2f       	mov	r18, r24
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	80 91 c2 00 	lds	r24, 0x00C2
    36c4:	48 2f       	mov	r20, r24
    36c6:	50 e0       	ldi	r21, 0x00	; 0
    36c8:	c9 01       	movw	r24, r18
    36ca:	88 0f       	add	r24, r24
    36cc:	99 1f       	adc	r25, r25
    36ce:	9c 01       	movw	r18, r24
    36d0:	22 0f       	add	r18, r18
    36d2:	33 1f       	adc	r19, r19
    36d4:	22 0f       	add	r18, r18
    36d6:	33 1f       	adc	r19, r19
    36d8:	82 0f       	add	r24, r18
    36da:	93 1f       	adc	r25, r19
    36dc:	84 0f       	add	r24, r20
    36de:	95 1f       	adc	r25, r21
    36e0:	fc 01       	movw	r30, r24
    36e2:	ed 53       	subi	r30, 0x3D	; 61
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	90 81       	ld	r25, Z
    36e8:	80 91 69 00 	lds	r24, 0x0069
    36ec:	89 17       	cp	r24, r25
    36ee:	08 f5       	brcc	.+66     	; 0x3732 <CGR_Editor+0x1186>
						{
							ArrayOfFlags[i][j]=1;
    36f0:	80 91 24 01 	lds	r24, 0x0124
    36f4:	28 2f       	mov	r18, r24
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	80 91 c2 00 	lds	r24, 0x00C2
    36fc:	48 2f       	mov	r20, r24
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	c9 01       	movw	r24, r18
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	9c 01       	movw	r18, r24
    3708:	22 0f       	add	r18, r18
    370a:	33 1f       	adc	r19, r19
    370c:	22 0f       	add	r18, r18
    370e:	33 1f       	adc	r19, r19
    3710:	82 0f       	add	r24, r18
    3712:	93 1f       	adc	r25, r19
    3714:	84 0f       	add	r24, r20
    3716:	95 1f       	adc	r25, r21
    3718:	fc 01       	movw	r30, r24
    371a:	ee 58       	subi	r30, 0x8E	; 142
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	80 83       	st	Z, r24
							set_bit(var,3);
    3722:	80 91 70 00 	lds	r24, 0x0070
    3726:	88 60       	ori	r24, 0x08	; 8
    3728:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]>0 && Field[i][j]<2 )
    3732:	80 91 24 01 	lds	r24, 0x0124
    3736:	28 2f       	mov	r18, r24
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	80 91 c2 00 	lds	r24, 0x00C2
    373e:	48 2f       	mov	r20, r24
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	c9 01       	movw	r24, r18
    3744:	88 0f       	add	r24, r24
    3746:	99 1f       	adc	r25, r25
    3748:	9c 01       	movw	r18, r24
    374a:	22 0f       	add	r18, r18
    374c:	33 1f       	adc	r19, r19
    374e:	22 0f       	add	r18, r18
    3750:	33 1f       	adc	r19, r19
    3752:	82 0f       	add	r24, r18
    3754:	93 1f       	adc	r25, r19
    3756:	84 0f       	add	r24, r20
    3758:	95 1f       	adc	r25, r21
    375a:	fc 01       	movw	r30, r24
    375c:	ed 53       	subi	r30, 0x3D	; 61
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	80 81       	ld	r24, Z
    3762:	88 23       	and	r24, r24
    3764:	11 f1       	breq	.+68     	; 0x37aa <CGR_Editor+0x11fe>
    3766:	80 91 24 01 	lds	r24, 0x0124
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	80 91 c2 00 	lds	r24, 0x00C2
    3772:	48 2f       	mov	r20, r24
    3774:	50 e0       	ldi	r21, 0x00	; 0
    3776:	c9 01       	movw	r24, r18
    3778:	88 0f       	add	r24, r24
    377a:	99 1f       	adc	r25, r25
    377c:	9c 01       	movw	r18, r24
    377e:	22 0f       	add	r18, r18
    3780:	33 1f       	adc	r19, r19
    3782:	22 0f       	add	r18, r18
    3784:	33 1f       	adc	r19, r19
    3786:	82 0f       	add	r24, r18
    3788:	93 1f       	adc	r25, r19
    378a:	84 0f       	add	r24, r20
    378c:	95 1f       	adc	r25, r21
    378e:	fc 01       	movw	r30, r24
    3790:	ed 53       	subi	r30, 0x3D	; 61
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 81       	ld	r24, Z
    3796:	82 30       	cpi	r24, 0x02	; 2
    3798:	40 f4       	brcc	.+16     	; 0x37aa <CGR_Editor+0x11fe>
					{
							set_bit(var,4);
    379a:	80 91 70 00 	lds	r24, 0x0070
    379e:	80 61       	ori	r24, 0x10	; 16
    37a0:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	80 93 6e 00 	sts	0x006E, r24
					}
					if(Field[i][j]==head && foodflag==1)
    37aa:	80 91 24 01 	lds	r24, 0x0124
    37ae:	28 2f       	mov	r18, r24
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	80 91 c2 00 	lds	r24, 0x00C2
    37b6:	48 2f       	mov	r20, r24
    37b8:	50 e0       	ldi	r21, 0x00	; 0
    37ba:	c9 01       	movw	r24, r18
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	9c 01       	movw	r18, r24
    37c2:	22 0f       	add	r18, r18
    37c4:	33 1f       	adc	r19, r19
    37c6:	22 0f       	add	r18, r18
    37c8:	33 1f       	adc	r19, r19
    37ca:	82 0f       	add	r24, r18
    37cc:	93 1f       	adc	r25, r19
    37ce:	84 0f       	add	r24, r20
    37d0:	95 1f       	adc	r25, r21
    37d2:	fc 01       	movw	r30, r24
    37d4:	ed 53       	subi	r30, 0x3D	; 61
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	90 81       	ld	r25, Z
    37da:	80 91 68 00 	lds	r24, 0x0068
    37de:	98 17       	cp	r25, r24
    37e0:	49 f4       	brne	.+18     	; 0x37f4 <CGR_Editor+0x1248>
    37e2:	80 91 6f 00 	lds	r24, 0x006F
    37e6:	81 30       	cpi	r24, 0x01	; 1
    37e8:	29 f4       	brne	.+10     	; 0x37f4 <CGR_Editor+0x1248>
					{
						tail-=2;
    37ea:	80 91 69 00 	lds	r24, 0x0069
    37ee:	82 50       	subi	r24, 0x02	; 2
    37f0:	80 93 69 00 	sts	0x0069, r24
					}
					/*else
						clr_bit(var,4);*/
					if(flag==1)
    37f4:	80 91 6e 00 	lds	r24, 0x006E
    37f8:	81 30       	cpi	r24, 0x01	; 1
    37fa:	19 f4       	brne	.+6      	; 0x3802 <CGR_Editor+0x1256>
					{
						flag=0;
    37fc:	10 92 6e 00 	sts	0x006E, r1
    3800:	f7 c3       	rjmp	.+2030   	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
					else
					{
						ArrayOfFlags[i][j]=0;
    3802:	80 91 24 01 	lds	r24, 0x0124
    3806:	28 2f       	mov	r18, r24
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	80 91 c2 00 	lds	r24, 0x00C2
    380e:	48 2f       	mov	r20, r24
    3810:	50 e0       	ldi	r21, 0x00	; 0
    3812:	c9 01       	movw	r24, r18
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	9c 01       	movw	r18, r24
    381a:	22 0f       	add	r18, r18
    381c:	33 1f       	adc	r19, r19
    381e:	22 0f       	add	r18, r18
    3820:	33 1f       	adc	r19, r19
    3822:	82 0f       	add	r24, r18
    3824:	93 1f       	adc	r25, r19
    3826:	84 0f       	add	r24, r20
    3828:	95 1f       	adc	r25, r21
    382a:	fc 01       	movw	r30, r24
    382c:	ee 58       	subi	r30, 0x8E	; 142
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	10 82       	st	Z, r1
						clr_bit(var,3);
    3832:	80 91 70 00 	lds	r24, 0x0070
    3836:	87 7f       	andi	r24, 0xF7	; 247
    3838:	80 93 70 00 	sts	0x0070, r24
    383c:	d9 c3       	rjmp	.+1970   	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
			case 7: if(Field[i][j]==head)//y3ny x=0 fel coordinate
    383e:	80 91 24 01 	lds	r24, 0x0124
    3842:	28 2f       	mov	r18, r24
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	80 91 c2 00 	lds	r24, 0x00C2
    384a:	48 2f       	mov	r20, r24
    384c:	50 e0       	ldi	r21, 0x00	; 0
    384e:	c9 01       	movw	r24, r18
    3850:	88 0f       	add	r24, r24
    3852:	99 1f       	adc	r25, r25
    3854:	9c 01       	movw	r18, r24
    3856:	22 0f       	add	r18, r18
    3858:	33 1f       	adc	r19, r19
    385a:	22 0f       	add	r18, r18
    385c:	33 1f       	adc	r19, r19
    385e:	82 0f       	add	r24, r18
    3860:	93 1f       	adc	r25, r19
    3862:	84 0f       	add	r24, r20
    3864:	95 1f       	adc	r25, r21
    3866:	fc 01       	movw	r30, r24
    3868:	ed 53       	subi	r30, 0x3D	; 61
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	90 81       	ld	r25, Z
    386e:	80 91 68 00 	lds	r24, 0x0068
    3872:	98 17       	cp	r25, r24
    3874:	41 f4       	brne	.+16     	; 0x3886 <CGR_Editor+0x12da>
						{
							set_bit(var,2);
    3876:	80 91 70 00 	lds	r24, 0x0070
    387a:	84 60       	ori	r24, 0x04	; 4
    387c:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]==tail)
    3886:	80 91 24 01 	lds	r24, 0x0124
    388a:	28 2f       	mov	r18, r24
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	80 91 c2 00 	lds	r24, 0x00C2
    3892:	48 2f       	mov	r20, r24
    3894:	50 e0       	ldi	r21, 0x00	; 0
    3896:	c9 01       	movw	r24, r18
    3898:	88 0f       	add	r24, r24
    389a:	99 1f       	adc	r25, r25
    389c:	9c 01       	movw	r18, r24
    389e:	22 0f       	add	r18, r18
    38a0:	33 1f       	adc	r19, r19
    38a2:	22 0f       	add	r18, r18
    38a4:	33 1f       	adc	r19, r19
    38a6:	82 0f       	add	r24, r18
    38a8:	93 1f       	adc	r25, r19
    38aa:	84 0f       	add	r24, r20
    38ac:	95 1f       	adc	r25, r21
    38ae:	fc 01       	movw	r30, r24
    38b0:	ed 53       	subi	r30, 0x3D	; 61
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	90 81       	ld	r25, Z
    38b6:	80 91 69 00 	lds	r24, 0x0069
    38ba:	98 17       	cp	r25, r24
    38bc:	09 f5       	brne	.+66     	; 0x3900 <CGR_Editor+0x1354>
						{
							ArrayOfFlags[i][j]=1;
    38be:	80 91 24 01 	lds	r24, 0x0124
    38c2:	28 2f       	mov	r18, r24
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	80 91 c2 00 	lds	r24, 0x00C2
    38ca:	48 2f       	mov	r20, r24
    38cc:	50 e0       	ldi	r21, 0x00	; 0
    38ce:	c9 01       	movw	r24, r18
    38d0:	88 0f       	add	r24, r24
    38d2:	99 1f       	adc	r25, r25
    38d4:	9c 01       	movw	r18, r24
    38d6:	22 0f       	add	r18, r18
    38d8:	33 1f       	adc	r19, r19
    38da:	22 0f       	add	r18, r18
    38dc:	33 1f       	adc	r19, r19
    38de:	82 0f       	add	r24, r18
    38e0:	93 1f       	adc	r25, r19
    38e2:	84 0f       	add	r24, r20
    38e4:	95 1f       	adc	r25, r21
    38e6:	fc 01       	movw	r30, r24
    38e8:	ee 58       	subi	r30, 0x8E	; 142
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	80 83       	st	Z, r24
							set_bit(var,2);
    38f0:	80 91 70 00 	lds	r24, 0x0070
    38f4:	84 60       	ori	r24, 0x04	; 4
    38f6:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]!=head && Field[i][j]>tail)
    3900:	80 91 24 01 	lds	r24, 0x0124
    3904:	28 2f       	mov	r18, r24
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	80 91 c2 00 	lds	r24, 0x00C2
    390c:	48 2f       	mov	r20, r24
    390e:	50 e0       	ldi	r21, 0x00	; 0
    3910:	c9 01       	movw	r24, r18
    3912:	88 0f       	add	r24, r24
    3914:	99 1f       	adc	r25, r25
    3916:	9c 01       	movw	r18, r24
    3918:	22 0f       	add	r18, r18
    391a:	33 1f       	adc	r19, r19
    391c:	22 0f       	add	r18, r18
    391e:	33 1f       	adc	r19, r19
    3920:	82 0f       	add	r24, r18
    3922:	93 1f       	adc	r25, r19
    3924:	84 0f       	add	r24, r20
    3926:	95 1f       	adc	r25, r21
    3928:	fc 01       	movw	r30, r24
    392a:	ed 53       	subi	r30, 0x3D	; 61
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	90 81       	ld	r25, Z
    3930:	80 91 68 00 	lds	r24, 0x0068
    3934:	98 17       	cp	r25, r24
    3936:	e9 f1       	breq	.+122    	; 0x39b2 <CGR_Editor+0x1406>
    3938:	80 91 24 01 	lds	r24, 0x0124
    393c:	28 2f       	mov	r18, r24
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	80 91 c2 00 	lds	r24, 0x00C2
    3944:	48 2f       	mov	r20, r24
    3946:	50 e0       	ldi	r21, 0x00	; 0
    3948:	c9 01       	movw	r24, r18
    394a:	88 0f       	add	r24, r24
    394c:	99 1f       	adc	r25, r25
    394e:	9c 01       	movw	r18, r24
    3950:	22 0f       	add	r18, r18
    3952:	33 1f       	adc	r19, r19
    3954:	22 0f       	add	r18, r18
    3956:	33 1f       	adc	r19, r19
    3958:	82 0f       	add	r24, r18
    395a:	93 1f       	adc	r25, r19
    395c:	84 0f       	add	r24, r20
    395e:	95 1f       	adc	r25, r21
    3960:	fc 01       	movw	r30, r24
    3962:	ed 53       	subi	r30, 0x3D	; 61
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	90 81       	ld	r25, Z
    3968:	80 91 69 00 	lds	r24, 0x0069
    396c:	89 17       	cp	r24, r25
    396e:	08 f5       	brcc	.+66     	; 0x39b2 <CGR_Editor+0x1406>
						{
							ArrayOfFlags[i][j]=1;
    3970:	80 91 24 01 	lds	r24, 0x0124
    3974:	28 2f       	mov	r18, r24
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	80 91 c2 00 	lds	r24, 0x00C2
    397c:	48 2f       	mov	r20, r24
    397e:	50 e0       	ldi	r21, 0x00	; 0
    3980:	c9 01       	movw	r24, r18
    3982:	88 0f       	add	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	9c 01       	movw	r18, r24
    3988:	22 0f       	add	r18, r18
    398a:	33 1f       	adc	r19, r19
    398c:	22 0f       	add	r18, r18
    398e:	33 1f       	adc	r19, r19
    3990:	82 0f       	add	r24, r18
    3992:	93 1f       	adc	r25, r19
    3994:	84 0f       	add	r24, r20
    3996:	95 1f       	adc	r25, r21
    3998:	fc 01       	movw	r30, r24
    399a:	ee 58       	subi	r30, 0x8E	; 142
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	80 83       	st	Z, r24
							set_bit(var,2);
    39a2:	80 91 70 00 	lds	r24, 0x0070
    39a6:	84 60       	ori	r24, 0x04	; 4
    39a8:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]>0 && Field[i][j]<2 )
    39b2:	80 91 24 01 	lds	r24, 0x0124
    39b6:	28 2f       	mov	r18, r24
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	80 91 c2 00 	lds	r24, 0x00C2
    39be:	48 2f       	mov	r20, r24
    39c0:	50 e0       	ldi	r21, 0x00	; 0
    39c2:	c9 01       	movw	r24, r18
    39c4:	88 0f       	add	r24, r24
    39c6:	99 1f       	adc	r25, r25
    39c8:	9c 01       	movw	r18, r24
    39ca:	22 0f       	add	r18, r18
    39cc:	33 1f       	adc	r19, r19
    39ce:	22 0f       	add	r18, r18
    39d0:	33 1f       	adc	r19, r19
    39d2:	82 0f       	add	r24, r18
    39d4:	93 1f       	adc	r25, r19
    39d6:	84 0f       	add	r24, r20
    39d8:	95 1f       	adc	r25, r21
    39da:	fc 01       	movw	r30, r24
    39dc:	ed 53       	subi	r30, 0x3D	; 61
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	80 81       	ld	r24, Z
    39e2:	88 23       	and	r24, r24
    39e4:	11 f1       	breq	.+68     	; 0x3a2a <CGR_Editor+0x147e>
    39e6:	80 91 24 01 	lds	r24, 0x0124
    39ea:	28 2f       	mov	r18, r24
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	80 91 c2 00 	lds	r24, 0x00C2
    39f2:	48 2f       	mov	r20, r24
    39f4:	50 e0       	ldi	r21, 0x00	; 0
    39f6:	c9 01       	movw	r24, r18
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	9c 01       	movw	r18, r24
    39fe:	22 0f       	add	r18, r18
    3a00:	33 1f       	adc	r19, r19
    3a02:	22 0f       	add	r18, r18
    3a04:	33 1f       	adc	r19, r19
    3a06:	82 0f       	add	r24, r18
    3a08:	93 1f       	adc	r25, r19
    3a0a:	84 0f       	add	r24, r20
    3a0c:	95 1f       	adc	r25, r21
    3a0e:	fc 01       	movw	r30, r24
    3a10:	ed 53       	subi	r30, 0x3D	; 61
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	82 30       	cpi	r24, 0x02	; 2
    3a18:	40 f4       	brcc	.+16     	; 0x3a2a <CGR_Editor+0x147e>
					{
							set_bit(var,4);
    3a1a:	80 91 70 00 	lds	r24, 0x0070
    3a1e:	80 61       	ori	r24, 0x10	; 16
    3a20:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	80 93 6e 00 	sts	0x006E, r24
					}
					if(Field[i][j]==head && foodflag==1)
    3a2a:	80 91 24 01 	lds	r24, 0x0124
    3a2e:	28 2f       	mov	r18, r24
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	80 91 c2 00 	lds	r24, 0x00C2
    3a36:	48 2f       	mov	r20, r24
    3a38:	50 e0       	ldi	r21, 0x00	; 0
    3a3a:	c9 01       	movw	r24, r18
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	9c 01       	movw	r18, r24
    3a42:	22 0f       	add	r18, r18
    3a44:	33 1f       	adc	r19, r19
    3a46:	22 0f       	add	r18, r18
    3a48:	33 1f       	adc	r19, r19
    3a4a:	82 0f       	add	r24, r18
    3a4c:	93 1f       	adc	r25, r19
    3a4e:	84 0f       	add	r24, r20
    3a50:	95 1f       	adc	r25, r21
    3a52:	fc 01       	movw	r30, r24
    3a54:	ed 53       	subi	r30, 0x3D	; 61
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	90 81       	ld	r25, Z
    3a5a:	80 91 68 00 	lds	r24, 0x0068
    3a5e:	98 17       	cp	r25, r24
    3a60:	49 f4       	brne	.+18     	; 0x3a74 <CGR_Editor+0x14c8>
    3a62:	80 91 6f 00 	lds	r24, 0x006F
    3a66:	81 30       	cpi	r24, 0x01	; 1
    3a68:	29 f4       	brne	.+10     	; 0x3a74 <CGR_Editor+0x14c8>
					{
						tail-=2;
    3a6a:	80 91 69 00 	lds	r24, 0x0069
    3a6e:	82 50       	subi	r24, 0x02	; 2
    3a70:	80 93 69 00 	sts	0x0069, r24
					}
					/*else
						clr_bit(var,4);*/
					if(flag==1)
    3a74:	80 91 6e 00 	lds	r24, 0x006E
    3a78:	81 30       	cpi	r24, 0x01	; 1
    3a7a:	19 f4       	brne	.+6      	; 0x3a82 <CGR_Editor+0x14d6>
					{
						flag=0;
    3a7c:	10 92 6e 00 	sts	0x006E, r1
    3a80:	b7 c2       	rjmp	.+1390   	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
					else
					{
						ArrayOfFlags[i][j]=0;
    3a82:	80 91 24 01 	lds	r24, 0x0124
    3a86:	28 2f       	mov	r18, r24
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	80 91 c2 00 	lds	r24, 0x00C2
    3a8e:	48 2f       	mov	r20, r24
    3a90:	50 e0       	ldi	r21, 0x00	; 0
    3a92:	c9 01       	movw	r24, r18
    3a94:	88 0f       	add	r24, r24
    3a96:	99 1f       	adc	r25, r25
    3a98:	9c 01       	movw	r18, r24
    3a9a:	22 0f       	add	r18, r18
    3a9c:	33 1f       	adc	r19, r19
    3a9e:	22 0f       	add	r18, r18
    3aa0:	33 1f       	adc	r19, r19
    3aa2:	82 0f       	add	r24, r18
    3aa4:	93 1f       	adc	r25, r19
    3aa6:	84 0f       	add	r24, r20
    3aa8:	95 1f       	adc	r25, r21
    3aaa:	fc 01       	movw	r30, r24
    3aac:	ee 58       	subi	r30, 0x8E	; 142
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	10 82       	st	Z, r1
						clr_bit(var,2);
    3ab2:	80 91 70 00 	lds	r24, 0x0070
    3ab6:	8b 7f       	andi	r24, 0xFB	; 251
    3ab8:	80 93 70 00 	sts	0x0070, r24
    3abc:	99 c2       	rjmp	.+1330   	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
			case 8: if(Field[i][j]==head)//y3ny x=0 fel coordinate
    3abe:	80 91 24 01 	lds	r24, 0x0124
    3ac2:	28 2f       	mov	r18, r24
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	80 91 c2 00 	lds	r24, 0x00C2
    3aca:	48 2f       	mov	r20, r24
    3acc:	50 e0       	ldi	r21, 0x00	; 0
    3ace:	c9 01       	movw	r24, r18
    3ad0:	88 0f       	add	r24, r24
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	9c 01       	movw	r18, r24
    3ad6:	22 0f       	add	r18, r18
    3ad8:	33 1f       	adc	r19, r19
    3ada:	22 0f       	add	r18, r18
    3adc:	33 1f       	adc	r19, r19
    3ade:	82 0f       	add	r24, r18
    3ae0:	93 1f       	adc	r25, r19
    3ae2:	84 0f       	add	r24, r20
    3ae4:	95 1f       	adc	r25, r21
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	ed 53       	subi	r30, 0x3D	; 61
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	90 81       	ld	r25, Z
    3aee:	80 91 68 00 	lds	r24, 0x0068
    3af2:	98 17       	cp	r25, r24
    3af4:	41 f4       	brne	.+16     	; 0x3b06 <CGR_Editor+0x155a>
						{
							set_bit(var,1);
    3af6:	80 91 70 00 	lds	r24, 0x0070
    3afa:	82 60       	ori	r24, 0x02	; 2
    3afc:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]==tail)
    3b06:	80 91 24 01 	lds	r24, 0x0124
    3b0a:	28 2f       	mov	r18, r24
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	80 91 c2 00 	lds	r24, 0x00C2
    3b12:	48 2f       	mov	r20, r24
    3b14:	50 e0       	ldi	r21, 0x00	; 0
    3b16:	c9 01       	movw	r24, r18
    3b18:	88 0f       	add	r24, r24
    3b1a:	99 1f       	adc	r25, r25
    3b1c:	9c 01       	movw	r18, r24
    3b1e:	22 0f       	add	r18, r18
    3b20:	33 1f       	adc	r19, r19
    3b22:	22 0f       	add	r18, r18
    3b24:	33 1f       	adc	r19, r19
    3b26:	82 0f       	add	r24, r18
    3b28:	93 1f       	adc	r25, r19
    3b2a:	84 0f       	add	r24, r20
    3b2c:	95 1f       	adc	r25, r21
    3b2e:	fc 01       	movw	r30, r24
    3b30:	ed 53       	subi	r30, 0x3D	; 61
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	90 81       	ld	r25, Z
    3b36:	80 91 69 00 	lds	r24, 0x0069
    3b3a:	98 17       	cp	r25, r24
    3b3c:	09 f5       	brne	.+66     	; 0x3b80 <CGR_Editor+0x15d4>
						{
							ArrayOfFlags[i][j]=1;
    3b3e:	80 91 24 01 	lds	r24, 0x0124
    3b42:	28 2f       	mov	r18, r24
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	80 91 c2 00 	lds	r24, 0x00C2
    3b4a:	48 2f       	mov	r20, r24
    3b4c:	50 e0       	ldi	r21, 0x00	; 0
    3b4e:	c9 01       	movw	r24, r18
    3b50:	88 0f       	add	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	9c 01       	movw	r18, r24
    3b56:	22 0f       	add	r18, r18
    3b58:	33 1f       	adc	r19, r19
    3b5a:	22 0f       	add	r18, r18
    3b5c:	33 1f       	adc	r19, r19
    3b5e:	82 0f       	add	r24, r18
    3b60:	93 1f       	adc	r25, r19
    3b62:	84 0f       	add	r24, r20
    3b64:	95 1f       	adc	r25, r21
    3b66:	fc 01       	movw	r30, r24
    3b68:	ee 58       	subi	r30, 0x8E	; 142
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	80 83       	st	Z, r24
							set_bit(var,1);
    3b70:	80 91 70 00 	lds	r24, 0x0070
    3b74:	82 60       	ori	r24, 0x02	; 2
    3b76:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]!=head && Field[i][j]>tail)
    3b80:	80 91 24 01 	lds	r24, 0x0124
    3b84:	28 2f       	mov	r18, r24
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	80 91 c2 00 	lds	r24, 0x00C2
    3b8c:	48 2f       	mov	r20, r24
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	c9 01       	movw	r24, r18
    3b92:	88 0f       	add	r24, r24
    3b94:	99 1f       	adc	r25, r25
    3b96:	9c 01       	movw	r18, r24
    3b98:	22 0f       	add	r18, r18
    3b9a:	33 1f       	adc	r19, r19
    3b9c:	22 0f       	add	r18, r18
    3b9e:	33 1f       	adc	r19, r19
    3ba0:	82 0f       	add	r24, r18
    3ba2:	93 1f       	adc	r25, r19
    3ba4:	84 0f       	add	r24, r20
    3ba6:	95 1f       	adc	r25, r21
    3ba8:	fc 01       	movw	r30, r24
    3baa:	ed 53       	subi	r30, 0x3D	; 61
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	90 81       	ld	r25, Z
    3bb0:	80 91 68 00 	lds	r24, 0x0068
    3bb4:	98 17       	cp	r25, r24
    3bb6:	e9 f1       	breq	.+122    	; 0x3c32 <CGR_Editor+0x1686>
    3bb8:	80 91 24 01 	lds	r24, 0x0124
    3bbc:	28 2f       	mov	r18, r24
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	80 91 c2 00 	lds	r24, 0x00C2
    3bc4:	48 2f       	mov	r20, r24
    3bc6:	50 e0       	ldi	r21, 0x00	; 0
    3bc8:	c9 01       	movw	r24, r18
    3bca:	88 0f       	add	r24, r24
    3bcc:	99 1f       	adc	r25, r25
    3bce:	9c 01       	movw	r18, r24
    3bd0:	22 0f       	add	r18, r18
    3bd2:	33 1f       	adc	r19, r19
    3bd4:	22 0f       	add	r18, r18
    3bd6:	33 1f       	adc	r19, r19
    3bd8:	82 0f       	add	r24, r18
    3bda:	93 1f       	adc	r25, r19
    3bdc:	84 0f       	add	r24, r20
    3bde:	95 1f       	adc	r25, r21
    3be0:	fc 01       	movw	r30, r24
    3be2:	ed 53       	subi	r30, 0x3D	; 61
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	90 81       	ld	r25, Z
    3be8:	80 91 69 00 	lds	r24, 0x0069
    3bec:	89 17       	cp	r24, r25
    3bee:	08 f5       	brcc	.+66     	; 0x3c32 <CGR_Editor+0x1686>
						{
							ArrayOfFlags[i][j]=1;
    3bf0:	80 91 24 01 	lds	r24, 0x0124
    3bf4:	28 2f       	mov	r18, r24
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	80 91 c2 00 	lds	r24, 0x00C2
    3bfc:	48 2f       	mov	r20, r24
    3bfe:	50 e0       	ldi	r21, 0x00	; 0
    3c00:	c9 01       	movw	r24, r18
    3c02:	88 0f       	add	r24, r24
    3c04:	99 1f       	adc	r25, r25
    3c06:	9c 01       	movw	r18, r24
    3c08:	22 0f       	add	r18, r18
    3c0a:	33 1f       	adc	r19, r19
    3c0c:	22 0f       	add	r18, r18
    3c0e:	33 1f       	adc	r19, r19
    3c10:	82 0f       	add	r24, r18
    3c12:	93 1f       	adc	r25, r19
    3c14:	84 0f       	add	r24, r20
    3c16:	95 1f       	adc	r25, r21
    3c18:	fc 01       	movw	r30, r24
    3c1a:	ee 58       	subi	r30, 0x8E	; 142
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	80 83       	st	Z, r24
							set_bit(var,1);
    3c22:	80 91 70 00 	lds	r24, 0x0070
    3c26:	82 60       	ori	r24, 0x02	; 2
    3c28:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]>0 && Field[i][j]<2 )
    3c32:	80 91 24 01 	lds	r24, 0x0124
    3c36:	28 2f       	mov	r18, r24
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	80 91 c2 00 	lds	r24, 0x00C2
    3c3e:	48 2f       	mov	r20, r24
    3c40:	50 e0       	ldi	r21, 0x00	; 0
    3c42:	c9 01       	movw	r24, r18
    3c44:	88 0f       	add	r24, r24
    3c46:	99 1f       	adc	r25, r25
    3c48:	9c 01       	movw	r18, r24
    3c4a:	22 0f       	add	r18, r18
    3c4c:	33 1f       	adc	r19, r19
    3c4e:	22 0f       	add	r18, r18
    3c50:	33 1f       	adc	r19, r19
    3c52:	82 0f       	add	r24, r18
    3c54:	93 1f       	adc	r25, r19
    3c56:	84 0f       	add	r24, r20
    3c58:	95 1f       	adc	r25, r21
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	ed 53       	subi	r30, 0x3D	; 61
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	80 81       	ld	r24, Z
    3c62:	88 23       	and	r24, r24
    3c64:	11 f1       	breq	.+68     	; 0x3caa <CGR_Editor+0x16fe>
    3c66:	80 91 24 01 	lds	r24, 0x0124
    3c6a:	28 2f       	mov	r18, r24
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	80 91 c2 00 	lds	r24, 0x00C2
    3c72:	48 2f       	mov	r20, r24
    3c74:	50 e0       	ldi	r21, 0x00	; 0
    3c76:	c9 01       	movw	r24, r18
    3c78:	88 0f       	add	r24, r24
    3c7a:	99 1f       	adc	r25, r25
    3c7c:	9c 01       	movw	r18, r24
    3c7e:	22 0f       	add	r18, r18
    3c80:	33 1f       	adc	r19, r19
    3c82:	22 0f       	add	r18, r18
    3c84:	33 1f       	adc	r19, r19
    3c86:	82 0f       	add	r24, r18
    3c88:	93 1f       	adc	r25, r19
    3c8a:	84 0f       	add	r24, r20
    3c8c:	95 1f       	adc	r25, r21
    3c8e:	fc 01       	movw	r30, r24
    3c90:	ed 53       	subi	r30, 0x3D	; 61
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 81       	ld	r24, Z
    3c96:	82 30       	cpi	r24, 0x02	; 2
    3c98:	40 f4       	brcc	.+16     	; 0x3caa <CGR_Editor+0x16fe>
					{
							set_bit(var,4);
    3c9a:	80 91 70 00 	lds	r24, 0x0070
    3c9e:	80 61       	ori	r24, 0x10	; 16
    3ca0:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	80 93 6e 00 	sts	0x006E, r24
					}
					if(Field[i][j]==head && foodflag==1)
    3caa:	80 91 24 01 	lds	r24, 0x0124
    3cae:	28 2f       	mov	r18, r24
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	80 91 c2 00 	lds	r24, 0x00C2
    3cb6:	48 2f       	mov	r20, r24
    3cb8:	50 e0       	ldi	r21, 0x00	; 0
    3cba:	c9 01       	movw	r24, r18
    3cbc:	88 0f       	add	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	9c 01       	movw	r18, r24
    3cc2:	22 0f       	add	r18, r18
    3cc4:	33 1f       	adc	r19, r19
    3cc6:	22 0f       	add	r18, r18
    3cc8:	33 1f       	adc	r19, r19
    3cca:	82 0f       	add	r24, r18
    3ccc:	93 1f       	adc	r25, r19
    3cce:	84 0f       	add	r24, r20
    3cd0:	95 1f       	adc	r25, r21
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	ed 53       	subi	r30, 0x3D	; 61
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	90 81       	ld	r25, Z
    3cda:	80 91 68 00 	lds	r24, 0x0068
    3cde:	98 17       	cp	r25, r24
    3ce0:	49 f4       	brne	.+18     	; 0x3cf4 <CGR_Editor+0x1748>
    3ce2:	80 91 6f 00 	lds	r24, 0x006F
    3ce6:	81 30       	cpi	r24, 0x01	; 1
    3ce8:	29 f4       	brne	.+10     	; 0x3cf4 <CGR_Editor+0x1748>
					{
						tail-=2;
    3cea:	80 91 69 00 	lds	r24, 0x0069
    3cee:	82 50       	subi	r24, 0x02	; 2
    3cf0:	80 93 69 00 	sts	0x0069, r24
					}
					/*else
						clr_bit(var,4);*/
					if(flag==1)
    3cf4:	80 91 6e 00 	lds	r24, 0x006E
    3cf8:	81 30       	cpi	r24, 0x01	; 1
    3cfa:	19 f4       	brne	.+6      	; 0x3d02 <CGR_Editor+0x1756>
					{
						flag=0;
    3cfc:	10 92 6e 00 	sts	0x006E, r1
    3d00:	77 c1       	rjmp	.+750    	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
					else
					{
						ArrayOfFlags[i][j]=0;
    3d02:	80 91 24 01 	lds	r24, 0x0124
    3d06:	28 2f       	mov	r18, r24
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	80 91 c2 00 	lds	r24, 0x00C2
    3d0e:	48 2f       	mov	r20, r24
    3d10:	50 e0       	ldi	r21, 0x00	; 0
    3d12:	c9 01       	movw	r24, r18
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	9c 01       	movw	r18, r24
    3d1a:	22 0f       	add	r18, r18
    3d1c:	33 1f       	adc	r19, r19
    3d1e:	22 0f       	add	r18, r18
    3d20:	33 1f       	adc	r19, r19
    3d22:	82 0f       	add	r24, r18
    3d24:	93 1f       	adc	r25, r19
    3d26:	84 0f       	add	r24, r20
    3d28:	95 1f       	adc	r25, r21
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	ee 58       	subi	r30, 0x8E	; 142
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	10 82       	st	Z, r1
						clr_bit(var,1);
    3d32:	80 91 70 00 	lds	r24, 0x0070
    3d36:	8d 7f       	andi	r24, 0xFD	; 253
    3d38:	80 93 70 00 	sts	0x0070, r24
    3d3c:	59 c1       	rjmp	.+690    	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
			case 9: if(Field[i][j]==head)//y3ny x=0 fel coordinate
    3d3e:	80 91 24 01 	lds	r24, 0x0124
    3d42:	28 2f       	mov	r18, r24
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	80 91 c2 00 	lds	r24, 0x00C2
    3d4a:	48 2f       	mov	r20, r24
    3d4c:	50 e0       	ldi	r21, 0x00	; 0
    3d4e:	c9 01       	movw	r24, r18
    3d50:	88 0f       	add	r24, r24
    3d52:	99 1f       	adc	r25, r25
    3d54:	9c 01       	movw	r18, r24
    3d56:	22 0f       	add	r18, r18
    3d58:	33 1f       	adc	r19, r19
    3d5a:	22 0f       	add	r18, r18
    3d5c:	33 1f       	adc	r19, r19
    3d5e:	82 0f       	add	r24, r18
    3d60:	93 1f       	adc	r25, r19
    3d62:	84 0f       	add	r24, r20
    3d64:	95 1f       	adc	r25, r21
    3d66:	fc 01       	movw	r30, r24
    3d68:	ed 53       	subi	r30, 0x3D	; 61
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	90 81       	ld	r25, Z
    3d6e:	80 91 68 00 	lds	r24, 0x0068
    3d72:	98 17       	cp	r25, r24
    3d74:	41 f4       	brne	.+16     	; 0x3d86 <CGR_Editor+0x17da>
						{
							set_bit(var,0);
    3d76:	80 91 70 00 	lds	r24, 0x0070
    3d7a:	81 60       	ori	r24, 0x01	; 1
    3d7c:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]==tail)
    3d86:	80 91 24 01 	lds	r24, 0x0124
    3d8a:	28 2f       	mov	r18, r24
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	80 91 c2 00 	lds	r24, 0x00C2
    3d92:	48 2f       	mov	r20, r24
    3d94:	50 e0       	ldi	r21, 0x00	; 0
    3d96:	c9 01       	movw	r24, r18
    3d98:	88 0f       	add	r24, r24
    3d9a:	99 1f       	adc	r25, r25
    3d9c:	9c 01       	movw	r18, r24
    3d9e:	22 0f       	add	r18, r18
    3da0:	33 1f       	adc	r19, r19
    3da2:	22 0f       	add	r18, r18
    3da4:	33 1f       	adc	r19, r19
    3da6:	82 0f       	add	r24, r18
    3da8:	93 1f       	adc	r25, r19
    3daa:	84 0f       	add	r24, r20
    3dac:	95 1f       	adc	r25, r21
    3dae:	fc 01       	movw	r30, r24
    3db0:	ed 53       	subi	r30, 0x3D	; 61
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	90 81       	ld	r25, Z
    3db6:	80 91 69 00 	lds	r24, 0x0069
    3dba:	98 17       	cp	r25, r24
    3dbc:	09 f5       	brne	.+66     	; 0x3e00 <CGR_Editor+0x1854>
						{
							ArrayOfFlags[i][j]=1;
    3dbe:	80 91 24 01 	lds	r24, 0x0124
    3dc2:	28 2f       	mov	r18, r24
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	80 91 c2 00 	lds	r24, 0x00C2
    3dca:	48 2f       	mov	r20, r24
    3dcc:	50 e0       	ldi	r21, 0x00	; 0
    3dce:	c9 01       	movw	r24, r18
    3dd0:	88 0f       	add	r24, r24
    3dd2:	99 1f       	adc	r25, r25
    3dd4:	9c 01       	movw	r18, r24
    3dd6:	22 0f       	add	r18, r18
    3dd8:	33 1f       	adc	r19, r19
    3dda:	22 0f       	add	r18, r18
    3ddc:	33 1f       	adc	r19, r19
    3dde:	82 0f       	add	r24, r18
    3de0:	93 1f       	adc	r25, r19
    3de2:	84 0f       	add	r24, r20
    3de4:	95 1f       	adc	r25, r21
    3de6:	fc 01       	movw	r30, r24
    3de8:	ee 58       	subi	r30, 0x8E	; 142
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	80 83       	st	Z, r24
							set_bit(var,0);
    3df0:	80 91 70 00 	lds	r24, 0x0070
    3df4:	81 60       	ori	r24, 0x01	; 1
    3df6:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]!=head && Field[i][j]>tail)
    3e00:	80 91 24 01 	lds	r24, 0x0124
    3e04:	28 2f       	mov	r18, r24
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	80 91 c2 00 	lds	r24, 0x00C2
    3e0c:	48 2f       	mov	r20, r24
    3e0e:	50 e0       	ldi	r21, 0x00	; 0
    3e10:	c9 01       	movw	r24, r18
    3e12:	88 0f       	add	r24, r24
    3e14:	99 1f       	adc	r25, r25
    3e16:	9c 01       	movw	r18, r24
    3e18:	22 0f       	add	r18, r18
    3e1a:	33 1f       	adc	r19, r19
    3e1c:	22 0f       	add	r18, r18
    3e1e:	33 1f       	adc	r19, r19
    3e20:	82 0f       	add	r24, r18
    3e22:	93 1f       	adc	r25, r19
    3e24:	84 0f       	add	r24, r20
    3e26:	95 1f       	adc	r25, r21
    3e28:	fc 01       	movw	r30, r24
    3e2a:	ed 53       	subi	r30, 0x3D	; 61
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	90 81       	ld	r25, Z
    3e30:	80 91 68 00 	lds	r24, 0x0068
    3e34:	98 17       	cp	r25, r24
    3e36:	e9 f1       	breq	.+122    	; 0x3eb2 <CGR_Editor+0x1906>
    3e38:	80 91 24 01 	lds	r24, 0x0124
    3e3c:	28 2f       	mov	r18, r24
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	80 91 c2 00 	lds	r24, 0x00C2
    3e44:	48 2f       	mov	r20, r24
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	c9 01       	movw	r24, r18
    3e4a:	88 0f       	add	r24, r24
    3e4c:	99 1f       	adc	r25, r25
    3e4e:	9c 01       	movw	r18, r24
    3e50:	22 0f       	add	r18, r18
    3e52:	33 1f       	adc	r19, r19
    3e54:	22 0f       	add	r18, r18
    3e56:	33 1f       	adc	r19, r19
    3e58:	82 0f       	add	r24, r18
    3e5a:	93 1f       	adc	r25, r19
    3e5c:	84 0f       	add	r24, r20
    3e5e:	95 1f       	adc	r25, r21
    3e60:	fc 01       	movw	r30, r24
    3e62:	ed 53       	subi	r30, 0x3D	; 61
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	90 81       	ld	r25, Z
    3e68:	80 91 69 00 	lds	r24, 0x0069
    3e6c:	89 17       	cp	r24, r25
    3e6e:	08 f5       	brcc	.+66     	; 0x3eb2 <CGR_Editor+0x1906>
						{
							ArrayOfFlags[i][j]=1;
    3e70:	80 91 24 01 	lds	r24, 0x0124
    3e74:	28 2f       	mov	r18, r24
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	80 91 c2 00 	lds	r24, 0x00C2
    3e7c:	48 2f       	mov	r20, r24
    3e7e:	50 e0       	ldi	r21, 0x00	; 0
    3e80:	c9 01       	movw	r24, r18
    3e82:	88 0f       	add	r24, r24
    3e84:	99 1f       	adc	r25, r25
    3e86:	9c 01       	movw	r18, r24
    3e88:	22 0f       	add	r18, r18
    3e8a:	33 1f       	adc	r19, r19
    3e8c:	22 0f       	add	r18, r18
    3e8e:	33 1f       	adc	r19, r19
    3e90:	82 0f       	add	r24, r18
    3e92:	93 1f       	adc	r25, r19
    3e94:	84 0f       	add	r24, r20
    3e96:	95 1f       	adc	r25, r21
    3e98:	fc 01       	movw	r30, r24
    3e9a:	ee 58       	subi	r30, 0x8E	; 142
    3e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	80 83       	st	Z, r24
							set_bit(var,0);
    3ea2:	80 91 70 00 	lds	r24, 0x0070
    3ea6:	81 60       	ori	r24, 0x01	; 1
    3ea8:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	80 93 6e 00 	sts	0x006E, r24
						}
					if(Field[i][j]>0 && Field[i][j]<2 )
    3eb2:	80 91 24 01 	lds	r24, 0x0124
    3eb6:	28 2f       	mov	r18, r24
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	80 91 c2 00 	lds	r24, 0x00C2
    3ebe:	48 2f       	mov	r20, r24
    3ec0:	50 e0       	ldi	r21, 0x00	; 0
    3ec2:	c9 01       	movw	r24, r18
    3ec4:	88 0f       	add	r24, r24
    3ec6:	99 1f       	adc	r25, r25
    3ec8:	9c 01       	movw	r18, r24
    3eca:	22 0f       	add	r18, r18
    3ecc:	33 1f       	adc	r19, r19
    3ece:	22 0f       	add	r18, r18
    3ed0:	33 1f       	adc	r19, r19
    3ed2:	82 0f       	add	r24, r18
    3ed4:	93 1f       	adc	r25, r19
    3ed6:	84 0f       	add	r24, r20
    3ed8:	95 1f       	adc	r25, r21
    3eda:	fc 01       	movw	r30, r24
    3edc:	ed 53       	subi	r30, 0x3D	; 61
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	80 81       	ld	r24, Z
    3ee2:	88 23       	and	r24, r24
    3ee4:	11 f1       	breq	.+68     	; 0x3f2a <CGR_Editor+0x197e>
    3ee6:	80 91 24 01 	lds	r24, 0x0124
    3eea:	28 2f       	mov	r18, r24
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	80 91 c2 00 	lds	r24, 0x00C2
    3ef2:	48 2f       	mov	r20, r24
    3ef4:	50 e0       	ldi	r21, 0x00	; 0
    3ef6:	c9 01       	movw	r24, r18
    3ef8:	88 0f       	add	r24, r24
    3efa:	99 1f       	adc	r25, r25
    3efc:	9c 01       	movw	r18, r24
    3efe:	22 0f       	add	r18, r18
    3f00:	33 1f       	adc	r19, r19
    3f02:	22 0f       	add	r18, r18
    3f04:	33 1f       	adc	r19, r19
    3f06:	82 0f       	add	r24, r18
    3f08:	93 1f       	adc	r25, r19
    3f0a:	84 0f       	add	r24, r20
    3f0c:	95 1f       	adc	r25, r21
    3f0e:	fc 01       	movw	r30, r24
    3f10:	ed 53       	subi	r30, 0x3D	; 61
    3f12:	ff 4f       	sbci	r31, 0xFF	; 255
    3f14:	80 81       	ld	r24, Z
    3f16:	82 30       	cpi	r24, 0x02	; 2
    3f18:	40 f4       	brcc	.+16     	; 0x3f2a <CGR_Editor+0x197e>
					{
							set_bit(var,4);
    3f1a:	80 91 70 00 	lds	r24, 0x0070
    3f1e:	80 61       	ori	r24, 0x10	; 16
    3f20:	80 93 70 00 	sts	0x0070, r24
							flag=1;
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	80 93 6e 00 	sts	0x006E, r24
					}
					if(Field[i][j]==head && foodflag==1)
    3f2a:	80 91 24 01 	lds	r24, 0x0124
    3f2e:	28 2f       	mov	r18, r24
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	80 91 c2 00 	lds	r24, 0x00C2
    3f36:	48 2f       	mov	r20, r24
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	c9 01       	movw	r24, r18
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	9c 01       	movw	r18, r24
    3f42:	22 0f       	add	r18, r18
    3f44:	33 1f       	adc	r19, r19
    3f46:	22 0f       	add	r18, r18
    3f48:	33 1f       	adc	r19, r19
    3f4a:	82 0f       	add	r24, r18
    3f4c:	93 1f       	adc	r25, r19
    3f4e:	84 0f       	add	r24, r20
    3f50:	95 1f       	adc	r25, r21
    3f52:	fc 01       	movw	r30, r24
    3f54:	ed 53       	subi	r30, 0x3D	; 61
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	90 81       	ld	r25, Z
    3f5a:	80 91 68 00 	lds	r24, 0x0068
    3f5e:	98 17       	cp	r25, r24
    3f60:	49 f4       	brne	.+18     	; 0x3f74 <CGR_Editor+0x19c8>
    3f62:	80 91 6f 00 	lds	r24, 0x006F
    3f66:	81 30       	cpi	r24, 0x01	; 1
    3f68:	29 f4       	brne	.+10     	; 0x3f74 <CGR_Editor+0x19c8>
					{
						tail-=2;
    3f6a:	80 91 69 00 	lds	r24, 0x0069
    3f6e:	82 50       	subi	r24, 0x02	; 2
    3f70:	80 93 69 00 	sts	0x0069, r24
					}
					/*else
						clr_bit(var,4);*/
					if(flag==1)
    3f74:	80 91 6e 00 	lds	r24, 0x006E
    3f78:	81 30       	cpi	r24, 0x01	; 1
    3f7a:	81 f4       	brne	.+32     	; 0x3f9c <CGR_Editor+0x19f0>
					{
						Array[i+8]=var;
    3f7c:	80 91 24 01 	lds	r24, 0x0124
    3f80:	88 2f       	mov	r24, r24
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	08 96       	adiw	r24, 0x08	; 8
    3f86:	20 91 70 00 	lds	r18, 0x0070
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	ec 5e       	subi	r30, 0xEC	; 236
    3f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f90:	20 83       	st	Z, r18
						var=0b00000000;
    3f92:	10 92 70 00 	sts	0x0070, r1
						flag=0;
    3f96:	10 92 6e 00 	sts	0x006E, r1
    3f9a:	2a c0       	rjmp	.+84     	; 0x3ff0 <CGR_Editor+0x1a44>
						break;
					}
					else
					{
						ArrayOfFlags[i][j]=0;
    3f9c:	80 91 24 01 	lds	r24, 0x0124
    3fa0:	28 2f       	mov	r18, r24
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	80 91 c2 00 	lds	r24, 0x00C2
    3fa8:	48 2f       	mov	r20, r24
    3faa:	50 e0       	ldi	r21, 0x00	; 0
    3fac:	c9 01       	movw	r24, r18
    3fae:	88 0f       	add	r24, r24
    3fb0:	99 1f       	adc	r25, r25
    3fb2:	9c 01       	movw	r18, r24
    3fb4:	22 0f       	add	r18, r18
    3fb6:	33 1f       	adc	r19, r19
    3fb8:	22 0f       	add	r18, r18
    3fba:	33 1f       	adc	r19, r19
    3fbc:	82 0f       	add	r24, r18
    3fbe:	93 1f       	adc	r25, r19
    3fc0:	84 0f       	add	r24, r20
    3fc2:	95 1f       	adc	r25, r21
    3fc4:	fc 01       	movw	r30, r24
    3fc6:	ee 58       	subi	r30, 0x8E	; 142
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	10 82       	st	Z, r1
						clr_bit(var,0);
    3fcc:	80 91 70 00 	lds	r24, 0x0070
    3fd0:	8e 7f       	andi	r24, 0xFE	; 254
    3fd2:	80 93 70 00 	sts	0x0070, r24
						Array[i+8]=var;
    3fd6:	80 91 24 01 	lds	r24, 0x0124
    3fda:	88 2f       	mov	r24, r24
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	08 96       	adiw	r24, 0x08	; 8
    3fe0:	20 91 70 00 	lds	r18, 0x0070
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	ec 5e       	subi	r30, 0xEC	; 236
    3fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fea:	20 83       	st	Z, r18
						var=0b00000000;
    3fec:	10 92 70 00 	sts	0x0070, r1
void CGR_Editor()
{
	//LCD_CGR();
	for(i=0;i<8;i++) //I is Y and J is X (x from 0->9) (y from 0->7)
	{
		for(j=0;j<10;j++)
    3ff0:	80 91 c2 00 	lds	r24, 0x00C2
    3ff4:	8f 5f       	subi	r24, 0xFF	; 255
    3ff6:	80 93 c2 00 	sts	0x00C2, r24
    3ffa:	80 91 c2 00 	lds	r24, 0x00C2
    3ffe:	8a 30       	cpi	r24, 0x0A	; 10
    4000:	10 f4       	brcc	.+4      	; 0x4006 <CGR_Editor+0x1a5a>
    4002:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <CGR_Editor+0x1a>
}

void CGR_Editor()
{
	//LCD_CGR();
	for(i=0;i<8;i++) //I is Y and J is X (x from 0->9) (y from 0->7)
    4006:	80 91 24 01 	lds	r24, 0x0124
    400a:	8f 5f       	subi	r24, 0xFF	; 255
    400c:	80 93 24 01 	sts	0x0124, r24
    4010:	80 91 24 01 	lds	r24, 0x0124
    4014:	88 30       	cpi	r24, 0x08	; 8
    4016:	10 f4       	brcc	.+4      	; 0x401c <CGR_Editor+0x1a70>
    4018:	0c 94 df 12 	jmp	0x25be	; 0x25be <CGR_Editor+0x12>
			}
		}
	//Write_data(var);//write_data(0b00011111)
	//var=0b00000000;
	}
}
    401c:	0f 90       	pop	r0
    401e:	0f 90       	pop	r0
    4020:	cf 91       	pop	r28
    4022:	df 91       	pop	r29
    4024:	08 95       	ret

00004026 <printing>:

void printing()
{
    4026:	df 93       	push	r29
    4028:	cf 93       	push	r28
    402a:	cd b7       	in	r28, 0x3d	; 61
    402c:	de b7       	in	r29, 0x3e	; 62
    402e:	2e 97       	sbiw	r28, 0x0e	; 14
    4030:	0f b6       	in	r0, 0x3f	; 63
    4032:	f8 94       	cli
    4034:	de bf       	out	0x3e, r29	; 62
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	cd bf       	out	0x3d, r28	; 61
	LCD_CGR();
    403a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_CGR>
	for (i=0;i<16;i++)
    403e:	10 92 24 01 	sts	0x0124, r1
    4042:	0f c0       	rjmp	.+30     	; 0x4062 <printing+0x3c>
	{
		Write_data(Array[i]);
    4044:	80 91 24 01 	lds	r24, 0x0124
    4048:	88 2f       	mov	r24, r24
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	fc 01       	movw	r30, r24
    404e:	ec 5e       	subi	r30, 0xEC	; 236
    4050:	fe 4f       	sbci	r31, 0xFE	; 254
    4052:	80 81       	ld	r24, Z
    4054:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
}

void printing()
{
	LCD_CGR();
	for (i=0;i<16;i++)
    4058:	80 91 24 01 	lds	r24, 0x0124
    405c:	8f 5f       	subi	r24, 0xFF	; 255
    405e:	80 93 24 01 	sts	0x0124, r24
    4062:	80 91 24 01 	lds	r24, 0x0124
    4066:	80 31       	cpi	r24, 0x10	; 16
    4068:	68 f3       	brcs	.-38     	; 0x4044 <printing+0x1e>
	{
		Write_data(Array[i]);
	}
	LCD_DDR();
    406a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <LCD_DDR>
	LCD_CLR();
    406e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <LCD_CLR>
	Write_data(0);
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
	Write_data(1);
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Write_data>
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	aa ef       	ldi	r26, 0xFA	; 250
    4084:	b3 e4       	ldi	r27, 0x43	; 67
    4086:	8b 87       	std	Y+11, r24	; 0x0b
    4088:	9c 87       	std	Y+12, r25	; 0x0c
    408a:	ad 87       	std	Y+13, r26	; 0x0d
    408c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    408e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4090:	7c 85       	ldd	r23, Y+12	; 0x0c
    4092:	8d 85       	ldd	r24, Y+13	; 0x0d
    4094:	9e 85       	ldd	r25, Y+14	; 0x0e
    4096:	20 e0       	ldi	r18, 0x00	; 0
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	4a ef       	ldi	r20, 0xFA	; 250
    409c:	54 e4       	ldi	r21, 0x44	; 68
    409e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	8f 83       	std	Y+7, r24	; 0x07
    40a8:	98 87       	std	Y+8, r25	; 0x08
    40aa:	a9 87       	std	Y+9, r26	; 0x09
    40ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40ae:	6f 81       	ldd	r22, Y+7	; 0x07
    40b0:	78 85       	ldd	r23, Y+8	; 0x08
    40b2:	89 85       	ldd	r24, Y+9	; 0x09
    40b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	40 e8       	ldi	r20, 0x80	; 128
    40bc:	5f e3       	ldi	r21, 0x3F	; 63
    40be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40c2:	88 23       	and	r24, r24
    40c4:	2c f4       	brge	.+10     	; 0x40d0 <printing+0xaa>
		__ticks = 1;
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	9e 83       	std	Y+6, r25	; 0x06
    40cc:	8d 83       	std	Y+5, r24	; 0x05
    40ce:	3f c0       	rjmp	.+126    	; 0x414e <printing+0x128>
	else if (__tmp > 65535)
    40d0:	6f 81       	ldd	r22, Y+7	; 0x07
    40d2:	78 85       	ldd	r23, Y+8	; 0x08
    40d4:	89 85       	ldd	r24, Y+9	; 0x09
    40d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	3f ef       	ldi	r19, 0xFF	; 255
    40dc:	4f e7       	ldi	r20, 0x7F	; 127
    40de:	57 e4       	ldi	r21, 0x47	; 71
    40e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40e4:	18 16       	cp	r1, r24
    40e6:	4c f5       	brge	.+82     	; 0x413a <printing+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    40ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	40 e2       	ldi	r20, 0x20	; 32
    40f6:	51 e4       	ldi	r21, 0x41	; 65
    40f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	bc 01       	movw	r22, r24
    4102:	cd 01       	movw	r24, r26
    4104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4108:	dc 01       	movw	r26, r24
    410a:	cb 01       	movw	r24, r22
    410c:	9e 83       	std	Y+6, r25	; 0x06
    410e:	8d 83       	std	Y+5, r24	; 0x05
    4110:	0f c0       	rjmp	.+30     	; 0x4130 <printing+0x10a>
    4112:	88 ec       	ldi	r24, 0xC8	; 200
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	9c 83       	std	Y+4, r25	; 0x04
    4118:	8b 83       	std	Y+3, r24	; 0x03
    411a:	8b 81       	ldd	r24, Y+3	; 0x03
    411c:	9c 81       	ldd	r25, Y+4	; 0x04
    411e:	01 97       	sbiw	r24, 0x01	; 1
    4120:	f1 f7       	brne	.-4      	; 0x411e <printing+0xf8>
    4122:	9c 83       	std	Y+4, r25	; 0x04
    4124:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4126:	8d 81       	ldd	r24, Y+5	; 0x05
    4128:	9e 81       	ldd	r25, Y+6	; 0x06
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	9e 83       	std	Y+6, r25	; 0x06
    412e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4130:	8d 81       	ldd	r24, Y+5	; 0x05
    4132:	9e 81       	ldd	r25, Y+6	; 0x06
    4134:	00 97       	sbiw	r24, 0x00	; 0
    4136:	69 f7       	brne	.-38     	; 0x4112 <printing+0xec>
    4138:	14 c0       	rjmp	.+40     	; 0x4162 <printing+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    413a:	6f 81       	ldd	r22, Y+7	; 0x07
    413c:	78 85       	ldd	r23, Y+8	; 0x08
    413e:	89 85       	ldd	r24, Y+9	; 0x09
    4140:	9a 85       	ldd	r25, Y+10	; 0x0a
    4142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4146:	dc 01       	movw	r26, r24
    4148:	cb 01       	movw	r24, r22
    414a:	9e 83       	std	Y+6, r25	; 0x06
    414c:	8d 83       	std	Y+5, r24	; 0x05
    414e:	8d 81       	ldd	r24, Y+5	; 0x05
    4150:	9e 81       	ldd	r25, Y+6	; 0x06
    4152:	9a 83       	std	Y+2, r25	; 0x02
    4154:	89 83       	std	Y+1, r24	; 0x01
    4156:	89 81       	ldd	r24, Y+1	; 0x01
    4158:	9a 81       	ldd	r25, Y+2	; 0x02
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	f1 f7       	brne	.-4      	; 0x415a <printing+0x134>
    415e:	9a 83       	std	Y+2, r25	; 0x02
    4160:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    4162:	2e 96       	adiw	r28, 0x0e	; 14
    4164:	0f b6       	in	r0, 0x3f	; 63
    4166:	f8 94       	cli
    4168:	de bf       	out	0x3e, r29	; 62
    416a:	0f be       	out	0x3f, r0	; 63
    416c:	cd bf       	out	0x3d, r28	; 61
    416e:	cf 91       	pop	r28
    4170:	df 91       	pop	r29
    4172:	08 95       	ret

00004174 <__udivmodqi4>:
    4174:	99 1b       	sub	r25, r25
    4176:	79 e0       	ldi	r23, 0x09	; 9
    4178:	04 c0       	rjmp	.+8      	; 0x4182 <__udivmodqi4_ep>

0000417a <__udivmodqi4_loop>:
    417a:	99 1f       	adc	r25, r25
    417c:	96 17       	cp	r25, r22
    417e:	08 f0       	brcs	.+2      	; 0x4182 <__udivmodqi4_ep>
    4180:	96 1b       	sub	r25, r22

00004182 <__udivmodqi4_ep>:
    4182:	88 1f       	adc	r24, r24
    4184:	7a 95       	dec	r23
    4186:	c9 f7       	brne	.-14     	; 0x417a <__udivmodqi4_loop>
    4188:	80 95       	com	r24
    418a:	08 95       	ret

0000418c <__udivmodhi4>:
    418c:	aa 1b       	sub	r26, r26
    418e:	bb 1b       	sub	r27, r27
    4190:	51 e1       	ldi	r21, 0x11	; 17
    4192:	07 c0       	rjmp	.+14     	; 0x41a2 <__udivmodhi4_ep>

00004194 <__udivmodhi4_loop>:
    4194:	aa 1f       	adc	r26, r26
    4196:	bb 1f       	adc	r27, r27
    4198:	a6 17       	cp	r26, r22
    419a:	b7 07       	cpc	r27, r23
    419c:	10 f0       	brcs	.+4      	; 0x41a2 <__udivmodhi4_ep>
    419e:	a6 1b       	sub	r26, r22
    41a0:	b7 0b       	sbc	r27, r23

000041a2 <__udivmodhi4_ep>:
    41a2:	88 1f       	adc	r24, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	5a 95       	dec	r21
    41a8:	a9 f7       	brne	.-22     	; 0x4194 <__udivmodhi4_loop>
    41aa:	80 95       	com	r24
    41ac:	90 95       	com	r25
    41ae:	bc 01       	movw	r22, r24
    41b0:	cd 01       	movw	r24, r26
    41b2:	08 95       	ret

000041b4 <__divmodhi4>:
    41b4:	97 fb       	bst	r25, 7
    41b6:	09 2e       	mov	r0, r25
    41b8:	07 26       	eor	r0, r23
    41ba:	0a d0       	rcall	.+20     	; 0x41d0 <__divmodhi4_neg1>
    41bc:	77 fd       	sbrc	r23, 7
    41be:	04 d0       	rcall	.+8      	; 0x41c8 <__divmodhi4_neg2>
    41c0:	e5 df       	rcall	.-54     	; 0x418c <__udivmodhi4>
    41c2:	06 d0       	rcall	.+12     	; 0x41d0 <__divmodhi4_neg1>
    41c4:	00 20       	and	r0, r0
    41c6:	1a f4       	brpl	.+6      	; 0x41ce <__divmodhi4_exit>

000041c8 <__divmodhi4_neg2>:
    41c8:	70 95       	com	r23
    41ca:	61 95       	neg	r22
    41cc:	7f 4f       	sbci	r23, 0xFF	; 255

000041ce <__divmodhi4_exit>:
    41ce:	08 95       	ret

000041d0 <__divmodhi4_neg1>:
    41d0:	f6 f7       	brtc	.-4      	; 0x41ce <__divmodhi4_exit>
    41d2:	90 95       	com	r25
    41d4:	81 95       	neg	r24
    41d6:	9f 4f       	sbci	r25, 0xFF	; 255
    41d8:	08 95       	ret

000041da <__prologue_saves__>:
    41da:	2f 92       	push	r2
    41dc:	3f 92       	push	r3
    41de:	4f 92       	push	r4
    41e0:	5f 92       	push	r5
    41e2:	6f 92       	push	r6
    41e4:	7f 92       	push	r7
    41e6:	8f 92       	push	r8
    41e8:	9f 92       	push	r9
    41ea:	af 92       	push	r10
    41ec:	bf 92       	push	r11
    41ee:	cf 92       	push	r12
    41f0:	df 92       	push	r13
    41f2:	ef 92       	push	r14
    41f4:	ff 92       	push	r15
    41f6:	0f 93       	push	r16
    41f8:	1f 93       	push	r17
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    41fe:	cd b7       	in	r28, 0x3d	; 61
    4200:	de b7       	in	r29, 0x3e	; 62
    4202:	ca 1b       	sub	r28, r26
    4204:	db 0b       	sbc	r29, r27
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	f8 94       	cli
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	cd bf       	out	0x3d, r28	; 61
    4210:	09 94       	ijmp

00004212 <__epilogue_restores__>:
    4212:	2a 88       	ldd	r2, Y+18	; 0x12
    4214:	39 88       	ldd	r3, Y+17	; 0x11
    4216:	48 88       	ldd	r4, Y+16	; 0x10
    4218:	5f 84       	ldd	r5, Y+15	; 0x0f
    421a:	6e 84       	ldd	r6, Y+14	; 0x0e
    421c:	7d 84       	ldd	r7, Y+13	; 0x0d
    421e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4220:	9b 84       	ldd	r9, Y+11	; 0x0b
    4222:	aa 84       	ldd	r10, Y+10	; 0x0a
    4224:	b9 84       	ldd	r11, Y+9	; 0x09
    4226:	c8 84       	ldd	r12, Y+8	; 0x08
    4228:	df 80       	ldd	r13, Y+7	; 0x07
    422a:	ee 80       	ldd	r14, Y+6	; 0x06
    422c:	fd 80       	ldd	r15, Y+5	; 0x05
    422e:	0c 81       	ldd	r16, Y+4	; 0x04
    4230:	1b 81       	ldd	r17, Y+3	; 0x03
    4232:	aa 81       	ldd	r26, Y+2	; 0x02
    4234:	b9 81       	ldd	r27, Y+1	; 0x01
    4236:	ce 0f       	add	r28, r30
    4238:	d1 1d       	adc	r29, r1
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	f8 94       	cli
    423e:	de bf       	out	0x3e, r29	; 62
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	cd bf       	out	0x3d, r28	; 61
    4244:	ed 01       	movw	r28, r26
    4246:	08 95       	ret

00004248 <_exit>:
    4248:	f8 94       	cli

0000424a <__stop_program>:
    424a:	ff cf       	rjmp	.-2      	; 0x424a <__stop_program>
